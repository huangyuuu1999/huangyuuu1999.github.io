{"config":{"lang":["zh","en","ja"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to Interesting facts about python","text":"<p>golang \u548c python \u6709\u8bb8\u591a\u7c7b\u4f3c\u7684\u5730\u65b9\uff0c\u4f46\u4e5f\u6709\u4e0d\u4e00\u6837\u7684\u8bbe\u8ba1\u3002</p> <p>\u4ece\u4e00\u4e9b\u5c0f\u6848\u4f8b\u51fa\u53d1\uff0c\u7b80\u5355\u660e\u4e86\u5730\u5c55\u793a\u8fd9\u4e9b\u6709\u8da3\u7684\u4e8b\u5b9e\u3002</p>"},{"location":"golang/GMP/","title":"golang\u8c03\u5ea6\u5668","text":""},{"location":"golang/GMP/#gmp","title":"GMP\u6a21\u578b","text":"<p>GMP\u8fd9\u4e09\u4e2a\u5b57\u6bcd\u662f\u4ec0\u4e48\uff1f G -&gt; goroutine \u534f\u7a0b P -&gt; processor \u5904\u7406\u5668 M -&gt; thread \u7269\u7406\u7ebf\u7a0b</p> <p>\u8fd9\u4e09\u4e2a\u4e1c\u897f\u5728runtime\u91cc\u9762\u90fd\u662f\u7ed3\u6784\u4f53\uff0c\u90fd\u6709\u81ea\u5df1\u7684\u5b9a\u4e49\u7684\u3002</p>"},{"location":"golang/GMP/#m","title":"M\u7684\u4e8b\u60c5","text":"<p>\u7528\u6237\u8fdb\u7a0b\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u6765\u8c03\u5ea6\u7684\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u4ec0\u4e48\u65f6\u5019\u83b7\u5f97CPU\u7b49\u8d44\u6e90\uff0c\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u6765\u51b3\u5b9a\u7684\u3002\u8fd9\u4e00\u5c42\u662fOS\u7684\u8c03\u5ea6\u5c42\uff0cgo\u8bed\u8a00\u7684\u8c03\u5ea6\u5c42\u662f\u5728\u8fd9\u4e00\u5c42\u4e0a\u9762\u7684\u7ec6\u7c92\u5ea6\u7684\u8c03\u5ea6\u5c42\uff0c\u8981\u6ce8\u610f\u533a\u5206\u8fd9\u4e24\u4e2a\u8c03\u5ea6\u3002</p> <p>\u8fd9\u91cc\u7684M\u8bf4\u662f\u7ebf\u7a0b\uff0c\u5b9e\u9645\u4e0a\u5728linux\u4e0b\u9762\u8fd8\u662f\u53ef\u4ee5\u7406\u89e3\u4e3a\u8fdb\u7a0b\uff0c\u8fd9\u90fd\u65e0\u5173\u7d27\u8981\u3002 M\u662f\u5728\u7a0b\u5e8f\u5f00\u59cb\u8fd0\u884c\u7684\u65f6\u5019\u81ea\u52a8\u521b\u5efa\u7684\uff0c\u6570\u91cf\u662f\u53ef\u4ee5\u914d\u7f6e\u7684\uff0c\u8ddf\u786c\u4ef6\u6709\u5173\uff0c\u4e0d\u540c\u7684go\u7248\u672c\u4e5f\u4e0d\u5b8c\u5168\u4e00\u6837\u3002 M\u53ef\u4ee5\u4f11\u7720\uff0c\u4e5f\u53ef\u4ee5\u88ab\u9500\u6bc1\u3002</p>"},{"location":"golang/GMP/#p","title":"P\u5230\u5e95\u662f\u5e72\u5565\u7684\uff1f","text":"<p>P\u662f\u5904\u7406\u5668\uff0c\u534f\u7a0b\u5c31\u662f\u4e00\u6bb5\u4ee3\u7801\uff0c\u53ea\u6709\u5230\u4e86P\u4e0a\u9762\u624d\u80fd\u6267\u884c\u8d77\u6765\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0cP\u7684\u4efb\u52a1\u5c31\u662f\u83b7\u53d6G\u6765\u6267\u884c\u5b83\u4eec\u7684\u3002 \u90a3\u4e48P\u4ece\u54ea\u91cc\u83b7\u53d6G\u6765\u6267\u884c\u5462\uff1f \u6709\u4e24\u4e2a\u5730\u65b9\uff0c\u4e00\u4e2a\u5c31\u662f\u6bcf\u4e2aP\u90fd\u6709\u4e00\u4e2a\u81ea\u5df1\u7684\u672c\u5730\u961f\u5217\uff0c\u9664\u6b64\u4e4b\u5916\u8fd8\u6709\u4e00\u4e2a\u5168\u5c40\u961f\u5217\uff0c\u8fd9\u4e9b\u961f\u5217\u91cc\u9762\u7684\u90fd\u662f\u7b49\u5f85\u88ab\u6267\u884c\u7684\u534f\u7a0bG\u3002  P\u7684\u672c\u5730\u961f\u5217\u91cc\u9762\u7684\u534f\u7a0b\u662f\u6709\u4e00\u5b9a\u7684\u6570\u91cf\u9650\u5236\u7684\u3002 \u4f18\u5148\u5c06\u65b0\u521b\u5efa\u7684G\u653e\u5230\u672c\u5730\u961f\u5217\u4e2d\uff0c\u5982\u679c\u6ee1\u4e86\uff0c\u5c31\u653e\u5230\u5168\u5c40\u961f\u5217\u4e2d\u3002</p> <p>P\u5728\u7a0b\u5e8f\u542f\u52a8\u7684\u65f6\u5019\uff0c\u81ea\u52a8\u521b\u5efa\u7684\uff0cruntime\u91cc\u9762\u3002</p>"},{"location":"golang/GMP/#g","title":"G\u5bf9\u5e94\u534f\u7a0b","text":"<p>\u4e00\u4e2aG\u534f\u7a0b\u4e00\u822c\u5bf9\u5e94\u4e00\u4e2a\u8981 <code>go func() { ... }</code> \u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5c31\u662f\u4e00\u4e2a\u534f\u7a0b\u4efb\u52a1\u3002</p>"},{"location":"golang/GMP/#work-stoling","title":"work stoling \u5077\u53d6","text":"<p>\u5f53\u4e00\u4e2aP\u7ed3\u5408M\uff0c\u7a7a\u95f2\u7684\u65f6\u5019\uff0c\u4f18\u5148\u4ece\u5176\u4ed6P\u7684\u672c\u5730\u961f\u5217\u5077\u53d6G\u6267\u884c\uff0c\u82e5\u5176\u4ed6\u4e5f\u6ca1\u6709\uff0c\u53ef\u4ee5\u4ece\u6709\u9501\u7684\u5168\u5c40\u961f\u5217\u62ffG\u6765\u6267\u884c\u3002 G\u662f\u62a2\u5360\u5f0f\uff0c\u6bcf\u4e2aG\u6700\u591a\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u5c31\u8981\u4e0bCPU\u8ba9\u51fa\u8d44\u6e90\u3002</p>"},{"location":"golang/GMP/#hand-off","title":"hand off \u79fb\u4ea4","text":"<p>\u5f53\u67d0\u4e2aP\u62ff\u5230G\u5f00\u59cb\u6267\u884c\uff0c\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u963b\u585e\uff0c\u4e0d\u5e0c\u671b\u5728\u6b64M\u4e0a\u7b49\u5f85\uff0c\u53ef\u4ee5\u5e26\u7740\u81ea\u5df1\u7684\u672c\u5730\u961f\u5217\uff0c\u8f6c\u79fb\u5230\u5176\u4ed6\u7a7a\u95f2\u7684M\u4e0a\u9762\u6267\u884c\u3002\uff08\u590d\u7528\u7ebf\u7a0b\uff09</p>"},{"location":"golang/GMP/#go-func","title":"go func() {...} \u53d1\u751f\u4e86\u4ec0\u4e48","text":"<p>\u6267\u884c <code>go func() {...}</code> \u7684\u65f6\u5019\uff0c\u5148\u521b\u5efa\u4e00\u4e2aG\uff0c\u521b\u5efa\u5b8c\u4f18\u5148\u653e\u5728\u5f53\u524d\u8fd0\u884c\u7684G\u7684\u672c\u5730\u961f\u5217\uff0c\u5982\u679c\u6ee1\u4e86\uff0c\u5c31\u653e\u5230\u5168\u5c40\u961f\u5217\u3002 \u5982\u679c\u5230\u4e86\u672c\u5730\u961f\u5217\u4e4b\u540e\uff0c\u5f53\u6392\u961f\u6392\u5230\u4e86\uff0cP\u5c31\u4f1a\u5c1d\u8bd5\u83b7\u53d6\u8fd9\u4e2aG\uff0c\u5230M\u4e0a\u6267\u884c\u3002</p> <p>\u6267\u884cG\u7684\u65f6\u5019\u5982\u679c\u53d1\u751f\u963b\u585e\uff08\u7cfb\u7edf\u8c03\u7528\u6216\u8005\u963b\u585e\uff0c\u6216\u8005\u8bf4\u4e2d\u65ad\u4e86\uff09\u4e86\uff0c\u5c31\u4ece\u4f11\u7720\u7684M\u961f\u5217\u4e2d\u83b7\u53d6M\uff0c\u6ca1\u6709\u5c31\u521b\u5efaM\uff0c\u521b\u5efa\u5b8c\u4e86\uff0c\u8ba9\u8fd9\u4e2aM\u63a5\u7ba1P\uff0c\u53bb\u8fdb\u884c\u65b0\u7684\u6267\u884c\uff0c\u539f\u6765\u963b\u585e\u7684G\u5c31\u5728\u8fdc\u5728\u7684M\u4e0a\u963b\u585e\u53bb\u3002</p>"},{"location":"golang/GMP/#g0m0","title":"g0\u548cm0","text":"<p>\u542f\u52a8\u7a0b\u5e8f\u4e4b\u540e\uff0c\u7f16\u53f7\u4e3a0\u7684\u4e3b\u7ebf\u7a0b\u5c31\u662fm0\uff0c \u8fd9\u4e2am0\u4fdd\u5b58\u5728\u5168\u5c40\u53d8\u91cfruntime.m0\uff0c\u4e0d\u9700\u8981\u5728heap\u4e0a\u5206\u914d\uff1f\u5565\u610f\u601d</p> <p>\u8d1f\u8d23\u6267\u884c\u521d\u59cb\u5316\u64cd\u4f5c\uff0c\u5e76\u542f\u52a8\u7b2c\u4e00\u4e2ag</p> <p>g0\uff0c\u6bcf\u6b21\u542f\u52a8\u4e00\u4e2aM\uff0c\u90fd\u4f1a\u7b2c\u4e00\u4e2a\u521b\u5efagoroutine g0\u3002 \u6bcf\u4e00\u4e2aM\u90fd\u6709\u4e00\u4e2ag0 g0\u7684\u5de5\u4f5c\u5c31\u662f\u8d1f\u8d23\u8c03\u5ea6\u5176\u4ed6\u7684g</p> <p>\u5728\u8c03\u5ea6\u6216\u8005\u7cfb\u7edf\u8c03\u7528\u7684\u65f6\u5019\uff0cM\u90fd\u4f1a\u5148\u5207\u6362\u5230g0\uff0c\u518d\u6765\u8c03\u5ea6\u3002</p>"},{"location":"golang/error/","title":"\u9519\u8bef\u5904\u7406","text":""},{"location":"golang/error/#error","title":"error\u662f\u4ec0\u4e48","text":"<p>error\u5c31\u662f\u4e00\u4e2a\u5b9a\u4e49\u597d\u7684\u63a5\u53e3 Go<pre><code>type error interface {\n    Error() string\n}\n</code></pre> \u8fd9\u4e2a\u63a5\u53e3\u53ea\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u5c31\u662fError\u51fd\u6570 Error\u51fd\u6570\u4e0d\u9700\u8981\u53c2\u6570\u5e76\u4e14\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32</p> <p>Go<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\ntype someStructWithErrorFunc struct {\n    msg    string\n    repeat int\n}\n\n/*\u8fd9\u4e2a\u7ed3\u6784\u4f53\u5b9e\u73b0\u4e86Error\u8fd9\u4e2a\u51fd\u6570\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7ed3\u6784\u4f53\u5c31\u5df2\u7ecf\u662f\u4e00\u4e2a\u5408\u683c\u7684error\u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u5c31\u53ef\u4ee5\u88ab\u5f53\u505a\u9519\u8bef\u7c7b\u578b\u6765\u4f7f\u7528*/\nfunc (sswe *someStructWithErrorFunc) Error() string {\n    // repeat msg repeat times.\n    return strings.Repeat(sswe.msg, sswe.repeat)\n}\n\nfunc someFuncUseError(num int) (int, error) {\n    if num &lt; 0 {\n        return 0, &amp;someStructWithErrorFunc{\"should bigger than zero\", 1}\n    }\n    return 2 * num, nil\n}\n\nfunc main() {\n    obj := someStructWithErrorFunc{\n        msg:    \"msg.\",\n        repeat: 3,\n    }\n    ans := obj.Error()\n    fmt.Println(ans)\n\n    res, err := someFuncUseError(2)\n    if err != nil {\n        fmt.Println(err.Error())\n    }\n    res, err = someFuncUseError(-1)\n    if err != nil {\n        fmt.Println(err.Error())\n    }\n    fmt.Println(\"res =\", res)\n}\n</code></pre> \u4e3a\u4ec0\u4e48\u4e0a\u9762\u7684\u4ee3\u7801\u91cc\u9762\uff0c\u8fd4\u56de\u7684\u65f6\u5019\u8981\u8fd4\u56de &amp;someStructWithErrorFunc{\"should bigger than zero\", 1}\uff1f \u56e0\u4e3a\u5b9e\u73b0Error\u51fd\u6570\u7684\u5c31\u662f *someStructWithErrorFunc \u800c\u4e0d\u662f someStructWithErrorFunc</p> <p>\u770b\u4e0b\u9762\u7684\u4ee3\u7801 Go<pre><code>package main\n\nimport (\n    \"fmt\"\n)\n\ntype duck interface {\n    Walk(int)\n    Hello(int)\n    Error() string\n}\n\ntype someAnimal struct {\n    name string\n    age  int\n}\n\nfunc (a someAnimal) Walk(num int) {\n    fmt.Println(\"walk\", num, \"miles.\")\n}\n\nfunc (a someAnimal) Hello(num int) (int, error) {\n    if num &lt; 0 {\n        // \u8fd9\u4e2a\u7ed3\u6784\u4f53\u5b9e\u73b0\u4e86Error\u51fd\u6570\uff0c\u6240\u4ee5\u7b26\u5408error\u63a5\u53e3\uff0c\u5e76\u4e14\u5b9e\u73b0Error\u7684\u5c31\u662f\u7ed3\u6784\u4f53\u800c\u4e0d\u662f\u7ed3\u6784\u4f53\u6307\u9488\n        return -1, someAnimal{\n            name: \"wrong\",\n            age:  -1,\n        }\n    }\n    for _ = range num {\n        fmt.Println(\"hello I'am \", a.name, \"I'am \", a.age, \"years old\")\n    }\n    return num, nil\n}\n\nfunc (a someAnimal) Error() string {\n    return \"something went wrong!\"\n}\n\nfunc main() {\n    a := someAnimal{\n        name: \"kiki\",\n        age:  5,\n    }\n    a.Walk(2)\n    a.Hello(3)\n}\n</code></pre></p>"},{"location":"golang/error/#error_1","title":"error\u600e\u4e48\u521b\u5efa\uff1f","text":""},{"location":"golang/error/#errorsnew","title":"\u4f7f\u7528errors\u5305\u7684New\u65b9\u6cd5\u521b\u5efa\u9519\u8bef","text":"Go<pre><code>err := errors.New(\"\u8fd9\u662f\u4e00\u4e2a\u9519\u8bef\")\n</code></pre>"},{"location":"golang/error/#fmterrorf","title":"\u4f7f\u7528fmt\u5305\u4e0b\u7684Errorf\u51fd\u6570","text":"<p>Go<pre><code>err := fmt.Errorf(\"\u8fd9\u662f%d\u683c\u5f0f\u5316\u53c2\u6570\u7684\u9519\u8bef\", 1)\n</code></pre> error\u662f\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\uff0c\u5b9e\u73b0\u4e86Error\u65b9\u6cd5\u7684\u90fd\u7b26\u5408error\u63a5\u53e3 errorString \u8fd9\u4e2a\u7ed3\u6784\u4f53\uff0c\u5c31\u662f\u4e00\u4e2a\u7b26\u5408error\u501f\u53e3\u7684\u7ed3\u6784\u4f53\uff0c\u5e76\u4e14\u662ferrors\u5305\u81ea\u5e26\u7684\u3002\u5f53\u4f7f\u7528errors.New\u7684\u65f6\u5019\uff0c\u8fd4\u56de\u7684\u8fd8\u662ferrorString</p>"},{"location":"golang/error/#error_2","title":"error\u7684\u4f20\u9012","text":"<p>\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\uff0c\u8c03\u7528\u8005\u8c03\u7528\u7684\u51fd\u6570\u8fd4\u56de\u4e86\u4e00\u4e2a\u9519\u8bef\uff0c\u4f46\u662f\u8c03\u7528\u8005\u672c\u8eab\u4e0d\u8d1f\u8d23\u5904\u7406\u9519\u8bef\uff0c\u4e8e\u662f\u4e5f\u5c06\u9519\u8bef\u4f5c\u4e3a\u8fd4\u56de\u503c\u8fd4\u56de\uff0c\u629b\u7ed9\u4e0a\u4e00\u5c42\u8c03\u7528\u8005\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53eb\u4f20\u9012\uff0c\u9519\u8bef\u5728\u4f20\u9012\u7684\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u5c42\u5c42\u5305\u88c5\uff0c\u5f53\u4e0a\u5c42\u8c03\u7528\u8005\u60f3\u8981\u5224\u65ad\u9519\u8bef\u7684\u7c7b\u578b\u6765\u505a\u51fa\u4e0d\u540c\u7684\u5904\u7406\u65f6\uff0c\u53ef\u80fd\u4f1a\u65e0\u6cd5\u5224\u522b\u9519\u8bef\u7684\u7c7b\u522b\u6216\u8005\u8bef\u5224\u3002 \u94fe\u5f0f\u9519\u8bef\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u79cd\u60c5\u51b5\u3002</p> <p>\u5728error\u5305\u91cc\u9762\uff0c\u5b58\u5728\u4e00\u4e2awrapError \u7ed3\u6784\u4f53\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u5b9e\u73b0\u4e86Error\u65b9\u6cd5\uff0c\u6240\u4ee5\u4e5f\u662f\u4e00\u4e2aerror\u63a5\u53e3\u7c7b\u578b\uff1b\u4f46\u662f\u4ed6\u591a\u4e86\u4e00\u4e2aunWrap\u65b9\u6cd5\u3002</p> <p>Go<pre><code>// fmt\u5305\u4e2d\u5b9a\u4e49\u7684 wrapError\ntype wrapError struct {\n   msg string\n   err error\n}\n\nfunc (e *wrapError) Error() string {\n   return e.msg\n}\n\nfunc (e *wrapError) Unwrap() error {\n   return e.err\n}\n</code></pre> wrapError\u7ed3\u6784\u4f53\u7684err\u5b57\u6bb5\uff0c\u5c31\u662f\u4e00\u4e2a\u4e00\u822c\u7684error\u63a5\u53e3\u503c\u3002</p>"},{"location":"golang/go_lock/","title":"\u8d44\u6e90\u7ade\u4e89\u548c\u9501","text":""},{"location":"golang/go_lock/#gomutex","title":"Go\u7684Mutex","text":""},{"location":"golang/go_lock/#_1","title":"\u9501\u7684\u5fc5\u8981\u6027","text":"<p>race-condition\u6848\u4f8b\uff0c\u591a\u4e2a\u534f\u7a0b\u8bfb\u53d6\u5230\u76f8\u540c\u7684count\uff0c\u5148\u540e\u5199\u5165\u76f8\u540c\u7684\u65b0\u503c\uff0c\u5bfc\u81f4\u7ed3\u679c\u5927\u6982\u7387\u5c0f\u4e8e\u7406\u60f3\u7ed3\u679c10\u3002 Go<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"sync\"\n)\n\nvar count uint32 = 0\n\nfunc main() {\n    var wait sync.WaitGroup\n    for i:= range 16 {\n        go func(count *uint32) {\n            defer wait.Done()\n            wait.Add(1)\n            tmp := *count\n            fmt.Printf(\"before task%v count: %v  ==&gt; \", i, tmp)\n            *count = tmp + 1\n            fmt.Printf(\"after  task%v count: %v\\n\", i, *count)\n        }(&amp;count)\n    }\n    wait.Wait()\n    fmt.Printf(\"finally count: %v\\n\", count)\n}\n</code></pre> \u4f7f\u7528\u9ed8\u8ba4\u7684\u9501\u4fdd\u62a4\u6570\u636eaccess\u4ee3\u7801 Go<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"sync\"\n)\n\nvar count uint32 = 0\nvar lock sync.Mutex // \u5b9e\u73b0\u4e86 sync.Locker \u63a5\u53e3\u7684\u7ed3\u6784\u4f53\n\nfunc main() {\n    var wait sync.WaitGroup\n    for i:= range 10 {\n        go func(count *uint32) {\n            defer wait.Done()\n            wait.Add(1)\n\n            lock.Lock()\n            tmp := *count\n            fmt.Printf(\"before task%v count: %v  ==&gt; \", i, tmp)\n            *count = tmp + 1\n            fmt.Printf(\"after  task%v count: %v\\n\", i, *count)\n            lock.Unlock()\n        }(&amp;count)\n    }\n    wait.Wait()\n    fmt.Printf(\"finally count: %v\\n\", count)\n}\n</code></pre></p>"},{"location":"golang/go_lock/#_2","title":"\u4e0d\u53ef\u91cd\u5165\u9501/\u975e\u9012\u5f52\u9501","text":""},{"location":"golang/go_lock/#_3","title":"\u8bfb\u5199\u9501","text":""},{"location":"golang/go_routine/","title":"\u534f\u7a0b","text":""},{"location":"golang/go_routine/#go","title":"\u4f7f\u7528go\u7684\u534f\u7a0b","text":"<ul> <li>go\u4e2d\u7684\u534f\u7a0b\uff0c\u5bf9\u6bd4\u4e86go\u7684\u534f\u7a0b\u548cpy\u7684\u534f\u7a0b\u7684\u8868\u73b0\u884c\u4e3a\uff1b\u770b\u770b\u534f\u7a0b\u7684\u63a7\u5236\uff0c\u4f7f\u7528Sleep\u6765\u8ba9\u534f\u7a0b\u8fd0\u884c\u3002\u6700\u540e\u5f15\u51fa\u4e86\u534f\u7a0b\u7684\u63a7\u5236\u95ee\u9898\uff1a\u540e\u9762\u4f1a\u4e86\u89e3\u7684\u7ba1\u9053\uff0c\u9501\u548cGroup\u3002</li> </ul>"},{"location":"golang/go_routine/#go_1","title":"\u4f7f\u7528 go \u5173\u952e\u5b57\u5f00\u542f\u534f\u7a0b","text":"<p>go\u5f00\u542f\u534f\u7a0b\u53ea\u9700\u8981\u4e00\u4e2a\u5173\u952e\u5b57go\uff0c\u4e0d\u50cf\u5176\u4ed6\u8bed\u8a00\u4e2d\u53ef\u80fd\u9700\u8981async await \u5bf9\u4e8efunc\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u90fd\u53ef\u4ee5\u5728\u524d\u9762\u52a0\u4e00\u4e2ago\u5173\u952e\u5b57\u6765\u5f00\u542f\u534f\u7a0b</p> <p>Go<pre><code>// 1.\u6f14\u793a\u5982\u4f55\u5f00\u542f\u4e00\u4e2a\u534f\u7a0b go_routine.go\npackage main\n\nimport \"fmt\"\n\n\nfunc test_go_routine() {\n    fmt.Println(\"hello goroutine!\")\n}\n\nfunc main() {\n    // \u53ea\u9700\u8981\u5728\u51fd\u6570\u8c03\u7528\u524d\u9762\u52a0\u4e00\u4e2ago\u5173\u952e\u5b57\u5373\u53ef\n    go test_go_routine()\n}\n</code></pre> \u8fd0\u884c\u4e0a\u9762\u7684\u4ee3\u7801\u4f1a\u53d1\u73b0\uff0c\u6781\u5927\u6982\u7387\u6ca1\u6709\u8f93\u51fa\u4efb\u4f55\u5185\u5bb9\uff0c\u8fd9\u662f\u56e0\u4e3a\uff0cgo\u5173\u952e\u5b57\u53ea\u662f\u7528\u6765\u5f00\u542f\u4e00\u4e2a\u534f\u7a0b\uff0c\u800c\u5e76\u4e0d\u662f\u50cfawait\u90a3\u6837\uff0c\u7b49\u5f85\u4e00\u4e2a\u534f\u7a0b\u8fd0\u884c\u5b8c\u6bd5\u3002 Python<pre><code># \u6f14\u793apython\u7684\u534f\u7a0b\u548cgo\u7684\u534f\u7a0b\u7684\u533a\u522b go_routine.py\nimport asyncio\n\nasync def test_go_routine():\n    print(\"hello goroutine!\")\n    return 42\n\n\nasync def main():\n    res = await test_go_routine()\n    print(\"in main: \", res)\n\nif __name__ == '__main__':\n    asyncio.run(main())\n\n# hello goroutine!\n# in main:  42\n</code></pre> \u5b9e\u9645\u4e0a\u4e0a\u9762\u7684go\u4ee3\u7801\u4e2d\u7684\u534f\u7a0b\uff0c\u6ca1\u6709\u5f00\u59cb\u8fd0\u884c\uff0c\u4e3b\u8fdb\u7a0b\u5c31\u5df2\u7ecf\u7ed3\u675f\u4e86\u3002 \u90a3\u4e48\u8981\u5982\u4f55\u8ba9\u4e0a\u9762\u7684go\u4ee3\u7801\u4e2d\u7684\u534f\u7a0b\u8fd0\u884c\uff1f\u53ea\u9700\u8981\u5728\u4e3b\u51fd\u6570\u91cc\u9762\u60f3\u529e\u6cd5\u201c\u7b49\u4e00\u6bb5\u65f6\u95f4\u201d\uff0c\u4f8b\u5982\u4f7f\u7528time.Sleep\u51fd\u6570</p> Go<pre><code>// \u6f14\u793a \u4e3b\u8fdb\u7a0b\u963b\u585e \u4ee5\u7b49\u5f85\u534f\u7a0b\u8fd0\u884c\u5b8c\u6bd5\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\n\nfunc test_go_routine() {\n    fmt.Println(\"hello goroutine!\")\n}\n\nfunc main() {\n    go test_go_routine() // \u53ea\u9700\u8981\u5728\u51fd\u6570\u8c03\u7528\u524d\u9762\u52a0\u4e00\u4e2ago\u5173\u952e\u5b57\u5373\u53ef\n    time.Sleep(time.Second) // \u4e3b\u8fdb\u7a0b\u963b\u585e1s\uff0c\u4ee5\u4fbf\u4e8e\u8ba9\u534f\u7a0b\u5b8c\u6210\u8fd0\u884c\n}\n</code></pre>"},{"location":"golang/go_routine/#_1","title":"\u5f00\u542f\u534f\u7a0b\u7684\u66f4\u591a\u65b9\u5f0f","text":"<p>go\u7684\u540e\u9762\u5fc5\u987b\u662f\u4e00\u4e2a\u51fd\u6570\u7684\u8c03\u7528\uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u7acb\u5373\u6267\u884c\u51fd\u6570\u7684\u65b9\u5f0f Go<pre><code>// \u4f7f\u7528\u533f\u540d\u51fd\u6570\u7acb\u5373\u6267\u884c\u6765\u5f00\u542f\u534f\u7a0b\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    go func() {\n        fmt.Println(\"go + anonymous func()\")\n    }()\n    time.Sleep(time.Second)\n}\n</code></pre> \u4f46\u662f\u4e0d\u53ef\u4ee5\u662f\u6709\u8fd4\u56de\u503c\u7684\u5185\u7f6e\u51fd\u6570 Go<pre><code>// \u6f14\u793a\u5177\u6709\u8fd4\u56de\u503c\u7684\u5185\u7f6e\u51fd\u6570\uff0c\u4e0d\u53ef\u4ee5\u7528go\u5f00\u542f\u534f\u7a0b\npackage main\n\nimport \"time\"\n\nfunc main() {\n    // go discards result of make([]int, 10) (value of type []int)\n    go make([]int, 10)\n\n    // Sleep has no return value, so it's ok\n    go time.Sleep(time.Second)\n}\n</code></pre> \u4e0b\u9762\u7684\u65b9\u5f0f\u5f00\u542f\u534f\u7a0b\u90fd\u662f\u53ef\u4ee5\u7684 Go<pre><code>// \u4f7f\u75283\u79cd\u65b9\u5f0f\u6765\u5f00\u542f\u534f\u7a0b\nfunc main() {\n    go fmt.Println(\"hello world!\")\n    go hello()\n    go func() {\n        fmt.Println(\"hello world!\")\n    }()\n}\n\nfunc hello() {\n    fmt.Println(\"hello world!\")\n}\n</code></pre> \u4ee5\u4e0a\u4e09\u79cd\u5f00\u542f\u534f\u7a0b\u7684\u65b9\u5f0f\u90fd\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u5176\u5b9e\u8fd9\u4e2a\u4f8b\u5b50\u6267\u884c\u8fc7\u540e\u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u4ec0\u4e48\u90fd\u4e0d\u4f1a\u8f93\u51fa\uff0c\u534f\u7a0b\u662f\u5e76\u53d1\u6267\u884c\u7684\uff0c\u7cfb\u7edf\u521b\u5efa\u534f\u7a0b\u9700\u8981\u65f6\u95f4\uff0c\u800c\u5728\u6b64\u4e4b\u524d\uff0c\u4e3b\u534f\u7a0b\u65e9\u5df2\u8fd0\u884c\u7ed3\u675f\uff0c\u4e00\u65e6\u4e3b\u7ebf\u7a0b\u9000\u51fa\uff0c\u5176\u4ed6\u5b50\u534f\u7a0b\u4e5f\u5c31\u81ea\u7136\u9000\u51fa\u4e86\u3002</p>"},{"location":"golang/go_routine/#_2","title":"\u534f\u7a0b\u5f00\u542f\u540e\uff0c\u4e07\u7c7b\u971c\u5929\u7ade\u81ea\u7531","text":"<p>\u4e00\u65e6\u534f\u7a0b\u88abgo\u5173\u952e\u5b57\u6fc0\u6d3b\uff0c\u4ed6\u5c31\u4f1a\u5728\u5408\u9002\u7684\u65f6\u673a\u8fd0\u884c\uff0c\u4f46\u4e5f\u6709\u53ef\u80fd\u4e0d\u8fd0\u884c\uff08\u5728\u9650\u5b9a\u7684\u65f6\u95f4\u5185\uff09\uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u751a\u81f3\u53ef\u80fd\u51fa\u73b0\u8fd9\u6837\u7684\u7ed3\u679c Bash<pre><code>start\nend\n2\n</code></pre> \u4e5f\u5e76\u4e0d\u610f\u5473\u7740\u5148\u6fc0\u6d3b\u7684\u534f\u7a0b\u5c31\u4e00\u5b9a\u5148\u8fd0\u884c\u3002 Go<pre><code>// \u6f14\u793a\u534f\u7a0b\u5f00\u542f\u4e4b\u540e\uff0c\u662f\u5426\u8fd0\u884c\uff0c\u54ea\u4e00\u4e2a\u5148\u8fd0\u884c\uff0c\u662f\u4e0d\u53ef\u9884\u77e5\u7684\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"start\")\n    for i:=range 10{\n        go fmt.Println(i) \n    }\n    fmt.Println(\"end\")\n}\n</code></pre> \u8fd9\u662f\u4e00\u4e2a\u5728\u5faa\u73af\u4f53\u4e2d\u5f00\u542f\u534f\u7a0b\u7684\u4f8b\u5b50\uff0c\u6c38\u8fdc\u4e5f\u65e0\u6cd5\u7cbe\u51c6\u7684\u9884\u5224\u5230\u5b83\u5230\u5e95\u4f1a\u8f93\u51fa\u4ec0\u4e48\u3002\u53ef\u80fd\u5b50\u534f\u7a0b\u8fd8\u6ca1\u5f00\u59cb\u8fd0\u884c\uff0c\u4e3b\u534f\u7a0b\u5c31\u5df2\u7ecf\u7ed3\u675f\u4e86 \u53c8\u6216\u8005\u53ea\u6709\u4e00\u90e8\u5206\u5b50\u534f\u7a0b\u5728\u4e3b\u534f\u7a0b\u9000\u51fa\u524d\u6210\u529f\u8fd0\u884c\u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u8ba9\u4e3b\u8fdb\u7a0b\u6765\u7b49\u4e00\u7b49\u5427\uff0c\u8fd9\u6837\u6240\u6709\u7684\u534f\u7a0b\u5c31\u90fd\u80fd\u6267\u884c\u5b8c\u6bd5\u4e86\uff0c\u4e0d\u662f\u5417\uff1f Go<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    fmt.Println(\"start\")\n    for i:=range 10{\n        go fmt.Println(i) \n    }\n    time.Sleep(time.Millisecond) // Println\u4eec: \u592a\u597d\u5566\uff0c\u662fsleep\u51fd\u6570\uff0c\u6211\u4eec\u6709\u6551\u4e86\uff01\n    fmt.Println(\"end\")\n}\n// start\n// 1\n// 9\n// ...\n// 3\n// 2\n// end\n</code></pre> \u5f53\u628aSleep\u7684\u65f6\u95f4\u8bbe\u7f6e\u7684\u8db3\u591f\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6240\u6709\u7684\u534f\u7a0b\u90fd\u53ef\u4ee5\u5b8c\u6210\u4e86\u3002\u4f46\u662f\u6ce8\u610f\u8f93\u51fa\u7684\u5185\u5bb9\u4e0d\u662f\u6709\u5e8f\u7684\u54e6\u3002\u5373\u534f\u7a0b\u4ec0\u4e48\u65f6\u5019\u6267\u884c\uff0c\u5e76\u4e0d\u80fd\u7531\u7a0b\u5e8f\u5458\u6765\u5b89\u6392\uff0c\u800c\u662f\u7531GPM\u6a21\u578b\u81ea\u884c\u8c03\u5ea6\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u5148\u5f00\u542f\u4e00\u4e2a\uff0c\u7b49\u4e00\u6bb5\u65f6\u95f4\uff0c\u518d\u5f00\u542f\u7b2c\u4e8c\u4e2a\uff0c\u8fd9\u6837\u7684\u65b9\u5f0f\uff0c\u8ba9\u5148\u5f00\u542f\u7684\u5c3d\u53ef\u80fd\u5148\u88ab\u5904\u7406\u3002 Go<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    fmt.Println(\"start\")\n    for i:=range 10{\n        go fmt.Println(i) \n        time.Sleep(time.Millisecond)\n    }\n    time.Sleep(time.Millisecond) // Println\u4eec: \u592a\u597d\u5566\uff0c\u662fsleep\u51fd\u6570\uff0c\u6211\u4eec\u6709\u6551\u4e86\uff01\n    fmt.Println(\"end\")\n}\n\n// start\n// 0\n// ...\n// 9\n// end\n</code></pre></p> <p>\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u7ed3\u679c\u8f93\u51fa\u5f88\u5b8c\u7f8e\uff0c\u90a3\u4e48\u5e76\u53d1\u7684\u95ee\u9898\u89e3\u51b3\u4e86\u5417\uff0c\u4e0d\uff0c\u4e00\u70b9\u4e5f\u6ca1\u6709\u3002\u5bf9\u4e8e\u5e76\u53d1\u7684\u7a0b\u5e8f\u800c\u8a00\uff0c\u4e0d\u53ef\u63a7\u7684\u56e0\u7d20\u975e\u5e38\u591a\uff0c\u6267\u884c\u7684\u65f6\u673a\uff0c\u5148\u540e\u987a\u5e8f\uff0c\u6267\u884c\u8fc7\u7a0b\u7684\u8017\u65f6\u7b49\u7b49\uff0c\u5018\u82e5\u5faa\u73af\u4e2d\u5b50\u534f\u7a0b\u7684\u5de5\u4f5c\u4e0d\u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u8f93\u51fa\u6570\u5b57\uff0c\u800c\u662f\u4e00\u4e2a\u975e\u5e38\u5de8\u5927\u590d\u6742\u7684\u4efb\u52a1\uff0c\u8017\u65f6\u7684\u4e0d\u786e\u5b9a\u7684\uff0c\u90a3\u4e48\u4f9d\u65e7\u4f1a\u91cd\u73b0\u4e4b\u524d\u7684\u95ee\u9898\u3002</p> <p>Go<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"time\"\n\n    \"golang.org/x/exp/rand\"\n)\n\n// \u73b0\u5b9e\u4e2d\u7684 \u534f\u7a0b \u8fd0\u884c\u7684\u65f6\u95f4\u4e0d\u4f1a\u5f88\u56fa\u5b9a\uff08\u4e00\u5b9a\u662f1ms\uff09\uff0c\u53ef\u80fd\u662f\u5b8c\u5168\u4e0d\u786e\u5b9a\u7684\n\nfunc main() {\n    fmt.Println(\"start\")\n    for i := 0; i &lt; 10; i++ {\n        go hello(i)\n        time.Sleep(time.Millisecond)\n    }\n    time.Sleep(time.Millisecond)\n    fmt.Println(\"end\")\n}\n\nfunc hello(i int) {\n    // \u6a21\u62df\u968f\u673a\u8017\u65f6\n    time.Sleep(time.Millisecond * time.Duration(rand.Intn(1000)))\n    fmt.Println(i)\n}\n</code></pre> \u56e0\u6b64time.Sleep\u5e76\u4e0d\u662f\u4e00\u79cd\u826f\u597d\u7684\u89e3\u51b3\u529e\u6cd5.</p>"},{"location":"golang/go_routine/#_3","title":"\u5e76\u53d1\u63a7\u5236\u65b9\u5f0f\uff1f","text":"<p>\u5e78\u8fd0\u7684\u662fGo\u63d0\u4f9b\u4e86\u975e\u5e38\u591a\u7684\u5e76\u53d1\u63a7\u5236\u624b\u6bb5\uff0c\u5e38\u7528\u7684\u5e76\u53d1\u63a7\u5236\u65b9\u6cd5\u6709\u4e09\u79cd\uff1a</p> <p>channel\uff1a\u7ba1\u9053 WaitGroup\uff1a\u4fe1\u53f7\u91cf Context\uff1a\u4e0a\u4e0b\u6587</p> <p>\u4e09\u79cd\u65b9\u6cd5\u6709\u7740\u4e0d\u540c\u7684\u9002\u7528\u60c5\u51b5\uff0cWaitGroup\u53ef\u4ee5\u52a8\u6001\u7684\u63a7\u5236\u4e00\u7ec4\u6307\u5b9a\u6570\u91cf\u7684\u534f\u7a0b\uff0cContext\u66f4\u9002\u5408\u5b50\u5b59\u534f\u7a0b\u5d4c\u5957\u5c42\u7ea7\u66f4\u6df1\u7684\u60c5\u51b5\uff0c\u7ba1\u9053\u66f4\u9002\u5408\u534f\u7a0b\u95f4\u901a\u4fe1\u3002\u5bf9\u4e8e\u8f83\u4e3a\u4f20\u7edf\u7684\u9501\u63a7\u5236\uff0cGo\u4e5f\u5bf9\u6b64\u63d0\u4f9b\u4e86\u652f\u6301\uff1a</p> <p>Mutex\uff1a\u4e92\u65a5\u9501 RWMutex \uff1a\u8bfb\u5199\u4e92\u65a5\u9501</p>"},{"location":"golang/golang/","title":"golang \u8bed\u8a00\u7684\u7279\u6027\u5728\u8fd9\u4e00\u4e2anav\u5c55\u793a","text":""},{"location":"golang/heap/","title":"\u5806","text":"<p>\u5728go\u4e2d\u4f7f\u7528\u5806 \u9700\u8981\u4f7f\u7528\u5230 container \u4e0b\u9762\u7684 heap</p> <p>\u5e76\u4e14\u9700\u8981\u77e5\u9053\u4e00\u4e9b \u201c\u63a5\u53e3\u201d \u7684\u7279\u6027\u3002</p> <p>go\u6ca1\u6709\u7c7b\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u7ec4\u5408\u548c\u8f6c\u53d1\u7279\u6027\u6765\u5b9e\u73b0\u9762\u5411\u5bf9\u8c61\u3002</p> <p>\u7ed3\u6784\u4f53\u5d4c\u5165\uff0c\u533f\u540d\u5b57\u6bb5</p> <p>\u8f6c\u53d1\u65b9\u6cd5</p>"},{"location":"golang/heap/#_1","title":"\u7ed3\u6784\u4f53\u5d4c\u5165","text":"<p>\u5728\u5b9a\u4e49\u7ed3\u6784\u4f53\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5728\u6210\u5458\u4e2d\u5199\u5176\u4ed6\u7ed3\u6784\u4f53\uff0c\u8fd9\u4e2a\u5c31\u53eb\u7ed3\u6784\u4f53\u7684\u5d4c\u5165\u3002</p>"},{"location":"golang/heap/#_2","title":"\u5177\u540d\u5b57\u6bb5","text":"<p>\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u53ef\u4ee5\u662f\u53e6\u5916\u7684\u7ed3\u6784\u4f53\u7c7b\u578b\uff0c\u8fd9\u5728\u5176\u4ed6\u7684\u8bed\u8a00\u4e2d\u4e5f\u5f88\u5e38\u89c1\u3002 Go<pre><code>// struct_embedding.go \u6f14\u793a\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u662f\u53e6\u5916\u7684\u7ed3\u6784\u4f53\u7c7b\u578b\npackage main\n\nimport \"fmt\"\n\ntype BodyInfo struct {\n    height float64 // \u8eab\u9ad8cm\n    weight float64 // \u4f53\u91cdkg\n}\n\nfunc (bi BodyInfo) calBMI() float64 {\n    heightInMeters := bi.height / 100 // \u5c06\u8eab\u9ad8\u4ece\u5398\u7c73\u8f6c\u6362\u4e3a\u7c73\n    return bi.weight / (heightInMeters * heightInMeters)\n}\n\ntype User struct {\n    bodyInfo BodyInfo // \u8fd9\u91cc\u5c31\u662f\u7ed3\u6784\u4f53\u5b57\u6bb5\u5d4c\u5165\n    name     string\n    age      int\n}\n\nfunc main() {\n    wang := User{\n        BodyInfo{175, 70}, \"\u738b\u5c0f\u660e\", 22,\n    }\n    wangBMI := wang.bodyInfo.calBMI()\n    fmt.Printf(\"wangBMI: %.2f\\n\", wangBMI) // wangBMI: 22.86\n}\n</code></pre></p>"},{"location":"golang/heap/#_3","title":"\u533f\u540d\u5b57\u6bb5","text":"<p>\u5b9a\u4e49\u7ed3\u6784\u4f53\u7684\u65f6\u5019\uff0c\u5b57\u6bb5\u53ef\u4ee5\u4e0d\u8d77\u540d\u5b57\uff0c\u8fd9\u65f6\u5019\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u7684\u7c7b\u578b\u5b9e\u73b0\u7684\u65b9\u6cd5\uff0c\u5c31\u8f6c\u53d1\u5230\u4e86\u5916\u9762\u7684\u7ed3\u6784\u4f53\u8eab\u4e0a\u3002 Go<pre><code>package main\n\nimport \"fmt\"\n\ntype BodyInfo struct {\n    height float64 // \u8eab\u9ad8cm\n    weight float64 // \u4f53\u91cdkg\n}\n\nfunc (bi BodyInfo) calBMI() float64 {\n    heightInMeters := bi.height / 100 // \u5c06\u8eab\u9ad8\u4ece\u5398\u7c73\u8f6c\u6362\u4e3a\u7c73\n    return bi.weight / (heightInMeters * heightInMeters)\n}\n\ntype User struct {\n    BodyInfo // \u5b57\u6bb5\u662f\u53e6\u5916\u7684\u7ed3\u6784\u4f53\uff0c\u4f46\u662f\u4e0d\u8d77\u540d\u5b57\n    name     string\n    age      int\n}\n\nfunc main() {\n    wang := User{\n        BodyInfo{175, 70}, \"\u738b\u5c0f\u660e\", 22,\n    }\n    wangBMI := wang.calBMI()               // \u53d1\u73b0\u533f\u540d\u7684\u5b57\u6bb5\uff0c\u7684\u65b9\u6cd5\uff0c\u76f4\u63a5\u53ef\u4ee5\u88abUser\u4f7f\u7528\uff0c\u4e5f\u5c31\u662f\u8bf4\u76f8\u5f53\u4e8eUser\u5b9e\u73b0\u4e86calBMI\u65b9\u6cd5\n    fmt.Printf(\"wangBMI: %.2f\\n\", wangBMI) // wangBMI: 22.86\n}\n</code></pre></p>"},{"location":"golang/heap/#_4","title":"\u503c\u63a5\u53d7\u8005\u548c\u6307\u9488\u63a5\u6536\u8005","text":"<p>\u503c\u63a5\u53d7\u8005\u7684\u51fd\u6570\uff0c\u6307\u9488\u63a5\u6536\u8005\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\uff0c\u5185\u90e8\u4f1a\u8f6c\u6362\u3002 \u6307\u9488\u63a5\u6536\u8005\u7684\u51fd\u6570\uff0c</p> <p>main\u51fd\u6570\u4e2d\u7684user\u662f\u6307\u9488\uff0c\u4f46\u662f\u53ef\u4ee5\u8c03\u7528selfInfo\u3002 Go<pre><code>// \u6307\u9488\u63a5\u6536\u8005 \u548c \u503c\u63a5\u53d7\u8005\n// func_value_reciver.go\npackage main\n\nimport \"fmt\"\n\ntype User struct {\n    name string\n    age  int\n}\n\n// \u503c\u63a5\u53d7\u8005\u7684\u51fd\u6570\nfunc (u User) selfInfo() {\n    fmt.Printf(\"u.name: %v\\n\", u.name)\n    fmt.Printf(\"u.age: %v\\n\", u.age)\n}\n\nfunc main() {\n    user := &amp;User{\"\u5c0f\u82d7\", 23}\n    user.selfInfo() // \u8fd9\u91cc\u7684user\u662f\u6307\u9488\uff0c\u4f46\u662f\u53ef\u4ee5\u8c03\u7528selfInfo\n}\n</code></pre> \u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\uff1a\u6307\u9488\u63a5\u6536\u8005\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u88ab\u503c\u76f4\u63a5\u8c03\u7528\u3002 Go<pre><code>// \u6307\u9488\u63a5\u6536\u8005 \u548c \u503c\u63a5\u53d7\u8005\n// func_pointer_reciver.go\npackage main\n\nimport \"fmt\"\n\ntype User struct {\n    name string\n    age  int\n}\n\n// \u503c\u63a5\u53d7\u8005\u7684\u51fd\u6570\nfunc (u *User) selfInfo() {\n    fmt.Printf(\"u.name: %v\\n\", u.name)\n    fmt.Printf(\"u.age: %v\\n\", u.age)\n}\n\nfunc main() {\n    user := &amp;User{\"\u5c0f\u6dd1\", 23}\n    user.selfInfo() // user\u662f\u6307\u9488\uff0c\u4f7f\u7528\u6307\u9488\n    user1 := User{\"\u738b\u4fdd\", 45}\n    user1.selfInfo()\n}\n</code></pre></p>"},{"location":"golang/innerfunc/","title":"\u5728\u51fd\u6570\u5185\u5b9a\u4e49\u51fd\u6570","text":"<p>\u5728golang\u51fd\u6570\u7684\u5185\u90e8\uff0c\u53ef\u4ee5\u5b9a\u4e49\u53e6\u5916\u7684\u51fd\u6570</p> Go<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Outer function\")\n    var innerFunction = func() {\n        fmt.Println(\"Inner function\")\n    }\n    innerFunction() // \u6ca1\u6709\u8fd9\u4e00\u53e5\u4f1a\u51fa\u9519\uff0c\u56e0\u4e3ainnerFunction\u5b9a\u4e49\u800c\u4e0d\u4f7f\u7528\n}\n</code></pre> Go<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Outer function\")\n    innerFunction := func() { // \u4f7f\u7528 := \u4e5f\u53ef\u4ee5\n        fmt.Println(\"Inner function\")\n    }\n    innerFunction()\n}\n</code></pre>"},{"location":"golang/innerfunc2/","title":"\u95ed\u5305\u51fd\u6570","text":"<p>golang\u7684\u95ed\u5305\u51fd\u6570\uff0c\u53ef\u4ee5\u8bbf\u95ee\u5230\u76f8\u540c\u5730\u4f4d\u7684\u5144\u5f1f\u53d8\u91cf\uff0c\u540c\u4e00\u4f5c\u7528\u57df\u7684\u5176\u4ed6\u53d8\u91cf</p> Go<pre><code>func innerfunc2() {\n    x := 20\n    this_func_can_visit_x := func() {\n        fmt.Println(\"this_func_can_visit_x\", x)\n    }\n    this_func_can_visit_x() // this_func_can_visit_x 20\n}\n</code></pre>"},{"location":"golang/innernested/","title":"\u95ed\u5305\u9012\u5f52\u51fd\u6570","text":"<p>\u8981\u5728\u4e00\u4e2aA\u51fd\u6570\u5185\u90e8\uff0c\u5b9a\u4e49\u53e6\u4e00\u4e2aB\u51fd\u6570\uff0c\u4e14\u8981\u6c42B\u662f\u9012\u5f52\u51fd\u6570\uff0c\u89c2\u5bdf\u4e0b\u9762\u51e0\u79cd\u5199\u6cd5\u3002 Go<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    // \u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\n    // f1 := func(n int) int {\n    //  if n &lt; 0 {\n    //      return 1\n    //  }\n    //  return n + f1(n-1) // \u9519\u8bef\u7684\u65b9\u5f0f1\n    // }\n    // var f2 = func(n int) int {\n    //  if n &lt; 0 {\n    //      return 1\n    //  }\n    //  return n + f(n-1) // \u9519\u8bef\u7684\u65b9\u5f0f2\n    // }\n    var f3 func(int) int\n    f3 = func(n int) int {\n        if n &lt; 0 {\n            return 1\n        }\n        return n + f3(n-1) // \u9519\u8bef\u7684\u65b9\u5f0f\n    }\n    fmt.Printf(\"f3(): %v\\n\", f3(4))\n}\n</code></pre> \u9519\u8bef\u5199\u6cd51\u548c2\uff0c\u90fd\u662f\u7531\u4e8e\u5728\u51fd\u6570B\u5185\u90e8\u4f5c\u7528\u57df\u5185\uff0c\u627e\u4e0d\u5230\u540d\u79f0f1\u548cf2\u5bfc\u81f4\u7684\u3002</p>"},{"location":"golang/map_q/","title":"go \u7684 map","text":"<p>Go \u8bed\u8a00\u4e2d\u7684 map \u662f\u4e00\u79cd\u5185\u5efa\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7528\u6765\u4fdd\u5b58\u952e\u503c\u578b\u6570\u636e\u3002 Go<pre><code>func main() {\n    m := map[string]string{\n        \"\u5df4\u897f\":\"\u5df4\u897f\u5229\u4e9a\",\n        \"\u6fb3\u5927\u5229\u4e9a\":\"\u582a\u57f9\u62c9\",\n        \"\u52a0\u62ff\u5927\":\"\u6e25\u592a\u534e\"\n    }\n    fmt.Println(len(m))\n}\n</code></pre> \u952e\u503c\u5bf9API\u53ea\u662f\u4e00\u5957\u63a5\u53e3\uff0c\u5b9e\u73b0\u65b9\u5f0f\u53ef\u4ee5\u6709\u591a\u79cd\uff0c\u4f8b\u5982java\u4e2d\u7684HashMap\u3001TreeMap\uff0cpython\u7684dict\u4e5f\u662f\u4f7f\u7528\u54c8\u5e0c\u8868\u5b9e\u73b0\u3002</p>"},{"location":"golang/map_q/#map-key","title":"map \u7684 key","text":"<p>map\u662f\u4fdd\u5b58\u952e\u503c\u5bf9\u7684\uff0c\u4ed6\u7684\u952ekey\u5fc5\u987b\u662f\u53ef\u4ee5\u7528==\u6bd4\u8f83\u7684\u7c7b\u578b\uff0cchan\uff0cmap\uff0cfunc\u662f\u4e0d\u53ef\u6bd4\u8f83\u7684\uff0c\u90a3\u4e48\u5207\u7247\uff0c\u6570\u7ec4\u53ef\u4ee5\u6bd4\u8f83\u5417\uff1f</p>"},{"location":"golang/map_q/#key","title":"\u53ef\u4ee5\u4f5c\u4e3a key \u7684\u7c7b\u578b","text":"<p>\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u5927\u90fd\u53ef\u4ee5\u5f53\u505a\u952e Go<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    // \u6574\u6570\u4f5c\u4e3a\u952e\n    mapInt := map[int]string{\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n    }\n    fmt.Printf(\"mapInt: %v\\n\", mapInt)\n\n    // \u5b57\u7b26\u4e32\u4f5c\u4e3a\u952e\n    m1 := map[string]int{\"one\": 1, \"two\": 2}\n    fmt.Printf(\"m1: %v\\n\", m1)\n\n    // \u6d6e\u70b9\u6570\u4f5c\u4e3a\u952e\uff08\u4e0d\u63a8\u8350\uff0c\u56e0\u4e3a\u6d6e\u70b9\u6570\u7684\u6bd4\u8f83\u53ef\u80fd\u4f1a\u56e0\u7cbe\u5ea6\u95ee\u9898\u5bfc\u81f4\u4e0d\u51c6\u786e\uff09\n    m2 := map[float64]bool{1.2: false, 3.14: true}\n    fmt.Printf(\"m2: %v\\n\", m2)\n\n    // \u6570\u7ec4\u7c7b\u578b\u4f5c\u4e3a\u952e\uff0c\u56e0\u4e3a\u6570\u7ec4\u662f\u957f\u5ea6\u56fa\u5b9a\u7684\uff0c\u53ef\u4ee5\u6bd4\u8f83\u4e24\u4e2a\u6570\u7ec4\u662f\u5426\u76f8\u7b49\n    m3 := make(map[[2]int]string, 4)\n    m3[[...]int{1, 2}] = \"array1\"\n    m3[[2]int{9, 7}] = \"array2\"\n    fmt.Printf(\"m3: %v\\n\", m3)\n    a := [3]int{2, 3, 4}\n    b := [3]int{2, 3, 4}\n    equal := a == b\n    fmt.Printf(\"equal: %v\\n\", equal)\n\n    // \u5e03\u5c14\u503c\u4f5c\u4e3a\u952e\n    mapBool := map[bool]string{\n        true:  \"true\",\n        false: \"false\",\n    }\n    fmt.Printf(\"mapBool: %v\\n\", mapBool)\n}\n\n/* output\nmapInt: map[1:one 2:two 3:three]\nm1: map[one:1 two:2]\nm2: map[1.2:false 3.14:true]\nm3: map[[1 2]:array1 [9 7]:array2]\nequal: true\nmapBool: map[false:false true:true]\n*/\n</code></pre> \u5c24\u5176\u662f\u6570\u7ec4\u7c7b\u578b\uff0c\u4e5f\u662f\u53ef\u6bd4\u8f83\u7684\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u5f53\u505a\u952e\u3002 \u5728python\u4e2d\uff0clist\u662f\u4e2aunhashable\u7684\uff0c\u662f\u4e0d\u80fd\u5f53\u505adict\u7684\u952e\u7684 Python<pre><code>Python 3.12.0 (main, Sep  5 2024, 19:03:31) [Clang 15.0.0 (clang-1500.3.9.4)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; d = {}\n&gt;&gt;&gt; d[[1,2,3]] = 1\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unhashable type: 'list'\n&gt;&gt;&gt; \n</code></pre> \u6307\u9488\u7c7b\u578b\u4e5f\u662f\u53ef\u4ee5\u5f53\u505a\u952e\u7684\uff0c\u63a5\u53e3\u7c7b\u578b\u4e5f\u662f\u53ef\u4ee5\u5f53\u505a\u952e\u7684\uff08\u5f85\u8865\u5145\u4ee3\u7801\uff09</p>"},{"location":"golang/map_q/#map","title":"\u4e0d\u80fd\u4f5c\u4e3amap\u7684\u952e\u7684\u7c7b\u578b","text":"<p>\u4ee5\u4e0b\u7c7b\u578b\u4e0d\u80fd\u4f5c\u4e3a map \u7684\u952e\uff1a</p> <ul> <li>\u5207\u7247\u7c7b\u578b\uff0c\u56e0\u4e3a\u5207\u7247\u662f\u5f15\u7528\u7c7b\u578b\uff0c\u5176\u5185\u5bb9\u53ef\u80fd\u4f1a\u53d8\u5316\uff0c\u4f7f\u5f97\u6bd4\u8f83\u64cd\u4f5c\u4e0d\u786e\u5b9a\u3002</li> <li>\u51fd\u6570\u7c7b\u578b\uff0c\u56e0\u4e3a Go \u8bed\u8a00\u4e2d\u6ca1\u6709\u4e3a\u51fd\u6570\u5b9a\u4e49\u76f8\u7b49\u6027\u6bd4\u8f83\u64cd\u4f5c\u3002</li> <li>map \u7c7b\u578b\uff0cmap \u7c7b\u578b\u4e0d\u80fd\u4f5c\u4e3a map \u7684\u952e\uff0c\u56e0\u4e3a\u4e5f\u662f\u5f15\u7528\u7c7b\u578b\uff0c\u4e14\u6ca1\u6709\u5b9a\u4e49\u76f8\u7b49\u6027\u6bd4\u8f83\u64cd\u4f5c\u3002</li> <li>\u5305\u542b\u4e0a\u8ff0\u4e0d\u53ef\u6bd4\u8f83\u7c7b\u578b\u7684\u590d\u5408\u7c7b\u578b\uff0c\u4efb\u4f55\u5305\u542b\u4e0a\u8ff0\u4e0d\u53ef\u6bd4\u8f83\u7c7b\u578b\uff08\u5982\u5207\u7247\u3001\u51fd\u6570\u3001\u6620\u5c04\uff09\u7684\u590d\u5408\u7c7b\u578b\u7ed3\u6784\u4f53\uff0c\u4e5f\u4e0d\u80fd\u4f5c\u4e3a map \u7684\u952e\u3002</li> </ul>"},{"location":"golang/map_q/#best-practice","title":"best practice","text":"<p>\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u6700\u597d\u4e0d\u8981\u7528\u54ea\u4e9b\u5f53\u952e\uff1f\u6700\u4f73\u5b9e\u8df5</p>"},{"location":"golang/map_q/#map_1","title":"map \u7684\u521b\u5efa\u3001\u521d\u59cb\u5316","text":"<p>map\u53ea\u58f0\u660e\u4e0d\u8d4b\u503c\u7684\u8bdd\uff0c\u662f <code>nil</code></p>"},{"location":"golang/map_q/#make","title":"\u4f7f\u7528 make \u521b\u5efa","text":"Go<pre><code>m := make(map[string]int, 10) // \u5bb9\u91cf\u53c2\u8003\u503c10\uff0c\u5b9e\u9645\u4e0d\u4e00\u5b9a\u5206\u914d\u6070\u597d10\n</code></pre>"},{"location":"golang/map_q/#_1","title":"\u76f4\u63a5\u8d4b\u503c\u521d\u59cb\u5316","text":"Go<pre><code>m := map[string]int{\"a\": 1, \"b\": 2, \"c\": 3} \n</code></pre>"},{"location":"golang/map_q/#map_2","title":"\u8bbf\u95ee map","text":"<p>\u6839\u636e\u952e\u62ff\u503c Go<pre><code>value := m[\"key\"]\n</code></pre> \u8bbf\u95ee\u53ea\u58f0\u660e\uff0c\u672a\u5206\u914d\u7684map\u4f1a\u600e\u6837\uff1f Go<pre><code>func var_map_without_assignment() {\n    var m map[int]string // \u58f0\u660e\u4f46\u4e0d\u8d4b\u503c\n    res := m[1]\n    fmt.Printf(\"res: %v\\n\", res)\n\n    // m[1] = \"asuka\" // panic: assignment to entry in nil map\n    fmt.Printf(\"m: %v\\n\", m) // \u8fd9\u91cc\u5e76\u4e0d\u4f1a\u62a5\u9519\n}\n</code></pre></p> <p>\u8bd5\u56fe\u8bbf\u95eemap\u4e2d\u4e0d\u5b58\u5728\u7684\u952e\u4f1a\u600e\u6837</p> <p>\u8fd9\u4e24\u4e2a\u95ee\u9898\uff0c\u90fd\u80fd\u5728\u56fe\u4e2d\u5f97\u5230\u56de\u7b54 </p>"},{"location":"golang/map_q/#_2","title":"\u9ed8\u8ba4\u8fd4\u56de\u96f6\u503c","text":"<p>Go\u7684map\u662f\u5f15\u7528\u7c7b\u578b\uff0c\u5e76\u4e14\u662f\u65e0\u5e8f\u7684\u3002\u5982\u679c\u4f60\u5c1d\u8bd5\u8bbf\u95ee\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u952e\uff0c\u4f60\u5c06\u5f97\u5230\u8be5\u7c7b\u578b\u7684\u96f6\u503c\uff08\u4f8b\u5982\uff0c\u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\u662f0\uff0c\u5bf9\u4e8e\u5b57\u7b26\u4e32\u7c7b\u578b\u662f\"\"\uff09\u3002\u4ee5\u4e0b\u662fGo\u4e2d\u4f7f\u7528map\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a</p> Go<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    m := map[string]int{\n        \"apple\": 1,\n        \"banana\": 2,\n    }\n\n    // \u8bbf\u95ee\u5b58\u5728\u7684\u952e\n    fmt.Println(m[\"apple\"]) // \u8f93\u51fa: 1\n\n    // \u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u952e\uff0c\u5c06\u5f97\u5230int\u7c7b\u578b\u7684\u96f6\u503c0\n    fmt.Println(m[\"orange\"]) // \u8f93\u51fa: 0\n}\n</code></pre>"},{"location":"golang/map_q/#python-defaultdict","title":"\u548cpython defaultdict\u7684\u76f8\u4f3c\u548c\u4e0d\u540c","text":"<p>\u5728go\u4e2d\uff0c\u4f60\u751a\u81f3\u53ef\u4ee5\u5bf9map\u91cc\u4e0d\u5b58\u5728\u7684\u952e\u8fdb\u884c\u8fd0\u7b97 Go<pre><code>package main\n\nimport \"fmt\"\n\n\nfunc main() {\n    m := map[int]int{1: 2, 3: 9}\n    fmt.Printf(\"m[5]: %v\\n\", m[5]) // m[5]: 0\n\n    // \u5bf9\u4e8e\u4e0d\u5b58\u5728\u4e8em\u7684\u952e\uff0c\u4f60\u751a\u81f3\u53ef\u4ee5\u5bf9\u5b83\u8fdb\u884c++\u64cd\u4f5c\n    m[4]++\n    fmt.Printf(\"m: %v\\n\", m) // m: map[1:2 3:9 4:1]\n\n\n    // \u53ef\u4ee5\u68c0\u67e5 \u67d0\u4e2a\u5143\u7d20\u662f\u5426\u5b58\u5728\u4e8emap\u4e2d\n    if val, exist := m[8]; exist {\n        fmt.Println(\"8\u5b58\u5728\", val)\n        } else {\n            fmt.Println(\"8\u4e0d\u5b58\u5728\") // \u6267\u884c\u8fd9\u4e00\u884c\n        }\n\n    var sz = len(m)\n    fmt.Printf(\"sz: %v\\n\", sz)\n    // \u6b64\u65f6\u53ef\u4ee5 m[8]++, \u7136\u540e8\u5c31\u5b58\u5728\u4e86\n    m[8]++\n    if val, exist := m[8]; exist {\n        fmt.Println(\"8\u5b58\u5728\", val) // \u6267\u884c\u8fd9\u4e00\u884c\n    } else {\n        fmt.Println(\"8\u4e0d\u5b58\u5728\") \n    }\n\n    sz = len(m)\n    fmt.Printf(\"sz: %v\\n\", sz)\n}\n</code></pre></p>"},{"location":"golang/map_q/#_3","title":"\u539f\u7406\u4e0e\u5b9e\u73b0","text":"<p>Go \u8bed\u8a00\u4e2d\u7684 map \u662f\u901a\u8fc7\u54c8\u5e0c\u8868 (hash table) \u5b9e\u73b0\u7684\u3002\u5b83\u63d0\u4f9b\u4e86\u5feb\u901f\u7684\u952e\u503c\u5bf9\u5b58\u50a8\u3001\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u529f\u80fd\u3002\u4e3a\u4e86\u6df1\u5165\u7406\u89e3 map \u7684\u5e95\u5c42\u5b9e\u73b0\uff0c\u6211\u4eec\u9700\u8981\u63a2\u8ba8\u51e0\u4e2a\u5173\u952e\u7684\u6982\u5ff5\uff1a\u54c8\u5e0c\u51fd\u6570\u3001\u54c8\u5e0c\u6876\u3001\u952e\u51b2\u7a81\u5904\u7406\u3001\u6269\u5bb9\u673a\u5236 map\u7684\u539f\u7406</p> <p>go \u4e2d\u7684 map \u5b9e\u9645\u662f hmap \u7684 \u7ed3\u6784\u4f53\uff0chmap \u4fdd\u5b58\u4e00\u4e9b \u54c8\u5e0c\u8868\u7684 \u4fe1\u606f</p> <p>count \u5b57\u6bb5\u8868\u793a \u5df2\u7ecf\u5b58\u50a8\u7684\u952e\u503c\u5bf9\u7684\u6570\u76ee\u3002 buckets \u662f\u6307\u5411\u6876\u6570\u7ec4\u7684\u6307\u9488\uff0c\u6876\u662f\u4e00\u4e9b\u4fdd\u5b58\u952e\u503c\u5bf9\u7684\u3002 \u4e00\u4e2a\u6876\u5c31\u662f\u4e00\u4e2abmap\u7ed3\u6784\u4f53\uff0c\u4e00\u4e2a\u6876\u80fd\u4fdd\u5b588\u4e2a\u952e\u503c\u5bf9\u3002 \u4e00\u4e2abmap\u7ed3\u6784\u4f53\u91cc\u9762\u6709\u4e09\u4e2a\u5b57\u6bb5 tophash keys values\u3002 \u5b9e\u9645\u7684\u952e\u503c\u5bf9\uff0c\u5c31\u662f\u4fdd\u5b58\u5728bmap\u91cc\u9762\u3002</p>"},{"location":"golang/map_q/#_4","title":"\u54c8\u5e0c\u51fd\u6570","text":"<p>\u54c8\u5e0c\u51fd\u6570\uff0c\u80fd\u591f\u6839\u636e \u952ekey \u8ba1\u7b97\u51fa\u4e00\u4e2a\u6570\u5b57\uff0c\u5bf9\u5e94\u4e00\u4e2a\u6876\u7684\u7f16\u53f7\uff0c\u4e5f\u5c31\u662fhmap\u7684buckets\u5b57\u6bb5\uff08bmap\u6570\u7ec4\uff09\u7684\u67d0\u4e00\u4e2a\u5143\u7d20\uff08\u8fd9\u4e2a\u5143\u7d20\u80fd\u5b588\u4e2a\u952e\u503c\u5bf9\uff0c\u73b0\u5728\u6b63\u5728\u5904\u7406\u7684\u662f\u4e00\u4e2a\u952e\u503c\u5bf9\uff09\u3002</p>"},{"location":"golang/map_q/#_5","title":"\u54c8\u5e0c\u6876","text":"<p>\u5c06\u51b2\u7a81\u7684\u952e\u503c\u5bf9\u5b58\u50a8\u5728\u540c\u4e00\u4e2a\u6876\u4e2d\u3002 8\u4e2a\u952e\u503c\u5bf9\u53ef\u4ee5\u5b58\u5728\u4e00\u4e2a\u6876\u91cc\u9762\u3002 \u5982\u679c\u66f4\u591a\u6ea2\u51fa\u4e86\uff0c\u5c31\u901a\u8fc7\u6ea2\u51fa\u6876 (overflow buckets) \u6765\u7ee7\u7eed\u5b58\u50a8\u66f4\u591a\u7684\u952e\u503c\u5bf9\u3002</p>"},{"location":"golang/map_q/#_6","title":"\u54c8\u5e0c\u51b2\u7a81","text":"<p>\u54c8\u5e0c\u51b2\u7a81\u662f\u901a\u8fc7 \u94fe\u5730\u5740\u6cd5 \u89e3\u51b3\u3002</p>"},{"location":"golang/map_q/#_7","title":"\u63d2\u5165\u64cd\u4f5c","text":""},{"location":"golang/map_q/#_8","title":"\u6269\u5bb9\u673a\u5236","text":"<p>map \u4e2d\u7684\u952e\u503c\u5bf9\u6570\u91cf\u589e\u591a\uff0c\u5bfc\u81f4\u54c8\u5e0c\u51b2\u7a81\u9891\u7e41\u53d1\u751f\u65f6\uff0cGo \u7684 map \u4f1a\u89e6\u53d1\u6269\u5bb9\u673a\u5236\uff1a  \u6269\u5bb9\u7684\u65f6\u673a\u662f\uff0c\u5f53\uff08\u54c8\u5e0c\u56e0\u5b50\uff09\u8fbe\u5230\u67d0\u4e2a\u7279\u5b9a\u7684\u503c\uff0c\u4f3c\u4e4e\u662f6.5\uff1f</p> <p>\u6e10\u8fdb\u5f0f\u6269\u5bb9\uff1a\u6269\u5bb9\u65f6\uff0cmap \u4f1a\u91cd\u65b0\u5206\u914d\u4e00\u4e2a\u66f4\u5927\u7684\u54c8\u5e0c\u6876\u6570\u7ec4\uff08\u901a\u5e38\u662f\u5f53\u524d\u5927\u5c0f\u7684\u4e24\u500d\uff09\u3002\u539f\u6709\u7684\u952e\u503c\u5bf9\u4f1a\u9010\u6b65\u642c\u79fb\u5230\u65b0\u7684\u6876\u4e2d\u3002\u6bcf\u6b21\u63d2\u5165\u3001\u5220\u9664\u6216\u67e5\u627e\u64cd\u4f5c\u65f6\uff0c\u90fd\u4f1a\u89e6\u53d1\u4e00\u4e9b\u952e\u503c\u5bf9\u7684\u8fc1\u79fb\uff0c\u76f4\u5230\u6574\u4e2a\u8fc1\u79fb\u8fc7\u7a0b\u5b8c\u6210\u3002 \u518d\u54c8\u5e0c\uff1a\u5728\u6269\u5bb9\u8fc7\u7a0b\u4e2d\uff0cmap \u4f1a\u91cd\u65b0\u8ba1\u7b97\u952e\u7684\u54c8\u5e0c\u503c\uff0c\u5e76\u5c06\u5b83\u4eec\u5206\u914d\u5230\u65b0\u7684\u6876\u4e2d\u3002\u8fd9\u4e00\u8fc7\u7a0b\u6709\u52a9\u4e8e\u51cf\u5c11\u51b2\u7a81\uff0c\u4f18\u5316\u67e5\u627e\u6548\u7387\u3002</p> <p>\u8fd9\u91cc\u6d89\u53ca\u5230\u65e7\u6876 \u65b0\u6876\u7684\u95ee\u9898\u3002</p>"},{"location":"golang/nil/","title":"nil\u7a76\u7adf\u662f\u4ec0\u4e48","text":""},{"location":"golang/nil/#nil","title":"\u5207\u7247\u5355\u72ec\u58f0\u660e\uff0c\u503c\u662fnil","text":"Go<pre><code>package main\nimport \"fmt\"\n\nfunc main() {\n    var s []int\n    if s == nil {\n    fmt.Println(\"is nil\")\n    }\n}\n</code></pre>"},{"location":"golang/slice_q/","title":"\u5207\u7247","text":""},{"location":"golang/slice_q/#b-a","title":"b = a \u4f1a\u53d1\u751f\u4ec0\u4e48?","text":"<p>\u5728<code>python</code>\u4e2d\uff0c\u82e5<code>a</code>\u662f\u4e00\u4e2a<code>list</code>\uff0c<code>b=a</code>\u4f1a\u8ba9<code>a</code>\u83b7\u5f97\u539f\u6765\u5217\u8868\u7684\u4fee\u6539\u6743 Python<pre><code>a = [2, 3, 5, 7]\nb = a\nb[0] = '&gt;'\nprint(a, b)\n</code></pre></p> <p>\u5728golang\u4e2d\u8fd9\u4e2a\u5c0fdemo\u7684\u8868\u73b0\u662f\u5426\u4e00\u6837\uff1f</p> Go<pre><code>func main() {\n    a := []int{2, 3, 5, 7}\n    b := a\n    b[0] = 999\n    fmt.Println(a, b) // [999 3 5 7] [999 3 5 7]\n}\n</code></pre> <p>\u76ee\u524d\u770b\u6765\u8868\u73b0\u7684\u73b0\u8c61\u5b8c\u5168\u4e00\u6837\uff0c\u4f46\u771f\u7684\u6709\u90a3\u4e48\u7b80\u5355\u5417\uff1f</p>"},{"location":"golang/slice_q/#append","title":"\u4e0d\u540c\u7684append","text":"<p>Python<pre><code>a = [2, 3, 5, 7]\nb = a\nb[0] = '&gt;'\nprint(a, b)  # ['&gt;', 3, 5, 7] ['&gt;', 3, 5, 7]\n\na.append(666)\n\nprint(a, b)  # ['&gt;', 3, 5, 7, 666] ['&gt;', 3, 5, 7, 666]\n</code></pre> \u8fd9\u6b21\u7684\u8f93\u51fa\u4e0d\u518d\u4e00\u6837\u4e86\uff01</p> <p>Go<pre><code>func main() {\n    a := []int{2, 3, 5, 7}\n    b := a\n    b[0] = 999\n    fmt.Println(a, b) // [999 3 5 7] [999 3 5 7]\n\n    a = append(a, 666)\n\n    fmt.Println(a, b) // [999 3 5 7 666] [999 3 5 7]\n}\n</code></pre> \u867d\u7136\u90fd\u53eb<code>append</code>\u4f46\u662f\u4e24\u4e2a\u51fd\u6570\u6240\u505a\u7684\u4e8b\u60c5\u4e0d\u4e00\u6837\u3002 <code>golang</code>\u7684<code>append</code>\u51fd\u6570\uff0c\u5728\u53d1\u73b0\u5e95\u5c42\u6570\u7ec4\u7684<code>cap</code>\u4e0d\u591f\u586b\u5145\u65b0\u7684\u5143\u7d20\u7684\u65f6\u5019\uff0c\u91cd\u65b0\u5728\u522b\u7684\u5185\u5b58\u533a\u57df\u4e0a\u5f00\u66f4\u5927\u7684\u5e95\u5c42\u6570\u7ec4\uff0c\u5e76\u5c06\u8fd9\u4e2a\u65b0\u7684\u5e95\u5c42\u6570\u7ec4\u7684\u67d0\u4e00\u5904\uff08\u53ef\u80fd\u662f\u9996\u5730\u5740\uff09\u7684\u6307\u9488\u8fd4\u56de\u3002 \u6240\u4ee5\u5f53 <code>a = append(a, 666)</code>\u6267\u884c\u4e4b\u540e\uff0c<code>a</code>\u548c\u539f\u6765\u7684<code>b</code>\u5df2\u7ecf\u4e0d\u6307\u5411\u540c\u4e00\u5185\u5b58\u4e86\uff0c\u4e8c\u8005\u7684\u5173\u7cfb\u53ea\u662f\u524d4\u4e2a\u5143\u7d20\u76f8\u540c\u800c\u5df2\u3002\u6b64\u65f6\u4fee\u6539\u4e00\u4e2a\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u53e6\u4e00\u4e2a\u4e86\u3002</p> Go<pre><code>func main() {\n    a := []int{2, 3, 5, 7}\n    b := a\n    b[0] = 999\n    fmt.Println(a, b) // [999 3 5 7] [999 3 5 7]\n\n    a = append(a, 666)\n\n    fmt.Println(a, b) // [999 3 5 7 666] [999 3 5 7]\n\n    a[1] = 7777 // \u4fee\u6539 a \u5bf9 b \u6ca1\u6709\u5f71\u54cd\n    fmt.Println(a, b) // [999 7777 5 7 666] [999 3 5 7]\n}\n</code></pre>"},{"location":"golang/slice_q/#_1","title":"\u6269\u5bb9\uff1f\u6269\u591a\u5c11\uff1f","text":""},{"location":"golang/slice_q/#_2","title":"\u89e3\u91ca\u4e0b\u9762\u7684\u4ee3\u7801","text":"Go<pre><code>func test1() {\n    s1 := []int{1, 2}\n    s2 := s1\n    s2 = append(s2, 3)\n    fmt.Printf(\"s2: %v\\n\", s2) // s2: [1 2 3]\n    fmt.Printf(\"s1: %v\\n\", s1) // s1: [1 2]\n    SliceRise(s1)\n    SliceRise(s2)\n    fmt.Printf(\"s2: %v\\n\", s2) // s2: [2 3 4]\n    fmt.Printf(\"s1: %v\\n\", s1) // s1: [1 2]\n}\n\nfunc SliceRise(s []int) {\n    s = append(s, 0)\n    for i := range s {\n        s[i] += 1\n    }\n}\n</code></pre>"},{"location":"golang/slice_q/#append_1","title":"append\u51fd\u6570\u5bfc\u81f4\u7684\u6269\u5bb9\u884c\u4e3a","text":"Go<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    s1 := []int{2, 3, 5}\n    test1(s1)\n    fmt.Printf(\"s1: %v\\n\", s1) // s1: [2 3 8]\n\n    test2(s1)\n    fmt.Printf(\"s1: %v\\n\", s1) // s1: [2 3 8], test2 \u5185\u90e8\u6539\u7684\uff0c\u4e0d\u662fs1\u7684\u6570\u7ec4\n\n    fmt.Printf(\"s1 len: %v cap %v\\n\", len(s1), cap(s1)) // s1 len: 3 cap 3\n\n    s1 = append(s1, 408) \n    fmt.Printf(\"s1: %v\\n\", s1) // s1: [2 3 8 408]\n    fmt.Printf(\"s1 len: %v cap %v\\n\", len(s1), cap(s1))  // s1 len: 4 cap 6\n\n    test2(s1)\n    fmt.Printf(\"s1: %v\\n\", s1) // s1: [-3 3 8 408], \u8fd9\u6b21 test2 \u5185\u90e8\u6539\u7684\uff0c\u662fs1\u7684\u6570\u7ec4\n    fmt.Printf(\"s1: %p\\n\", s1)\n}\n\nfunc test1(s []int) {  // \u5207\u7247\u4f5c\u4e3a\u53c2\u6570\uff0c\u662f\u4f20\u5f15\u7528\n    s[2] = 8\n    fmt.Printf(\"s: %v\\n\", s) // s: [2 3 8]\n}\n\nfunc test2(s []int) {\n    s = append(s, 42)  // append\u4e4b\u540e\uff0c\u65b0\u7684s\u53ef\u80fd\u548c\u539f\u5148\u7684s1 \u516c\u7528\u6570\u7ec4\uff0c\u4e5f\u53ef\u80fd\u4e0d\u5171\u7528\u6570\u7ec4\n    s[0] = -3\n    fmt.Printf(\"s: %v\\n\", s) // s: [-3 3 8 42]\n    fmt.Printf(\"s1: %p\\n\", s)\n}\n</code></pre>"},{"location":"golang/slice_slice/","title":"\u5207\u7247[:]","text":"<p>\u4f7f\u7528[x:y]\u8fdb\u884c\u5207\u7247\u65f6\uff0c\u4f55\u65f6\u4f1apanic\uff1f \u7b54\u6848\uff1a\u5f53x&lt;0 \u6216\u8005y&gt;len(a)\u65f6</p>"},{"location":"golang/slice_slice/#1","title":"\u793a\u4f8b1","text":"Go<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    a := []int{1, 2, 3, 4}\n    b := a[5:] // panic: runtime error: slice bounds out of range [5:4]\n    fmt.Printf(\"a: %v\\n\", a)\n    fmt.Printf(\"b: %v\\n\", b)\n\n    inorder := []int{3}\n    right_part_inorder := inorder[1:]\n    fmt.Printf(\"inorder: %v\\n\", inorder)\n    fmt.Printf(\"right_part_inorder: %v\\n\", right_part_inorder)\n    // inorder: [3]\n    // right_part_inorder: []\n}\n</code></pre>"},{"location":"golang/slice_slice/#2","title":"\u793a\u4f8b2","text":"<p>\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u5728\u53ea\u6709\u4e00\u4e2a\u5143\u7d20 inorder = [3], preorder = [3]\u65f6\uff0c\u4f1apanic\u5417\uff1f Go<pre><code>import \"fmt\"\n\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc buildTree(preorder []int, inorder []int) *TreeNode {\n    return construct(preorder, inorder)\n}\n\nfunc findIndex(inorder []int, target int) int {\n    for i := range inorder {\n        if inorder[i] != target {\n            continue\n        }\n        return i\n    }\n    return -1\n}\n\nfunc construct(preorder []int, inorder []int) *TreeNode {\n    if len(preorder) == 0 {\n        return nil\n    }\n    root := &amp;TreeNode{preorder[0], nil, nil}\n\n    mid := findIndex(inorder, preorder[0])\n\n    left_inorder := inorder[:mid]\n    left_n := len(left_inorder)\n\n    right_inorder := inorder[mid+1:]\n    right_n := len(right_inorder)\n\n    left_preorder := preorder[1 : 1+left_n]\n    right_preorder := preorder[1+left_n : 1+left_n+right_n]\n\n    root.Left = construct(left_preorder, left_inorder)\n    root.Right = construct(right_preorder, right_inorder)\n    return root\n}\n</code></pre></p>"},{"location":"golang/sort/","title":"\u6392\u5e8fAPI","text":""},{"location":"golang/sort/#_1","title":"\u5185\u7f6e\u6570\u636e\u7ed3\u6784","text":""},{"location":"golang/sort/#_2","title":"\u5bf9\u5404\u7c7b\u5207\u7247\u6392\u5e8f","text":"<p>\u8fd9\u91cc\u53ea\u662f\u6f14\u793a\u4e86\u6574\u6570\u5207\u7247\u548c\u5b57\u7b26\u4e32\u5207\u7247\u7684\u6392\u5e8f\uff0c\u4f7f\u7528<code>sort.Ints</code>\u548c<code>sort.Strings</code>\u4e24\u4e2a\u51fd\u6570\u3002</p> Go<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc main() {\n    strs := []string{\"c\", \"a\", \"b1\"}\n    sort.Strings(strs)\n    fmt.Printf(\"strs: %v\\n\", strs)\n\n    ints := []int{7, 2, 5, 0}\n    sort.Ints(ints)\n    fmt.Printf(\"ints: %v\\n\", ints)\n\n    s := sort.IntsAreSorted(ints)\n    fmt.Printf(\"Is ints slice sorted?: %v\\n\", s)\n\n    s = sort.StringsAreSorted(strs)\n    fmt.Printf(\"Is ints slice sorted?: %v\\n\", s)\n}\n</code></pre>"},{"location":"golang/sort/#_3","title":"\u81ea\u5b9a\u4e49\u6392\u5e8f","text":"<p>\u9ed8\u8ba4\u7684\u6392\u5e8f\u65b9\u6cd5\u662f\u5347\u5e8f\u7684\uff08n increasing order\uff09\u3002</p> <p>\u6709\u65f6\u5019\u6211\u4eec\u53ef\u80fd\u9700\u8981\u6309\u7167\u522b\u7684\u65b9\u5f0f\u6765\u6392\u5e8f</p> <ol> <li>\u6574\u6570\u5207\u7247\u964d\u5e8f</li> <li>\u6839\u636e\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u5347\u5e8f|\u964d\u5e8f</li> </ol>"},{"location":"golang/waitGroup/","title":"WaitDGroup","text":""},{"location":"golang/waitGroup/#waitgroup","title":"WaitGroup\u662f\u4ec0\u4e48","text":"<p>sync.WaitGroup\u662fsync\u5305\u4e0b\u63d0\u4f9b\u7684\u4e00\u4e2a\u7ed3\u6784\u4f53 Go<pre><code>// A WaitGroup waits for a collection of goroutines to finish.\n// The main goroutine calls Add to set the number of\n// goroutines to wait for. Then each of the goroutines\n// runs and calls Done when finished. At the same time,\n// Wait can be used to block until all goroutines have finished.\n//\n// A WaitGroup must not be copied after first use.\n//\n// In the terminology of the Go memory model, a call to Done\n// \u201csynchronizes before\u201d the return of any Wait call that it unblocks.\ntype WaitGroup struct {\n    noCopy noCopy\n\n    state atomic.Uint64 // high 32 bits are counter, low 32 bits are waiter count.\n    sema  uint32\n}\n</code></pre> \u5b83\u7528\u4e8e\u8ddf\u8e2a\u4e00\u7ec4 goroutine \u7684\u72b6\u6001\uff0c\u5141\u8bb8\u4e3b\u7a0b\u5e8f\u7b49\u5f85\u8fd9\u4e9b goroutine \u5b8c\u6210\u3002WaitGroup \u901a\u8fc7\u8ba1\u6570\u5668\u6765\u5b9e\u73b0\uff0c\u8ba1\u6570\u5668\u7684\u503c\u8868\u793a\u6b63\u5728\u8fd0\u884c\u7684 goroutine \u7684\u6570\u91cf\u3002</p> <p>\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4e0a\u9762\u5c31\u53ea\u662f\u5b9e\u73b0\u4e86\u4e09\u4e2a\u65b9\u6cd5 Add\uff0cDone\uff0cWait</p> <p>\u7a0b\u5e8f\u5f00\u59cb\u65f6\u8c03\u7528Add\u521d\u59cb\u5316\u8ba1\u6570\uff0c\u6bcf\u5f53\u4e00\u4e2a\u534f\u7a0b\u6267\u884c\u5b8c\u6bd5\u65f6\u8c03\u7528Done\uff0c\u8ba1\u6570\u5c31-1\uff0c\u76f4\u5230\u51cf\u4e3a0\uff0c\u800c\u5728\u6b64\u671f\u95f4\uff0c\u4e3b\u534f\u7a0b\u8c03\u7528Wait \u4f1a\u4e00\u76f4\u963b\u585e\u76f4\u5230\u5168\u90e8\u8ba1\u6570\u51cf\u4e3a0\uff0c\u7136\u540e\u624d\u4f1a\u88ab\u5524\u9192</p> <p>\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50 Go<pre><code>func testWaitGroup() {\n    var wait sync.WaitGroup\n    wait.Add(1) // \u6307\u5b9a \u9700\u8981\u7b49\u5f85 \u4e24\u4e2a\u534f\u7a0b\u5b8c\u6210\n    go func() {\n        fmt.Println(\"\u4e00\u4e2a\u534f\u7a0b\u6267\u884c\u5b8c\u4e86\")\n        wait.Done()\n    }()\n    fmt.Println(\"\u6211\u662f\u4e3b\u8fdb\u7a0b \u6211\u73b0\u5728\u4f7f\u7528WaitGroup\u7b49\u5f85 *\u6240\u6709\u7684\u5b50\u8fdb\u7a0b* \u8fd0\u884c\u7ed3\u675f \u518d\u7ee7\u7eed\u5f80\u4e0b\u8fd0\u884c\")\n    wait.Wait()\n    fmt.Println(\"\u6240\u6709\u7684\u5b50\u8fdb\u7a0b\u6267\u884c\u5b8c\u4e86\u3002\")\n}\n</code></pre></p>"},{"location":"golang/waitGroup/#waitgroup_1","title":"WaitGroup\u600e\u4e48\u4f7f\u7528","text":"<p>\u5728\u534f\u7a0b\u7684\u5f00\u542f\u7684\u4ecb\u7ecd\u6587\u7ae0\u4e2d\uff0c\u5f88\u53ef\u80fd\u4f1a\u51fa\u73b0\u8fd9\u4e2a\u4f8b\u5b50\uff1a Go<pre><code>func main() {\n    fmt.Println(\"start\")\n    for i := 0; i &lt; 10; i++ {\n        go fmt.Println(i)\n    }\n    // \u6682\u505c1ms\n    time.Sleep(time.Millisecond)\n    fmt.Println(\"end\")\n}\n</code></pre> \u8fd9\u4e2a\u4f8b\u5b50\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\uff0c\u4f60\u4e0d\u77e5\u9053\u4e3b\u7ebf\u7a0b\u7ed3\u675f\u4e4b\u540e\uff0c\u4f1a\u6709\u51e0\u4e2a\u534f\u7a0b\u8fd0\u884c\u7ed3\u675f\uff0c\u4f60\u4e5f\u4e0d\u77e5\u9053\u8fd9\u4e9b\u534f\u7a0b\u8fd0\u884c\u7684\u5148\u540e\u987a\u5e8f\u3002\u73b0\u5728\u6709\u4e86waitGroup\uff0c\u5c31\u6709\u4e86\u89e3\u51b3\u7684\u8f6c\u673a\u3002</p> Go<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"sync\"\n    \"time\"\n)\n\nfunc main() {\n    var wg sync.WaitGroup\n    fmt.Printf(\"wg: %v\\n\", wg)\n    fmt.Printf(\"wg: %T\\n\", wg)\n    testWaitGroup()\n    testOldQuestion()\n    testWorker()\n}\n\n/*\nwg: {{} {{} {} 0} 0}\nwg: sync.WaitGroup\n*/\n\nfunc testWaitGroup() {\n    var wait sync.WaitGroup\n    wait.Add(1) // \u6307\u5b9a \u9700\u8981\u7b49\u5f85 \u4e24\u4e2a\u534f\u7a0b\u5b8c\u6210\n    go func() {\n        fmt.Println(\"\u4e00\u4e2a\u534f\u7a0b\u6267\u884c\u5b8c\u4e86\")\n        wait.Done()\n    }()\n    fmt.Println(\"\u6211\u662f\u4e3b\u8fdb\u7a0b \u6211\u73b0\u5728\u4f7f\u7528WaitGroup\u7b49\u5f85 *\u6240\u6709\u7684\u5b50\u8fdb\u7a0b* \u8fd0\u884c\u7ed3\u675f \u518d\u7ee7\u7eed\u5f80\u4e0b\u8fd0\u884c\")\n    wait.Wait()\n    fmt.Println(\"\u6240\u6709\u7684\u5b50\u8fdb\u7a0b\u6267\u884c\u5b8c\u4e86\u3002\")\n}\n\nfunc testOldQuestion() {\n    var mainWait sync.WaitGroup // \u7528\u6765\u63a7\u5236 10\u4e2a\u534f\u7a0b\u7ed3\u675f\uff0c\u4e3b\u8fdb\u7a0b\u624d\u7ed3\u675f\n    var wait sync.WaitGroup     // \u7528\u6765\u63a7\u5236\uff0c\u4e00\u4e2aadd\u8fd0\u884c\u5b8c\uff0c\u5728\u8fd0\u884c\u4e0b\u4e00\u4e2aadd\n    // \u8ba1\u657010\n    mainWait.Add(10) // \u670910\u4e2a\u534f\u7a0b\u9700\u8981\u7b49\u5f85\n    fmt.Println(\"start\")\n    for i := 0; i &lt; 10; i++ {\n        wait.Add(1) // \u9700\u8981\u7b49\u5f85\u4e00\u4e2a\u534f\u7a0b\u5b8c\u6bd5\uff0c\u518d\u5f00\u542f\u4e0b\u4e00\u4e2a\u534f\u7a0b\uff0c\u5b9e\u9645\u4e0a\u53d8\u6210\u4e32\u884c\u4e86\n        go func() {\n            fmt.Println(i)\n            wait.Done()\n            mainWait.Done()\n        }()\n        // \u7b49\u5f85\u5f53\u524d\u5faa\u73af\u7684\u534f\u7a0b\u6267\u884c\u5b8c\u6bd5\n        wait.Wait()\n    }\n    // \u7b49\u5f85\u6240\u6709\u7684\u534f\u7a0b\u6267\u884c\u5b8c\u6bd5\n    mainWait.Wait()\n    fmt.Println(\"end\")\n}\n\nfunc worker(id int, wg *sync.WaitGroup) {\n    defer wg.Done() // \u5728\u51fd\u6570\u7ed3\u675f\u65f6\u8c03\u7528 Done()\n    fmt.Printf(\"Worker %d starting\\n\", id)\n    time.Sleep(time.Second) // \u6a21\u62df\u5de5\u4f5c\n    fmt.Printf(\"Worker %d done\\n\", id)\n}\n\nfunc testWorker() {\n    // \u6ce8\u610f\u8fd9\u4e2a\u51fd\u6570 \u53ea\u7528\u4e86\u4e00\u4e2awaitgroup\uff0c\u6240\u4ee5\u8ddf\u4e0a\u9762\u7684\u51fd\u6570\u4e0d\u4e00\u6837\uff0c\n    // \u53ea\u4f1a\u4fdd\u8bc1\u8fd0\u884c\u5b8c5\u4e2a\uff0c\u4f46\u662f5\u4e2a\u8c01\u5feb\u8c01\u6162\u4e0d\u4fdd\u8bc1\n    var wg sync.WaitGroup\n\n    for i := 1; i &lt;= 5; i++ {\n        wg.Add(1) // \u589e\u52a0\u8ba1\u6570\u5668, \u4e0d\u50cf\u4e0a\u9762\u7684test\u4e00\u6837\uff0c\u4e00\u6b21\u6027\u589e\u52a010\u4e2a\uff0c\u4e5f\u662f\u53ef\u4ee5\u7684\n        go worker(i, &amp;wg) // \u542f\u52a8 goroutine\n    }\n\n    wg.Wait() // \u7b49\u5f85\u6240\u6709 goroutine \u5b8c\u6210\n    fmt.Println(\"All workers done\")\n}\n</code></pre>"},{"location":"golang/waitGroup/#waitgroup_2","title":"WaitGroup\u7684\u4f7f\u7528\u573a\u666f","text":"<ul> <li>\u5e76\u53d1\u4efb\u52a1\u7ba1\u7406\uff1a\u5f53\u4f60\u9700\u8981\u5e76\u53d1\u6267\u884c\u591a\u4e2a\u4efb\u52a1\uff0c\u5e76\u4e14\u5e0c\u671b\u5728\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u540e\u518d\u7ee7\u7eed\u6267\u884c\u540e\u7eed\u64cd\u4f5c\u65f6\uff0cWaitGroup \u662f\u4e00\u4e2a\u7406\u60f3\u7684\u9009\u62e9\u3002</li> <li>\u5e76\u884c\u5904\u7406\uff1a\u5728\u5904\u7406\u5927\u91cf\u6570\u636e\u65f6\uff0c\u53ef\u4ee5\u5c06\u6570\u636e\u5206\u6210\u591a\u4e2a\u90e8\u5206\u5e76\u884c\u5904\u7406\uff0c\u4f7f\u7528 WaitGroup \u7b49\u5f85\u6240\u6709\u5904\u7406\u5b8c\u6210\u3002</li> <li>\u7f51\u7edc\u8bf7\u6c42\uff1a\u5728\u53d1\u8d77\u591a\u4e2a\u5e76\u53d1\u7684\u7f51\u7edc\u8bf7\u6c42\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 WaitGroup \u7b49\u5f85\u6240\u6709\u8bf7\u6c42\u5b8c\u6210\uff0c\u786e\u4fdd\u5728\u5904\u7406\u54cd\u5e94\u65f6\u6240\u6709\u8bf7\u6c42\u90fd\u5df2\u5b8c\u6210\u3002</li> <li>\u8d44\u6e90\u6e05\u7406\uff1a\u5728\u7a0b\u5e8f\u7ed3\u675f\u65f6\uff0c\u786e\u4fdd\u6240\u6709 goroutine \u5b8c\u6210\u540e\u518d\u8fdb\u884c\u8d44\u6e90\u6e05\u7406\u6216\u5173\u95ed\u64cd\u4f5c\u3002</li> </ul>"},{"location":"golang/waitGroup/#waitgroup_3","title":"WaitGroup \u7684\u9677\u9631","text":"<p>WaitGroup\u901a\u5e38\u9002\u7528\u4e8e\u53ef\u52a8\u6001\u8c03\u6574\u534f\u7a0b\u6570\u91cf\u7684\u65f6\u5019\uff0c\u4f8b\u5982\u4e8b\u5148\u77e5\u6653\u534f\u7a0b\u7684\u6570\u91cf\uff0c\u53c8\u6216\u8005\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u9700\u8981\u52a8\u6001\u8c03\u6574\u3002 WaitGroup\u7684\u503c\u4e0d\u5e94\u8be5\u88ab\u590d\u5236\uff0c\u590d\u5236\u540e\u7684\u503c\u4e5f\u4e0d\u5e94\u8be5\u7ee7\u7eed\u4f7f\u7528\uff0c\u5c24\u5176\u662f\u5c06\u5176\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u4f20\u9012\u65f6\uff0c\u56e0\u8be5\u4f20\u9012\u6307\u9488\u800c\u4e0d\u662f\u503c\u3002\u5018\u82e5\u4f7f\u7528\u590d\u5236\u7684\u503c\uff0c\u8ba1\u6570\u5b8c\u5168\u65e0\u6cd5\u4f5c\u7528\u5230\u771f\u6b63\u7684WaitGroup\u4e0a\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e3b\u534f\u7a0b\u4e00\u76f4\u963b\u585e\u7b49\u5f85\uff0c\u7a0b\u5e8f\u5c06\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c\u3002</p> Go<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"sync\"\n)\n\nfunc hello(wait sync.WaitGroup) {\n    fmt.Println(\"hello\")\n    wait.Done() // \u9519\u8bef\n}\n\nfunc main() {\n    var mainWait sync.WaitGroup\n    mainWait.Add(1)\n    hello(mainWait)\n    mainWait.Wait()\n    fmt.Println(\"end\")\n}\n/*\n\u9519\u8bef\u63d0\u793a\u6240\u6709\u7684\u534f\u7a0b\u90fd\u5df2\u7ecf\u9000\u51fa\uff0c\u4f46\u4e3b\u534f\u7a0b\u4f9d\u65e7\u5728\u7b49\u5f85\uff0c\n\u8fd9\u5c31\u5f62\u6210\u4e86\u6b7b\u9501\uff0c\n\u56e0\u4e3ahello\u51fd\u6570\u5185\u90e8\u5bf9\u4e00\u4e2a\u5f62\u53c2WaitGroup\u8c03\u7528Done\u5e76\u4e0d\u4f1a\u4f5c\u7528\u5230\u539f\u6765\u7684mainWait\u4e0a\uff0c\n\u6240\u4ee5\u5e94\u8be5\u4f7f\u7528\u6307\u9488\u6765\u8fdb\u884c\u4f20\u9012\u3002\n*/\n</code></pre>"},{"location":"golang/closure/closure/","title":"\u95ed\u5305","text":"<p>\u5148\u770b\u4e00\u4e2a\u6848\u4f8b\u3002 Go<pre><code>// cls.go\n// \u95ed\u5305\u51fd\u6570\u5b9a\u4e49\u65f6\u7684\u4e0a\u4e0b\u6587\n\npackage main\n\nimport \"fmt\"\n\nfunc outer() func() int {\n    val := 3\n    a := func() int {\n        val++\n        return val\n    }\n    return a\n}\n\nfunc main() {\n    val := 9\n    _ = val\n    f := outer()\n    for _ = range 3 {\n        res := f()\n        fmt.Printf(\"res: %v\\n\", res)\n    }\n}\n</code></pre> \u51fd\u6570\u662f\u4e00\u7b49\u516c\u6c11\uff0c\u53ef\u4ee5\u88ab\u8d4b\u503c\u3001\u4f20\u9012\uff0c\u8fd4\u56de\u3002outer\u51fd\u6570\u5728\u5185\u90e8\u5b9a\u4e49\u4e86\u4e00\u4e2a\u95ed\u5305\u51fd\u6570\uff0c\u5e76\u8fd4\u56de\u51fa\u6765\u3002 \u4f46\u662f\u6ce8\u610f\uff0c\u5f53\u95ed\u5305\u51fd\u6570\u5728\u5916\u9762\u88ab\u63a5\u53d7\u65f6\uff0c\u5176\u4e2d\u7684val\u53d8\u91cf\uff0c\u4ecd\u7136\u662f\u5b9a\u4e49\u4ed6\u7684\u65f6\u5019\u7684\u4e0a\u4e0b\u6587\u4e2d\u7684val\u3002</p> <p>\u5728\u5916\u9762\u8c03\u7528\u95ed\u5305\u51fd\u6570\uff0c\u4fee\u6539\u7684\u4e5f\u662f\u5b9a\u4e49\u7684\u65f6\u5019\u4e0a\u4e0b\u6587\u4e2d\u7684val\u3002\u800c\u4e0d\u662fmain\u5f53\u4e2d\u7684val=9\u3002</p>"},{"location":"golang/defer/defer/","title":"<code>defer</code> \u5173\u952e\u5b57","text":"<p>defer\u662fgo\u8bed\u8a00\u7684\u5173\u952e\u5b57\uff0c\u7528\u4e8e\u5728\u51fd\u6570\u7ed3\u675f\uff08\u51fd\u6570\u8c03\u7528\u6808\uff0c\u5f53\u524d\u5e27\u51fa\u6808\uff0cpc\u6307\u5411return address\uff09\u4e4b\u524d\u505a\u4e00\u4e9b\u8d44\u6e90\u56de\u6536\u3001\u9519\u8bef\u5904\u7406\u7b49\u6536\u5c3e\u5de5\u4f5c\u3002</p> <p>\u5e38\u7528\u4e8e\u8d44\u6e90\u6e05\u7406\u3001\u65e5\u5fd7\u8bb0\u5f55\u3001\u9519\u8bef\u5904\u7406\u7b49\u573a\u666f\u3002</p>"},{"location":"golang/defer/defer/#defer_1","title":"defer \u7684\u4f7f\u7528\u573a\u666f","text":""},{"location":"golang/defer/defer/#defer_2","title":"defer \u7528\u6765\u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26","text":"<p>\u6700\u76f4\u89c2\u7684\u4f7f\u7528\u5c31\u662f\u7528\u6765\u5173\u95ed\u4e00\u4e9b\u6253\u5f00\u7684\u8d44\u6e90\u3002 Go<pre><code>// filename defer_basic.go\n// show basic usage of defer\n\npackage main\n\nimport (\n    \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    deferCloseFile()\n}\n\nfunc deferCloseFile() {\n    file, _ := os.Open(\"example.txt\")\n    defer file.Close()\n    data := make([]byte, 20)\n    n, _ := file.Read(data)\n    fmt.Println(\"Data read from file:\\n\", string(data[:n]))\n    fmt.Printf(\"\\n%v\\n\", \"other code...\")\n}\n</code></pre></p>"},{"location":"golang/defer/defer/#defer_3","title":"defer \u8bb0\u5f55\u65e5\u5fd7","text":"<p>\u53ef\u4ee5\u7528\u4e8e\u5728\u51fd\u6570\u9000\u51fa\u65f6\u8bb0\u5f55\u65e5\u5fd7\uff0c\u65e0\u8bba\u51fd\u6570\u662f\u6b63\u5e38\u9000\u51fa\u8fd8\u662f\u56e0\u4e3a\u9519\u8bef\u9000\u51fa\u3002 Go<pre><code>// filename defer_basic.go\n// show basic usage of defer\n\npackage main\n\nimport (\n    \"fmt\"\n    \"os\"\n    \"time\"\n)\n\nfunc main() {\n    deferLog()\n}\n\nfunc deferLog() {\n    start := time.Now()\n    defer func() {\n        duration := time.Since(start)\n        fmt.Printf(\"Function took: %v\\n\", duration)\n    }()\n    time.Sleep(2 * time.Second)\n    fmt.Println(\"Function completed\")\n}\n</code></pre></p>"},{"location":"golang/defer/defer/#defer_4","title":"defer \u7528\u6765\u6355\u83b7\u9519\u8bef","text":"<p>\u5728defer\u4e2d\u6355\u83b7\u53ef\u80fd\u7684panic\u8fd9\u662fdefer\u7684\u4e00\u4e2a\u91cd\u8981\u7684\u7528\u9014\u3002 Go<pre><code>// filename defer_basic.go\n// show basic usage of defer\n\npackage main\n\nimport (\n    \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    deferRecover()\n}\n\n\nfunc mightPanic() {\n    panic(\"a problem\")\n}\n\nfunc deferRecover() {\n    defer func() {\n        if r := recover(); r != nil {\n            fmt.Printf(\"revovered a panic: %v\\n\", r)\n        }\n    }()\n    mightPanic()\n    fmt.Println(\"after panic.\")\n}\n</code></pre></p>"},{"location":"golang/defer/defer/#defer_5","title":"defer\u7684\u6267\u884c\u987a\u5e8f\u548c\u65f6\u673a","text":"<p>\u6bcf\u4e00\u4e2a\u534f\u7a0b\u90fd\u6709\u81ea\u5df1\u7684defer\u94fe\u8868\uff0c\u5728runtime\u4e2d\uff0c\u534f\u7a0b\u662fg struct\uff0c\u5728g\u4e2d\uff0c\u5c31\u4fdd\u5b58\u4e86defer\u94fe\u8868\u3002 Go<pre><code>type g struct {\n    ...\n    _panic    *_panic // innermost panic - offset known to liblink\n    _defer    *_defer // innermost defer\n    ...\n}\n</code></pre></p>"},{"location":"golang/defer/defer/#defer-lifo","title":"\u591a\u4e2adefer LIFO","text":"<p>\u540e\u9762\u7684defer\u5148\u6267\u884c\uff0c\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2adefer\u94fe\u8868\uff0c\u91c7\u7528\u5934\u63d2\u6cd5\uff0c\u540e\u9762\u751f\u547d\u7684defer\u653e\u5728\u6700\u524d\u9762\u3002 Go<pre><code>// defer_sequence.go\n// \u6f14\u793a\u591a\u4e2a defer \u7684\u6267\u884c\u987a\u5e8f\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    someFunc()\n}\n\nfunc someFunc() {\n    defer func() { fmt.Println(\"1\") }()\n    defer func() { fmt.Println(\"2\") }()\n    defer func() { fmt.Println(\"3\") }()\n    a := 1\n    a++\n    var m map[int]string\n    b, e := m[666]\n    fmt.Printf(\"a: %v\\n\", a)\n    fmt.Printf(\"b: %v e: %v \\n\", b, e)\n}\n/*\nb:  e: false\n3\n2\n1\n*/\n</code></pre></p>"},{"location":"golang/defer/defer/#defer-return","title":"defer \u5728 return \u540e\u6267\u884c","text":"<p>\u6ce8\u610f\uff0creturn\u8bed\u53e5\u5bf9\u5e94\u5230\u6c47\u7f16\u4e0a\u662f\u6709\u4e30\u5bcc\u7684\u5185\u5bb9\u7684\uff0c\u5305\u62ec\uff1a\u628a\u8fd4\u56de\u503c\u7684\u5185\u5bb9\u653e\u5230\u7ea6\u5b9a\u7684\u8fd4\u56de\u503c\u5bc4\u5b58\u5668\uff08\u6216\u5185\u5b58\u67d0\u5904\uff09\uff0c\u8c03\u6574stack pointer\u6307\u9488\u4e3areturn address\uff0c\u7b49\u7b49\u3002</p> <p>\u5b9e\u9645\u4e0a\u5728go\u7684func\u91cc\u9762\u5199\u7684return\uff0c\u53ea\u662f\u5bf9\u5e94\u4e86\u7b2c\u4e00\u6b65\uff0c\u4e5f\u5c31\u662f\u628a\u8981\u8fd4\u56de\u7684\u503c\u5199\u5230\u8fd4\u56de\u5730\u5740\u3002 return\u5173\u952e\u5b57\u4e0d\u662f\u4ee3\u8868\u5b8c\u6574\u7684\u201creturn\u201d\u8fc7\u7a0b\uff0c\u800c\u53ea\u662freturn\u7684\u4e00\u5c0f\u6b65\u3002</p> <p>\u6240\u4ee5defer\u5b9e\u9645\u4e0a\u662f\u53ef\u4ee5\u64cd\u4f5creturn\u653e\u7f6e\u597d\u7684\u7ed3\u679c\u7684\uff0c\u8fd9\u662f\u5de7\u5999\u4e5f\u5f88tricky\u7684\u4e00\u70b9\u3002 Go<pre><code>// defer_return.go\n// \u6f14\u793a defer \u548c return \u8c01\u5148\u6267\u884c\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    // \u89c2\u5bdf\u5148\u8f93\u51fa\u4ec0\u4e48\u5185\u5bb9\n    wrapper()\n    ans := wrapper2()\n    fmt.Printf(\"ans: %v\\n\", ans)\n}\n\nfunc deferFunc(i int) {\n    for j := range i {\n        fmt.Println(j, \"defer was called.\")\n    }\n}\n\nfunc returnFunc() int {\n    fmt.Println(\"return was called.\")\n    return 1\n}\n\nfunc wrapper() int { // \u8bf4\u670d\u529b\u6709\u9650\n    defer deferFunc(3)\n    return returnFunc()\n}\n\nfunc wrapper2() (ans int) { // \u80fd\u591f\u6709\u529b\u8bc1\u660e defer \u5c31\u662f\u5728 return\u8bed\u53e5\u4e4b\u540e \u542f\u52a8\u7684\n    defer func() {\n        fmt.Printf(\"ans: %v\\n\", ans)\n        ans += 10\n    }()\n    return ans + 3\n}\n</code></pre></p>"},{"location":"golang/defer/defer/#defer_6","title":"\u6709\u53c2\u6570\u7684 defer","text":"<p>\u524d\u9762\u5199\u7684defer\u90fd\u662f\u6ca1\u6709\u53c2\u6570\u7684\uff0cdefer\u53ef\u4ee5\u6709\u53c2\u6570\u3002 Go<pre><code>// defer_arg.go\n// \u6f14\u793adefer\u7684\u53c2\u6570\npackage main\n\nimport \"fmt\"\n\n\nfunc main() {\n    test()\n}\n\nfunc test() int {\n    defer func(arg int) {\n        fmt.Printf(\"arg: %v\\n\", arg)\n    }(42) // defer\u51fd\u6570\u53ef\u4ee5\u6709\u53c2\u6570\n    defer fmt.Println(1)\n    return 0\n}\n</code></pre></p>"},{"location":"golang/defer/defer/#defer_7","title":"\u51fd\u6570\u8fd4\u56de\u503c \u4f5c\u4e3a defer \u53c2\u6570","text":"<p>defer \u7684\u53c2\u6570\u662f\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u88ab\u7acb\u5373\u8ba1\u7b97\u7684\uff0c\u800c\u4e0d\u662f\u7b49\u5230\u8fd0\u884cdefer\u7684\u65f6\u5019\u518d\u7b97\u3002 \u8fd9\u4e2a\u7b97\u5b8c\u7684\u7ed3\u679c\u4f1a\u4fdd\u5b58\u8d77\u6765\uff0c\u5728\u6700\u540e\u89e6\u53d1defer\u7684\u65f6\u5019\u544a\u8bc9defer\u53c2\u6570\u5728\u54ea\u91cc\u3002 Go<pre><code>// defer_arg.go\n// \u6f14\u793a\u51fd\u6570\u8fd4\u56de\u503c \u4f5c\u4e3a defer \u7684\u53c2\u6570\npackage main\n\nimport \"fmt\"\n\n\nfunc main() {\n    test2()\n}\n\nfunc compute(a, b int) int {\n    return a + b\n}\n\nfunc test2() {\n    a, b := 1, 2\n    defer func(x int) {\n        fmt.Printf(\"x: %v\\n\", x)\n    }(compute(a, b)) // defer\u7684\u53c2\u6570\u4e5f\u53ef\u4ee5\u662f\u51fd\u6570\u8c03\u7528\u7684\u7ed3\u679c\n    a, b = 3, 4\n    panic(\"wrong\")\n}\n// x: 3\n// panic: wrong\n</code></pre></p>"},{"location":"golang/defer/defer/#deferpanic","title":"defer\u548cpanic\u914d\u5408","text":"<p>defer\u80fd\u6267\u884c\uff0c\u8981\u4e48\u662freturn\u5df2\u7ecf\u6267\u884c\u4e86\u3002\u8981\u4e48\u5c31\u662f\u53d1\u751f\u4e86panic\u3002</p> <p>\u53d1\u751fpanic\u65f6\uff0c\u904d\u5386\u672c\u534f\u7a0b\u7684defer\u94fe\u8868\uff0c\u4e00\u4e2a\u4e2a\u6267\u884c\uff0c\u5982\u679c\u9047\u5230recover\uff0c\u5c31\u505c\u6b62\u5f53\u524d\u7684panic\uff0c\u8fd4\u56derecover\u5904\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c\u3002</p> <p>\u5982\u679c\u6ca1\u6709\u9047\u5230recover\uff0c\u5c31\u904d\u5386\u5b8c\u672c\u534f\u7a0b\u7684defer\u94fe\u8868\u4e4b\u540e\uff0c\u5411stderr\u629b\u51fapanic\u4fe1\u606f\u3002</p>"},{"location":"golang/defer/defer/#panic","title":"panic \u4e0d\u88ab\u6355\u83b7\u7684\u60c5\u51b5","text":"<p>\u6ca1\u6709revover\u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u6267\u884cdefer\u94fe\u8868\uff0c\u76f4\u8fbe\u5168\u90e8\u7ed3\u675f\uff0c\u6700\u540e\u629b\u51fapanic\u7ed9stderr\u3002</p> Go<pre><code>// defer_panic.go\n// panic\u5bfc\u81f4defer\u94fe\u8868\u6267\u884c\uff0c\u4f46\u662fdefer\u91cc\u9762\u6ca1\u6709recover\u7684\u60c5\u5f62\n\npackage main\n\nimport (\n    \"fmt\"\n    \"unicode/utf8\"\n)\n\n\nfunc main() {\n    panicFireDefer()\n}\n\nfunc panicFireDefer() {\n    defer fmt.Println(\"1\")\n    defer fmt.Println(utf8.RuneCountInString(\"\ud83d\udc4d\ud83c\udfff\")) // 2\n    defer fmt.Println(3)\n    panic(\"some problem happened T^T...\")\n}\n</code></pre>"},{"location":"golang/defer/defer/#panic_1","title":"panic \u88ab\u6355\u83b7\u7684\u60c5\u51b5","text":"<p>\u5f53panic\u89e6\u53d1defer\uff0c\u4e14defer\u4e2d\u51fa\u73b0recover\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u7ec8\u6b62\u5f53\u524d\u7684panic\uff0c\u7ee7\u7eed\u6267\u884c\u3002</p> <p>recover \u76f8\u5f53\u4e8e\u6253\u65ad\u4e86panic\u8fc7\u7a0b\u3002\u3010panic\u8fc7\u7a0b\u662f\u6307\u4ece\u53d1\u751fpanic\u5230\u8fdb\u7a0b\u7ed3\u675f\u629b\u51fastderr\u7684\u6574\u4e2a\u8fc7\u7a0b\u3011</p> Go<pre><code>// defer_panic_recover.go\n// panic\u89e6\u53d1\u4e86defer\uff0c\u800cdefer\u4e2d\u6709recover\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    deferWithRecover()\n}\n\nfunc deferWithRecover() {\n    defer func() {\n        fmt.Println(\"\u5c1d\u8bd5\u6355\u83b7panic\")\n        if err := recover(); err != nil {\n            fmt.Printf(\"err: %v\\n\", err)\n        }\n        fmt.Println(\"\u4f1a\u7ee7\u7eed\u6267\u884c\u5417\uff1f\")\n    }()\n    defer fmt.Println(\"\u8fd9\u4e2adefer\u4e0d\u6355\u6349panic\")\n    panic(\"\u51fa\u9519\u4e86\ud83d\ude07\")\n    fmt.Println(\"\u8fd9\u91cc\u4e0d\u4f1a\u6267\u884c\")\n}\n</code></pre>"},{"location":"golang/defer/defer/#deferpanic_1","title":"defer\u4e2d\u6709panic","text":"<p>defer \u7684\u56de\u8c03\u51fd\u6570\u5185\u90e8\u4e5f\u53ef\u4ee5\u5199panic\uff0c\u90a3\u4e48panic\u4f1a\u8868\u73b0\u51fa\u4ec0\u4e48\u884c\u4e3a\uff1f</p> <p>g\u534f\u7a0b\u7684\u5185\u90e8\uff0c\u9664\u4e86\u7ef4\u62a4defer\u94fe\u8868\uff0c\u8fd8\u7ef4\u62a4\u4e86panic\u94fe\u8868\u3002defer\u94fe\u8868\u7684\u6bcf\u4e2a\u8282\u70b9\u5c31\u662fdefer\u7ed3\u6784\u4f53\uff0cdefer\u7ed3\u6784\u4f53\u5185\u90e8\u5b9a\u4e49\u4e86started\u8868\u793a\u662f\u5426\u5f00\u59cb\u6267\u884c\u4e86\uff0c\u8fd8\u5b9a\u4e49\u4e86_panic\u8868\u793a\u662f\u54ea\u4e2apanic\u542f\u52a8\u7684\u8fd9\u4e2adefer\u3002 Go<pre><code>// \u4f2a\u4ee3\u7801\uff0c\u4ec5\u7528\u4e8e\u8bf4\u660edefer\u5185\u90e8\u548cg\u5185\u90e8\u7684\u6210\u5458\ntype g struct {\n    _defer // deferlist defer\u94fe\u8868\n    _panic // paniclist panic\u94fe\u8868\n} \n\ntype Defer struct {\n    started bool\n    _panic // panic \u8868\u793a\u8c01\u542f\u52a8\u4e86\u8fd9\u4e2a defer\n}\n</code></pre> \u5f53\u53d1\u751fpanic\u7684\u65f6\u5019\uff0c\u628apanic\u94fe\u8868\u7684\u5934\u4e0a\u52a0\u4e0a\u5f53\u524dpanic\uff0c\u7136\u540e\u5c31\u5f00\u59cb\u6267\u884cdefer\u94fe\u8868\uff0c\u6ce8\u610f\u540e\u6ce8\u518c\u7684defer\u8d8a\u9760\u8fd1\u94fe\u8868\u5934\uff0c\u5f00\u59cb\u6267\u884c\u4e00\u4e2adefer\u7684\u65f6\u5019\uff0c\u628a\u8fd9\u4e2adefer\u7684started\u8bbe\u7f6e\u4e3atrue\uff0c_panic\u8bbe\u7f6e\u4e3a\u5f53\u524d\u7684panic\u3002</p> <p>\u5982\u679c\u73b0\u5728defer\u4e2d\u53c8\u51fa\u73b0\u4e86panic\uff0c\u90a3\u4e48\u5c31\u5728panic\u94fe\u8868\u7684\u5934\u4e0a\u518d\u63d2\u5165\u4e00\u4e2a\u65b0\u7684panic\u8282\u70b9\uff0c\u7136\u540e\u518d\u4ecedefer\u94fe\u8868\u7684\u5934\u8282\u70b9\u5f00\u59cb\u6267\u884c\uff0c\u5f53\u53d1\u73b0\u5df2\u7ecfstarted\u5e76\u4e14_panic\u4e0d\u662f\u81ea\u5df1\u7684\u65f6\u5019\uff0c\u3010\u8fd9\u4e2a_panic\u5c31\u6807\u8bb0\u4e3a\u7ed3\u675f\uff1f\u3011\u5c31\u7ee7\u7eed\u5f80\u540e\u6267\u884c\u4e0b\u4e00\u4e2adefer\u8282\u70b9\u3002</p> <p>\u5f53\u5168\u90e8\u7684defer\u8282\u70b9\u6267\u884c\u5b8c\u6bd5\u4e4b\u540e\uff0c\u5c31\u8981\u8fdb\u884cpanic\u7684\u6253\u5370\u4e86\uff0c\u6b64\u65f6\u662f\u4eceg\u7684panic\u94fe\u8868\u5c3e\u90e8\u5411\u5934\u90e8\u6253\u5370\uff0c\u4e5f\u5c31\u662fpanic\u51fa\u73b0\u7684\u987a\u5e8f\u6253\u5370\u7684\u3002</p>"},{"location":"golang/defer/defer/#deferpanicrecover","title":"defer\u4e2d\u6709panic\uff0c\u4f46\u662f\u4e0drecover","text":"<p>Go<pre><code>// panic_in_defer.go\n// \u5982\u679c\u53d1\u751f\u4e86panic\uff0c\u89e6\u53d1defer\uff0c\u800cdefer\u91cc\u9762\u53c8\u6709panic \u4f1a\u600e\u4e48\u6837\u5462\uff1f\n\npackage main\n\nfunc main() {\n    func1()\n}\n\nfunc func1() {\n    defer func() {\n        panic(\"panic in defer1\")\n    }()\n    defer func() {\n        panic(\"panic in defer2\")\n    }()\n    panic(\"func1 panic\")\n}\n\n// panic: func1 panic\n//         panic: panic in defer2\n//         panic: panic in defer1\n\n// goroutine 1 [running]:\n// main.func1.func1()\n//         C:/Users/Administrator/Desktop/codes/defer/panic_in_defer.go:12 +0x25\n// panic({0xe7f5e0?, 0xea8fb8?})\n//         D:/golang/src/runtime/panic.go:785 +0x132\n// main.func1.func2()\n//         C:/Users/Administrator/Desktop/codes/defer/panic_in_defer.go:15 +0x25\n// panic({0xe7f5e0?, 0xea8f98?})\n//         D:/golang/src/runtime/panic.go:785 +0x132\n// main.func1()\n//         C:/Users/Administrator/Desktop/codes/defer/panic_in_defer.go:17 +0x4e\n// main.main()\n//         C:/Users/Administrator/Desktop/codes/defer/panic_in_defer.go:7 +0xf\n// exit status 2\n</code></pre> \u53ef\u4ee5\u770b\u5230\u4e09\u4e2apanic\u90fd\u6253\u5370\u51fa\u6765\u4e86\uff0c\u5e76\u4e14\u662f\u6309\u7167\u5148\u540e\u987a\u5e8f\u6253\u5370\u7684\uff0c\u8fd9\u4e5f\u662f\u534f\u7a0bg\u7684panic\u94fe\u8868\u7684\u4ece\u5c3e\u5230\u5934\u7684\u6253\u5370\u987a\u5e8f\u3002</p>"},{"location":"golang/defer/defer/#panic_2","title":"\u5d4c\u5957 panic \u6d4b\u8bd5\u9898","text":"<p>\u770b\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u8f93\u51fa\u662f\u4ec0\u4e48\uff1f\u6765\u6e90\u662f golang\u4e2d\u6587\u5b66\u4e60\u6587\u6863 \u7684\u9519\u8bef-panic\u7ae0\u8282\u3002 Go<pre><code>func main() {\n    defer fmt.Println(\"A\") // 1\n    defer func() { //2\n        func() {\n            panic(\"panicA\")\n            defer fmt.Println(\"E\")\n        }()\n    }()\n    fmt.Println(\"C\")\n    dangerOp()\n    defer fmt.Println(\"D\")\n}\n\nfunc dangerOp() {\n    defer fmt.Println(1) //3\n    defer fmt.Println(2) //4\n    panic(\"panicB\")\n    defer fmt.Println(3)\n}\n</code></pre> \u9996\u5148\u518dmain\u534f\u7a0b\u4e2d\u6ce8\u518c\u4e86\u4e24\u4e2adefer\uff0c\u7136\u540e\u6253\u5370\u51fa'C'\uff0c\u968f\u540e\u8fdb\u5165dangerOp\u51fd\u6570\u5185\uff08\u6ce8\u610f\u8fd8\u662f\u672c\u534f\u7a0b\uff0c\u6ca1\u6709\u5f00\u65b0\u7684\u534f\u7a0b\uff09\uff0c\u518d\u6b21\u6ce8\u518c\u4e86\u4e24\u4e2a\u51fd\u6570\uff0c\u6ce8\u518c\u7684defer\u5728\u4ee3\u7801\u4e2d\u6ce8\u91ca\u4e3a 1\uff0c2\uff0c3\uff0c4\u3002\u5728defer\u94fe\u4e0a\u7684\u9996\u5c3e\u987a\u5e8f\u662f 4321\u3002\u7136\u540epanicB\u5728main-g\u7684panic\u94fe\u8868\u6302\u4e0apanicB\uff0c\u89e6\u53d1defer\u3002\u8f93\u51fa2\u30011\u3002 \u7136\u540e\u6267\u884cdefer2\uff0c\u7acb\u9a6cpanicA\uff0c\u5728main-g\u7684panic\u94fe\u7684panicB\u524d\u9762\u6302\u4e0apanicA\uff0c\u518d\u53bb\u6267\u884cdefer\u94fe\u3002\u6b64\u65f6\u6ce8\u610f\u5230defer2\u8fd8\u5728\u94fe\u4e0a\uff0c\u4e14\u72b6\u6001\u4e3astarted\uff0c\u4f46\u662f_panic\u4e3apanicB\u56e0\u4e3a\u662fpanicB\u89e6\u53d1\u7684\u4ed6\uff0c\u90a3\u4e48\u5c31\u8df3\u8fc7\u8fd9\u4e2adefer\uff0c\u518d\u53bb\u6267\u884cdefer1\u4e86\uff0c\u6ce8\u610f\u6b64\u65f6\u4e5f\u4f1a\u6807\u8bb0panicA\u4e3adone\u3002\u5230\u6700\u540edefer\u5168\u90e8\u6267\u884c\u5b8c\u4e86\u3002\u5c31\u8f93\u51fapanic\u4fe1\u606f\uff0c\u987a\u5e8f\u662fpanicB\uff0cpanicA\u3002</p> <p>\u6240\u4ee5\u603b\u7684\u7b54\u6848\u662f\uff1a Text Only<pre><code>C \n2 \n1 \nA \npanicB \npanicA\n</code></pre></p>"},{"location":"golang/defer/defer/#deferpanicrecover_1","title":"defer\u4e2d\u6709panic\uff0c\u8fdb\u884crecover","text":"<p>\u6355\u6349\u5230\u7684\u662f\u540e\u9762\u51fa\u73b0\u7684panic\u3002</p> <p>recover\u6355\u6349\u5230\u7684\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u51fa\u73b0\u7684panic\u3002</p> Go<pre><code>// panic_in_defer_recover.go\n// defer\u4e2d\u6709panic\uff0c\u8fdb\u884crecover\n\npackage main\n\nimport \"fmt\"\n\n\nfunc main() {\n    func2() // \u6355\u6349\u5230\u7684\u662f: panic in defer2\n}\n\nfunc func2() {\n    defer func() {\n        if err := recover(); err != nil {\n            fmt.Printf(\"\u6355\u6349\u5230\u7684\u662f: %v\\n\", err)\n        }\n    }()\n\n    defer func() {\n        panic(\"panic in defer2\")\n    }()\n\n    panic(\"func1 panic\")\n}\n</code></pre>"},{"location":"golang/defer/defer/#recover","title":"recover \u7684\u4f5c\u7528","text":"<p>recover \u628a\u5f53\u524d\u6267\u884c\u7684 panic \u7684 recovered \u5b57\u6bb5\u7f6e\u4e3a true\u3002 Go<pre><code>// recover_panic.go\n// \u5c55\u793arecover\u7684\u4f5c\u7528\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    A()\n}\n\nfunc A() {\n    defer A1()\n    defer A2()\n    panic(\"panicA\")\n}\n\nfunc A1() {\n    fmt.Println(\"A1\")\n}\n\nfunc A2() {\n    p := recover()\n    fmt.Printf(\"p: %v\\n\", p)\n}\n</code></pre> \u5f53\u6267\u884c\u5230A\u7684panicA\u65f6\uff0cg\u7684defer\u94fe\u8868\u6302\u7740A1\uff0cA2\uff0cpanic\u94fe\u8868\u6302\u4e0apanicA\uff0c\u7136\u540e\u5f00\u59cb\u6267\u884cdefer\uff0c\u5148\u6267\u884cA2\uff0crecover\u628a\u5f53\u524d\u7684panicA\u8bbe\u7f6e\u4e3arecovered\uff0c\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c\uff0c\u5f53\u6bcf\u4e2adefer\u6267\u884c\u5b8c\u4e86\u4ee5\u540e\uff0c\u90fd\u4f1a\u68c0\u67e5\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684panic\u662f\u5426\u88ab\u6062\u590d\u4e86\uff0c\u5982\u679c\u5df2\u7ecfrecovered\uff0c\u5c31\u628a\u4ed6\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u3002</p>"},{"location":"golang/defer/defer1/","title":"<code>defer</code> \u5173\u952e\u5b57","text":"<p>defer\u662fgo\u8bed\u8a00\u7684\u5173\u952e\u5b57\uff0c\u7528\u4e8e\u5728\u51fd\u6570\u7ed3\u675f\uff08\u51fd\u6570\u8c03\u7528\u6808\uff0c\u5f53\u524d\u5e27\u51fa\u6808\uff0cpc\u6307\u5411return address\uff09\u4e4b\u524d\u505a\u4e00\u4e9b\u8d44\u6e90\u56de\u6536\u3001\u9519\u8bef\u5904\u7406\u7b49\u6536\u5c3e\u5de5\u4f5c\u3002</p> <p>\u5e38\u7528\u4e8e\u8d44\u6e90\u6e05\u7406\u3001\u65e5\u5fd7\u8bb0\u5f55\u3001\u9519\u8bef\u5904\u7406\u7b49\u573a\u666f\u3002</p>"},{"location":"golang/defer/defer1/#defer_1","title":"defer \u7684\u4f7f\u7528\u573a\u666f","text":""},{"location":"golang/defer/defer1/#defer_2","title":"defer \u7528\u6765\u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26","text":"<p>\u6700\u76f4\u89c2\u7684\u4f7f\u7528\u5c31\u662f\u7528\u6765\u5173\u95ed\u4e00\u4e9b\u6253\u5f00\u7684\u8d44\u6e90\u3002 Go<pre><code>// filename defer_basic.go\n// show basic usage of defer\n\npackage main\n\nimport (\n    \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    deferCloseFile()\n}\n\nfunc deferCloseFile() {\n    file, _ := os.Open(\"example.txt\")\n    defer file.Close()\n    data := make([]byte, 20)\n    n, _ := file.Read(data)\n    fmt.Println(\"Data read from file:\\n\", string(data[:n]))\n    fmt.Printf(\"\\n%v\\n\", \"other code...\")\n}\n</code></pre></p>"},{"location":"golang/defer/defer1/#defer_3","title":"defer \u8bb0\u5f55\u65e5\u5fd7","text":"<p>\u53ef\u4ee5\u7528\u4e8e\u5728\u51fd\u6570\u9000\u51fa\u65f6\u8bb0\u5f55\u65e5\u5fd7\uff0c\u65e0\u8bba\u51fd\u6570\u662f\u6b63\u5e38\u9000\u51fa\u8fd8\u662f\u56e0\u4e3a\u9519\u8bef\u9000\u51fa\u3002 Go<pre><code>// filename defer_basic.go\n// show basic usage of defer\n\npackage main\n\nimport (\n    \"fmt\"\n    \"os\"\n    \"time\"\n)\n\nfunc main() {\n    deferLog()\n}\n\nfunc deferLog() {\n    start := time.Now()\n    defer func() {\n        duration := time.Since(start)\n        fmt.Printf(\"Function took: %v\\n\", duration)\n    }()\n    time.Sleep(2 * time.Second)\n    fmt.Println(\"Function completed\")\n}\n</code></pre></p>"},{"location":"golang/defer/defer1/#defer_4","title":"defer \u7528\u6765\u6355\u83b7\u9519\u8bef","text":"<p>\u5728defer\u4e2d\u6355\u83b7\u53ef\u80fd\u7684panic\u8fd9\u662fdefer\u7684\u4e00\u4e2a\u91cd\u8981\u7684\u7528\u9014\u3002 Go<pre><code>// filename defer_basic.go\n// show basic usage of defer\n\npackage main\n\nimport (\n    \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    deferRecover()\n}\n\n\nfunc mightPanic() {\n    panic(\"a problem\")\n}\n\nfunc deferRecover() {\n    defer func() {\n        if r := recover(); r != nil {\n            fmt.Printf(\"revovered a panic: %v\\n\", r)\n        }\n    }()\n    mightPanic()\n    fmt.Println(\"after panic.\")\n}\n</code></pre></p>"},{"location":"golang/defer/defer1/#defer_5","title":"defer\u7684\u6267\u884c\u987a\u5e8f\u548c\u65f6\u673a","text":"<p>\u6bcf\u4e00\u4e2a\u534f\u7a0b\u90fd\u6709\u81ea\u5df1\u7684defer\u94fe\u8868\uff0c\u5728runtime\u4e2d\uff0c\u534f\u7a0b\u662fg struct\uff0c\u5728g\u4e2d\uff0c\u5c31\u4fdd\u5b58\u4e86defer\u94fe\u8868\u3002 Go<pre><code>type g struct {\n    ...\n    _panic    *_panic // innermost panic - offset known to liblink\n    _defer    *_defer // innermost defer\n    ...\n}\n</code></pre></p>"},{"location":"golang/defer/defer1/#defer-lifo","title":"\u591a\u4e2adefer LIFO","text":"<p>\u540e\u9762\u7684defer\u5148\u6267\u884c\uff0c\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2adefer\u94fe\u8868\uff0c\u91c7\u7528\u5934\u63d2\u6cd5\uff0c\u540e\u9762\u751f\u547d\u7684defer\u653e\u5728\u6700\u524d\u9762\u3002 Go<pre><code>// defer_sequence.go\n// \u6f14\u793a\u591a\u4e2a defer \u7684\u6267\u884c\u987a\u5e8f\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    someFunc()\n}\n\nfunc someFunc() {\n    defer func() { fmt.Println(\"1\") }()\n    defer func() { fmt.Println(\"2\") }()\n    defer func() { fmt.Println(\"3\") }()\n    a := 1\n    a++\n    var m map[int]string\n    b, e := m[666]\n    fmt.Printf(\"a: %v\\n\", a)\n    fmt.Printf(\"b: %v e: %v \\n\", b, e)\n}\n/*\nb:  e: false\n3\n2\n1\n*/\n</code></pre></p>"},{"location":"golang/defer/defer1/#defer-return","title":"defer \u5728 return \u540e\u6267\u884c","text":"<p>\u6ce8\u610f\uff0creturn\u8bed\u53e5\u5bf9\u5e94\u5230\u6c47\u7f16\u4e0a\u662f\u6709\u4e30\u5bcc\u7684\u5185\u5bb9\u7684\uff0c\u5305\u62ec\uff1a\u628a\u8fd4\u56de\u503c\u7684\u5185\u5bb9\u653e\u5230\u7ea6\u5b9a\u7684\u8fd4\u56de\u503c\u5bc4\u5b58\u5668\uff08\u6216\u5185\u5b58\u67d0\u5904\uff09\uff0c\u8c03\u6574stack pointer\u6307\u9488\u4e3areturn address\uff0c\u7b49\u7b49\u3002</p> <p>\u5b9e\u9645\u4e0a\u5728go\u7684func\u91cc\u9762\u5199\u7684return\uff0c\u53ea\u662f\u5bf9\u5e94\u4e86\u7b2c\u4e00\u6b65\uff0c\u4e5f\u5c31\u662f\u628a\u8981\u8fd4\u56de\u7684\u503c\u5199\u5230\u8fd4\u56de\u5730\u5740\u3002 return\u5173\u952e\u5b57\u4e0d\u662f\u4ee3\u8868\u5b8c\u6574\u7684\u201creturn\u201d\u8fc7\u7a0b\uff0c\u800c\u53ea\u662freturn\u7684\u4e00\u5c0f\u6b65\u3002</p> <p>\u6240\u4ee5defer\u5b9e\u9645\u4e0a\u662f\u53ef\u4ee5\u64cd\u4f5creturn\u653e\u7f6e\u597d\u7684\u7ed3\u679c\u7684\uff0c\u8fd9\u662f\u5de7\u5999\u4e5f\u5f88tricky\u7684\u4e00\u70b9\u3002 Go<pre><code>// defer_return.go\n// \u6f14\u793a defer \u548c return \u8c01\u5148\u6267\u884c\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    // \u89c2\u5bdf\u5148\u8f93\u51fa\u4ec0\u4e48\u5185\u5bb9\n    wrapper()\n    ans := wrapper2()\n    fmt.Printf(\"ans: %v\\n\", ans)\n}\n\nfunc deferFunc(i int) {\n    for j := range i {\n        fmt.Println(j, \"defer was called.\")\n    }\n}\n\nfunc returnFunc() int {\n    fmt.Println(\"return was called.\")\n    return 1\n}\n\nfunc wrapper() int { // \u8bf4\u670d\u529b\u6709\u9650\n    defer deferFunc(3)\n    return returnFunc()\n}\n\nfunc wrapper2() (ans int) { // \u80fd\u591f\u6709\u529b\u8bc1\u660e defer \u5c31\u662f\u5728 return\u8bed\u53e5\u4e4b\u540e \u542f\u52a8\u7684\n    defer func() {\n        fmt.Printf(\"ans: %v\\n\", ans)\n        ans += 10\n    }()\n    return ans + 3\n}\n</code></pre></p>"},{"location":"golang/defer/defer1/#deferpanic","title":"defer\u548cpanic\u914d\u5408","text":"<p>defer\u80fd\u6267\u884c\uff0c\u8981\u4e48\u662freturn\u5df2\u7ecf\u6267\u884c\u4e86\u3002\u8981\u4e48\u5c31\u662f\u53d1\u751f\u4e86panic\u3002</p> <p>\u53d1\u751fpanic\u65f6\uff0c\u904d\u5386\u672c\u534f\u7a0b\u7684defer\u94fe\u8868\uff0c\u4e00\u4e2a\u4e2a\u6267\u884c\uff0c\u5982\u679c\u9047\u5230recover\uff0c\u5c31\u505c\u6b62\u5f53\u524d\u7684panic\uff0c\u8fd4\u56derecover\u5904\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c\u3002</p> <p>\u5982\u679c\u6ca1\u6709\u9047\u5230recover\uff0c\u5c31\u904d\u5386\u5b8c\u672c\u534f\u7a0b\u7684defer\u94fe\u8868\u4e4b\u540e\uff0c\u5411stderr\u629b\u51fapanic\u4fe1\u606f\u3002</p>"},{"location":"golang/defer/defer1/#panic","title":"panic \u4e0d\u88ab\u6355\u83b7\u7684\u60c5\u51b5","text":"<p>\u6ca1\u6709revover\u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u6267\u884cdefer\u94fe\u8868\uff0c\u76f4\u8fbe\u5168\u90e8\u7ed3\u675f\uff0c\u6700\u540e\u629b\u51fapanic\u7ed9stderr\u3002</p> Go<pre><code>// defer_panic.go\n// panic\u5bfc\u81f4defer\u94fe\u8868\u6267\u884c\uff0c\u4f46\u662fdefer\u91cc\u9762\u6ca1\u6709recover\u7684\u60c5\u5f62\n\npackage main\n\nimport (\n    \"fmt\"\n    \"unicode/utf8\"\n)\n\n\nfunc main() {\n    panicFireDefer()\n}\n\nfunc panicFireDefer() {\n    defer fmt.Println(\"1\")\n    defer fmt.Println(utf8.RuneCountInString(\"\ud83d\udc4d\ud83c\udfff\")) // 2\n    defer fmt.Println(3)\n    panic(\"some problem happened T^T...\")\n}\n</code></pre>"},{"location":"golang/defer/defer1/#panic_1","title":"panic \u88ab\u6355\u83b7\u7684\u60c5\u51b5","text":"<p>\u5f53panic\u89e6\u53d1defer\uff0c\u4e14defer\u4e2d\u51fa\u73b0recover\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u7ec8\u6b62\u5f53\u524d\u7684panic\uff0c\u7ee7\u7eed\u6267\u884c\u3002</p> <p>recover \u76f8\u5f53\u4e8e\u6253\u65ad\u4e86panic\u8fc7\u7a0b\u3002\u3010panic\u8fc7\u7a0b\u662f\u6307\u4ece\u53d1\u751fpanic\u5230\u8fdb\u7a0b\u7ed3\u675f\u629b\u51fastderr\u7684\u6574\u4e2a\u8fc7\u7a0b\u3011</p> Go<pre><code>// defer_panic_recover.go\n// panic\u89e6\u53d1\u4e86defer\uff0c\u800cdefer\u4e2d\u6709recover\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    deferWithRecover()\n}\n\nfunc deferWithRecover() {\n    defer func() {\n        fmt.Println(\"\u5c1d\u8bd5\u6355\u83b7panic\")\n        if err := recover(); err != nil {\n            fmt.Printf(\"err: %v\\n\", err)\n        }\n        fmt.Println(\"\u4f1a\u7ee7\u7eed\u6267\u884c\u5417\uff1f\")\n    }()\n    defer fmt.Println(\"\u8fd9\u4e2adefer\u4e0d\u6355\u6349panic\")\n    panic(\"\u51fa\u9519\u4e86\ud83d\ude07\")\n    fmt.Println(\"\u8fd9\u91cc\u4e0d\u4f1a\u6267\u884c\")\n}\n</code></pre>"},{"location":"golang/defer/defer1/#deferpanic_1","title":"defer\u4e2d\u6709panic","text":"<p>defer \u7684\u56de\u8c03\u51fd\u6570\u5185\u90e8\u4e5f\u53ef\u4ee5\u5199panic\uff0c\u90a3\u4e48panic\u4f1a\u8868\u73b0\u51fa\u4ec0\u4e48\u884c\u4e3a\uff1f</p> <p>g\u534f\u7a0b\u7684\u5185\u90e8\uff0c\u9664\u4e86\u7ef4\u62a4defer\u94fe\u8868\uff0c\u8fd8\u7ef4\u62a4\u4e86panic\u94fe\u8868\u3002defer\u94fe\u8868\u7684\u6bcf\u4e2a\u8282\u70b9\u5c31\u662fdefer\u7ed3\u6784\u4f53\uff0cdefer\u7ed3\u6784\u4f53\u5185\u90e8\u5b9a\u4e49\u4e86started\u8868\u793a\u662f\u5426\u5f00\u59cb\u6267\u884c\u4e86\uff0c\u8fd8\u5b9a\u4e49\u4e86_panic\u8868\u793a\u662f\u54ea\u4e2apanic\u542f\u52a8\u7684\u8fd9\u4e2adefer\u3002 Go<pre><code>// \u4f2a\u4ee3\u7801\uff0c\u4ec5\u7528\u4e8e\u8bf4\u660edefer\u5185\u90e8\u548cg\u5185\u90e8\u7684\u6210\u5458\ntype g struct {\n    _defer // deferlist defer\u94fe\u8868\n    _panic // paniclist panic\u94fe\u8868\n} \n\ntype Defer struct {\n    started bool\n    _panic // panic \u8868\u793a\u8c01\u542f\u52a8\u4e86\u8fd9\u4e2a defer\n}\n</code></pre> \u5f53\u53d1\u751fpanic\u7684\u65f6\u5019\uff0c\u628apanic\u94fe\u8868\u7684\u5934\u4e0a\u52a0\u4e0a\u5f53\u524dpanic\uff0c\u7136\u540e\u5c31\u5f00\u59cb\u6267\u884cdefer\u94fe\u8868\uff0c\u6ce8\u610f\u540e\u6ce8\u518c\u7684defer\u8d8a\u9760\u8fd1\u94fe\u8868\u5934\uff0c\u5f00\u59cb\u6267\u884c\u4e00\u4e2adefer\u7684\u65f6\u5019\uff0c\u628a\u8fd9\u4e2adefer\u7684started\u8bbe\u7f6e\u4e3atrue\uff0c_panic\u8bbe\u7f6e\u4e3a\u5f53\u524d\u7684panic\u3002</p> <p>\u5982\u679c\u73b0\u5728defer\u4e2d\u53c8\u51fa\u73b0\u4e86panic\uff0c\u90a3\u4e48\u5c31\u5728panic\u94fe\u8868\u7684\u5934\u4e0a\u518d\u63d2\u5165\u4e00\u4e2a\u65b0\u7684panic\u8282\u70b9\uff0c\u7136\u540e\u518d\u4ecedefer\u94fe\u8868\u7684\u5934\u8282\u70b9\u5f00\u59cb\u6267\u884c\uff0c\u5f53\u53d1\u73b0\u5df2\u7ecfstarted\u5e76\u4e14_panic\u4e0d\u662f\u81ea\u5df1\u7684\u65f6\u5019\uff0c\u3010\u8fd9\u4e2a_panic\u5c31\u6807\u8bb0\u4e3a\u7ed3\u675f\uff1f\u3011\u5c31\u7ee7\u7eed\u5f80\u540e\u6267\u884c\u4e0b\u4e00\u4e2adefer\u8282\u70b9\u3002</p> <p>\u5f53\u5168\u90e8\u7684defer\u8282\u70b9\u6267\u884c\u5b8c\u6bd5\u4e4b\u540e\uff0c\u5c31\u8981\u8fdb\u884cpanic\u7684\u6253\u5370\u4e86\uff0c\u6b64\u65f6\u662f\u4eceg\u7684panic\u94fe\u8868\u5c3e\u90e8\u5411\u5934\u90e8\u6253\u5370\uff0c\u4e5f\u5c31\u662fpanic\u51fa\u73b0\u7684\u987a\u5e8f\u6253\u5370\u7684\u3002</p>"},{"location":"golang/defer/defer1/#deferpanicrecover","title":"defer\u4e2d\u6709panic\uff0c\u4f46\u662f\u4e0drecover","text":"<p>Go<pre><code>// panic_in_defer.go\n// \u5982\u679c\u53d1\u751f\u4e86panic\uff0c\u89e6\u53d1defer\uff0c\u800cdefer\u91cc\u9762\u53c8\u6709panic \u4f1a\u600e\u4e48\u6837\u5462\uff1f\n\npackage main\n\nfunc main() {\n    func1()\n}\n\nfunc func1() {\n    defer func() {\n        panic(\"panic in defer1\")\n    }()\n    defer func() {\n        panic(\"panic in defer2\")\n    }()\n    panic(\"func1 panic\")\n}\n\n// panic: func1 panic\n//         panic: panic in defer2\n//         panic: panic in defer1\n\n// goroutine 1 [running]:\n// main.func1.func1()\n//         C:/Users/Administrator/Desktop/codes/defer/panic_in_defer.go:12 +0x25\n// panic({0xe7f5e0?, 0xea8fb8?})\n//         D:/golang/src/runtime/panic.go:785 +0x132\n// main.func1.func2()\n//         C:/Users/Administrator/Desktop/codes/defer/panic_in_defer.go:15 +0x25\n// panic({0xe7f5e0?, 0xea8f98?})\n//         D:/golang/src/runtime/panic.go:785 +0x132\n// main.func1()\n//         C:/Users/Administrator/Desktop/codes/defer/panic_in_defer.go:17 +0x4e\n// main.main()\n//         C:/Users/Administrator/Desktop/codes/defer/panic_in_defer.go:7 +0xf\n// exit status 2\n</code></pre> \u53ef\u4ee5\u770b\u5230\u4e09\u4e2apanic\u90fd\u6253\u5370\u51fa\u6765\u4e86\uff0c\u5e76\u4e14\u662f\u6309\u7167\u5148\u540e\u987a\u5e8f\u6253\u5370\u7684\uff0c\u8fd9\u4e5f\u662f\u534f\u7a0bg\u7684panic\u94fe\u8868\u7684\u4ece\u5c3e\u5230\u5934\u7684\u6253\u5370\u987a\u5e8f\u3002</p>"},{"location":"golang/defer/defer1/#panic_2","title":"\u5d4c\u5957 panic \u6d4b\u8bd5\u9898","text":"<p>\u770b\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u8f93\u51fa\u662f\u4ec0\u4e48\uff1f\u6765\u6e90\u662f golang\u4e2d\u6587\u5b66\u4e60\u6587\u6863 \u7684\u9519\u8bef-panic\u7ae0\u8282\u3002 Go<pre><code>func main() {\n    defer fmt.Println(\"A\") // 1\n    defer func() { //2\n        func() {\n            panic(\"panicA\")\n            defer fmt.Println(\"E\")\n        }()\n    }()\n    fmt.Println(\"C\")\n    dangerOp()\n    defer fmt.Println(\"D\")\n}\n\nfunc dangerOp() {\n    defer fmt.Println(1) //3\n    defer fmt.Println(2) //4\n    panic(\"panicB\")\n    defer fmt.Println(3)\n}\n</code></pre> \u9996\u5148\u518dmain\u534f\u7a0b\u4e2d\u6ce8\u518c\u4e86\u4e24\u4e2adefer\uff0c\u7136\u540e\u6253\u5370\u51fa'C'\uff0c\u968f\u540e\u8fdb\u5165dangerOp\u51fd\u6570\u5185\uff08\u6ce8\u610f\u8fd8\u662f\u672c\u534f\u7a0b\uff0c\u6ca1\u6709\u5f00\u65b0\u7684\u534f\u7a0b\uff09\uff0c\u518d\u6b21\u6ce8\u518c\u4e86\u4e24\u4e2a\u51fd\u6570\uff0c\u6ce8\u518c\u7684defer\u5728\u4ee3\u7801\u4e2d\u6ce8\u91ca\u4e3a 1\uff0c2\uff0c3\uff0c4\u3002\u5728defer\u94fe\u4e0a\u7684\u9996\u5c3e\u987a\u5e8f\u662f 4321\u3002\u7136\u540epanicB\u5728main-g\u7684panic\u94fe\u8868\u6302\u4e0apanicB\uff0c\u89e6\u53d1defer\u3002\u8f93\u51fa2\u30011\u3002 \u7136\u540e\u6267\u884cdefer2\uff0c\u7acb\u9a6cpanicA\uff0c\u5728main-g\u7684panic\u94fe\u7684panicB\u524d\u9762\u6302\u4e0apanicA\uff0c\u518d\u53bb\u6267\u884cdefer\u94fe\u3002\u6b64\u65f6\u6ce8\u610f\u5230defer2\u8fd8\u5728\u94fe\u4e0a\uff0c\u4e14\u72b6\u6001\u4e3astarted\uff0c\u4f46\u662f_panic\u4e3apanicB\u56e0\u4e3a\u662fpanicB\u89e6\u53d1\u7684\u4ed6\uff0c\u90a3\u4e48\u5c31\u8df3\u8fc7\u8fd9\u4e2adefer\uff0c\u518d\u53bb\u6267\u884cdefer1\u4e86\uff0c\u6ce8\u610f\u6b64\u65f6\u4e5f\u4f1a\u6807\u8bb0panicA\u4e3adone\u3002\u5230\u6700\u540edefer\u5168\u90e8\u6267\u884c\u5b8c\u4e86\u3002\u5c31\u8f93\u51fapanic\u4fe1\u606f\uff0c\u987a\u5e8f\u662fpanicB\uff0cpanicA\u3002</p> <p>\u6240\u4ee5\u603b\u7684\u7b54\u6848\u662f\uff1a Text Only<pre><code>C \n2 \n1 \nA \npanicB \npanicA\n</code></pre></p>"},{"location":"golang/defer/defer1/#deferpanicrecover_1","title":"defer\u4e2d\u6709panic\uff0c\u8fdb\u884crecover","text":"<p>\u6355\u6349\u5230\u7684\u662f\u540e\u9762\u51fa\u73b0\u7684panic\u3002</p> <p>recover\u6355\u6349\u5230\u7684\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u51fa\u73b0\u7684panic\u3002</p> Go<pre><code>// panic_in_defer_recover.go\n// defer\u4e2d\u6709panic\uff0c\u8fdb\u884crecover\n\npackage main\n\nimport \"fmt\"\n\n\nfunc main() {\n    func2() // \u6355\u6349\u5230\u7684\u662f: panic in defer2\n}\n\nfunc func2() {\n    defer func() {\n        if err := recover(); err != nil {\n            fmt.Printf(\"\u6355\u6349\u5230\u7684\u662f: %v\\n\", err)\n        }\n    }()\n\n    defer func() {\n        panic(\"panic in defer2\")\n    }()\n\n    panic(\"func1 panic\")\n}\n</code></pre>"},{"location":"monkey%E8%A7%A3%E9%87%8A%E5%99%A8/ast/","title":"\u62bd\u8c61\u8bed\u6cd5\u6811","text":"<p>\u5f53\u6e90\u4ee3\u7801\u88ab\u5f53\u505a\u5b57\u7b26\u4e32\u62c6\u89e3\u4e3atoken\u5e8f\u5217\u4e4b\u540e\uff0c\u8bcd\u6cd5\u89e3\u6790\u5668\u7684\u4efb\u52a1\u5c31\u5b8c\u6210\u4e86\u3002\u4e0b\u4e00\u6b65\u9700\u8981\u8fdb\u884c\u8bed\u6cd5\u5206\u6790\uff0c\u4e5f\u5c31\u662f\u4ece\u4e0a\u4e00\u6b65\u5f97\u5230\u7684token\u5e8f\u5217\u751f\u6210ast\u62bd\u8c61\u8bed\u6cd5\u6811\u3002</p>"},{"location":"monkey%E8%A7%A3%E9%87%8A%E5%99%A8/ast/#ast","title":"ast\u7684\u8282\u70b9\u7c7b\u578b","text":"<p>ast\u62bd\u8c61\u8bed\u6cd5\u6811\uff0c\u6811\u4e0a\u7684\u8282\u70b9\u6709\u8868\u8fbe\u5f0f\u8282\u70b9\u3001\u4e5f\u6709\u8bed\u53e5\u8282\u70b9\u3002\u8bed\u53e5\u5c31\u662ftoken\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5219\uff08\u8bed\u6cd5\uff09\u7ec4\u6210\u7684\u53e5\u5b50\u3002</p>"},{"location":"monkey%E8%A7%A3%E9%87%8A%E5%99%A8/ast/#_2","title":"\u5982\u4f55\u6784\u5efa","text":""},{"location":"monkey%E8%A7%A3%E9%87%8A%E5%99%A8/ast/#_3","title":"\u7a0b\u5e8f\u8bed\u8a00\u7684\u8bed\u6cd5\u63cf\u8ff0","text":"<p>\u600e\u4e48\u628a\u8bed\u6cd5 \u7528\u7b80\u5355\u7684\u6570\u5b66\u7b26\u53f7\u8868\u793a\u51fa\u6765\u3002 \u5047\u8bbe $ \\Sigma $ \u662f\u4e00\u4e2a\u5b57\u6bcd\u8868\uff0c\u5176\u4e2d\u5b57\u6bcd\u7684\u6570\u91cf\u662f\u6709\u9650\u7684\u3002\u5b9a\u4e49\u4ece \\(\\Sigma\\) \u4e2d\u53d6 \\(n\\) \u6b21\u7b26\u53f7 $ \\left(n&gt;0\\right)$\uff0c\u4f9d\u6b21\u62fc\u6210\u7684\u4e32\uff0c\u53eb\u5b57\u6bcd\u8868\u4e0a\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e2a\u5b57\u6bcd\u8868\u80fd\u7ec4\u6210\u5f88\u591a\u7684\u5b57\u7b26\u4e32\uff0c\u7279\u522b\u5730\uff0c\u5f53 \\(n = 0\\) \u65f6\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u79f0\u4e3a\u7a7a\u4e32\uff0c\u8ba1\u4e3a $ \\varepsilon $ \u3002</p> <p>\u4e00\u4e2a\u5b57\u6bcd\u8868\u6216\u8005\u7b26\u53f7\u96c6\u5408\u4e0a\uff0c\u80fd\u6709\u591a\u5c11\u79cd\u5b57\u7b26\u4e32\uff1f\u7b54\u6848\u662f\u65e0\u7a77\u79cd\u3002 \u8fd9\u4e2a\u65e0\u7a77\u96c6\u5408\u8bb0\u4e3a \\(\\Sigma^*\\) \u3002 \u4f8b\u5982 \\(\\Sigma = \\left\\{a, b\\right\\}\\) \uff0c\u5219\u5bf9\u5e94\u7684\u65e0\u7a77\u96c6\u5408 \\(\\Sigma^* = \\left\\{\\varepsilon, a,b,aa,bb,ab, aaa, bbb, aab, aba ...\\right\\}\\) \u3002 \u5982\u679c\u4e00\u4e2a\u5b57\u6bcd\u8868\uff08\u7b26\u53f7\u96c6\u5408\uff09\u672c\u8eab\u5c31\u662f\u7a7a\u96c6\uff0c\u90a3\u4e48\u8be5\u96c6\u4e0a\u7684\u552f\u4e00\u5b57\u7b26\u4e32\u662f  \\(\\varepsilon\\) \uff0c\u4e5f\u5c31\u662f \\(\\Sigma =  \\left \\{ \\right \\}\\) \u5bf9\u5e94\u7684 \\(\\Sigma^* =  \\left \\{ \\varepsilon \\right \\}\\) \u3002\u7a7a\u96c6\u53ef\u4ee5\u7b80\u5199\u4e3a \\(\\phi\\) \u3002</p> <p>\u5bf9\u4e8e\u975e\u7a7a\u96c6 \\(\\Sigma \\ne \\phi\\) \u5b83\u7684\u7b26\u53f7\u4e32\u5168\u4f53\u96c6 \\(\\Sigma^*\\) \u662f\u4e00\u4e2a\u65e0\u7a77\u96c6\uff0c\u56e0\u4e3a \\(n\\) \u7684\u53d6\u503c\u65e0\u4e0a\u9650\u3002</p> <p>\u5047\u8bbe \\(U\\) \\(V\\) \u662f \\(\\Sigma\\) \u7684\u4e24\u4e2a\u5b50\u96c6\u3002 \uff08\u6ca1\u6709\u8bf4\u662f\u6709\u9650\u5b50\u96c6\u8fd8\u662f\u65e0\u7ebf\u5b50\u96c6\uff09\u3002</p>"},{"location":"monkey%E8%A7%A3%E9%87%8A%E5%99%A8/ast/#_4","title":"\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5","text":"<p>\u6587\u6cd5\uff0c\u5c31\u662f\u89c4\u5219\u3002 \u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\uff0c\u5c31\u662f\u53ea\u9700\u8981\u770b\u5199\u7684\u5185\u5bb9\u662f\u4e0d\u662f\u7b26\u5408\u8fd9\u4e2a\u89c4\u5219\u3002\u4e0d\u9700\u8981\u7ba1\u4e0a\u4e0b\u6587\u3002</p> <p>\u4e00\u4e2a\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5 \\(G\\) \u5305\u62ec\u56db\u4e2a\u90e8\u5206\uff1a\u4e00\u7ec4\u7ec8\u7ed3\u7b26\u53f7\u3001\u4e00\u7ec4\u975e\u7ec8\u7ed3\u7b26\u53f7\u3001\u4e00\u4e2a\u5f00\u59cb\u7b26\u53f7\u3001\u4e00\u7ec4\u4ea7\u751f\u5f0f\u3002</p> <p>\u7ec8\u7ed3\u7b26\u53f7\uff0c\u4e0d\u80fd\u518d\u5206\u7684\u5355\u5143\uff0ctoken\u3002\u6709\u5f88\u591a\u79cd\u7c7b\uff1a\u5173\u952e\u5b57\u3001\u6807\u8bc6\u7b26\u3001\u5b57\u9762\u91cf\u3001\u8fd0\u7b97\u7b26\u3001\u754c\u9650\u7b26\u3002</p> <p>\u975e\u7ec8\u7ed3\u7b26\u53f7\uff0c\u7b97\u672f\u8868\u8fbe\u5f0f\u3001\u5e03\u5c14\u8868\u8fbe\u5f0f\u3001\u8d4b\u503c\u8bed\u53e5\u3001\u51fd\u6570\u7b49\u3002\u603b\u4e4b\u4e0d\u662f\u7ec8\u7ed3\u7b26\u53f7\u90a3\u6837\u7684\u4e0d\u53ef\u518d\u5206\u7684\u4e1c\u897f\uff0c\u5e76\u4e14\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26\u53f7\u4ee3\u8868\u4e00\u4e2a\u7279\u5b9a\u7684\u8bed\u6cd5\u6982\u5ff5\u3002\uff08\uff1f\u62bd\u8c61\uff09\u3002 \u53ef\u4ee5\u7406\u89e3\u4e3a\u8981\u88ab\u62c6\u5206\u4e3a\u7ec8\u7ed3\u7b26\u53f7\u6765\u7406\u89e3\u7684\u7ec4\u5408\u5185\u5bb9\u3002</p> <p>\u5f00\u59cb\u7b26\u53f7\uff0c\u662f \u4e00\u4e2a \u7279\u6b8a\u7684\u975e\u7ec8\u7ed3\u7b26\u53f7\u3002</p> <p>\u4ea7\u751f\u5f0f\uff08\u4e5f\u53eb\u89c4\u5219\uff09</p> <p>\u4ea7\u751f\u5f0f\u7684\u5f62\u5f0f\uff1a $A \\to \\alpha $ \u5de6\u8fb9\u7684\u79f0\u4e3a\u5de6\u90e8\uff0c\u53f3\u8fb9\u7684\u79f0\u4e3a\u53f3\u90e8\u3002</p> <p>\u7bad\u5934\u5de6\u8fb9 \\(A\\) \u662f\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26\uff0c\u7bad\u5934\u53f3\u8fb9\u7684 \\(\\alpha\\) \u662f\u7531\u7ec8\u7ed3\u7b26\u53f7\uff08\u6216|\u4e0e\uff09\u975e\u7ec8\u7ed3\u7b26\u53f7\u7ec4\u6210\u7684\u7b26\u53f7\u4e32\u3002</p> <p>\u7bad\u5934\u53f3\u8fb9\uff0c\u53ef\u4ee5\u662f\u4e00\u4e2a\u7ec8\u7ed3\u7b26\u53f7\u3001\u4e5f\u53ef\u4ee5\u662f\u591a\u4e2a\u975e\u7ec8\u7ed3\u7b26\u53f7\u7684\u7ec4\u5408\u3001\u4e5f\u53ef\u4ee5\u662f\u7ec8\u7ed3\u7b26\u53f7\u548c\u975e\u7ec8\u7ed3\u7b26\u53f7\u7684\u7ec4\u5408\u3002</p> <p>\u53d8\u91cf\u662f\u4e00\u4e2a\u7b97\u672f\u8868\u8fbe\u5f0f\u3001\u7b97\u672f\u8868\u8fbe\u5f0f\u4e4b\u95f4\u7684\u56db\u5219\u8fd0\u7b97\u4e5f\u662f\u7b97\u662f\u8868\u8fbe\u5f0f\u3002</p> <p>$ E \\to i$ \u3002</p> <p>\u5176\u4e2d \\(i\\) \u8868\u793a\u53d8\u91cf\uff1b\u5de6\u90e8\u662f\u975e\u7ec8\u7ed3\u7b26\uff0c\u53f3\u90e8\u662f\u7ec8\u7ed3\u7b26\u53f7\u3002</p> <p>$ E \\to E + E$ \u3002</p> <p>\u53f3\u90e8\u662f\u975e\u7ec8\u7ed3\u7b26\u53f7(E)\u4e0e\u7ec8\u7ed3\u7b26\u53f7(+)\u7684\u7ec4\u5408\u3002</p> <p>$ E \\to E - E$ \u3002</p> <p>\u53f3\u90e8\u662f\u975e\u7ec8\u7ed3\u7b26\u53f7(E)\u4e0e\u7ec8\u7ed3\u7b26\u53f7(-)\u7684\u7ec4\u5408\u3002</p> <p>$ E \\to E * E$ \u3002</p> <p>\u53f3\u90e8\u662f\u975e\u7ec8\u7ed3\u7b26\u53f7(E)\u4e0e\u7ec8\u7ed3\u7b26\u53f7(*)\u7684\u7ec4\u5408\u3002</p> <p>$ E \\to E / E$ \u3002</p> <p>\u53f3\u90e8\u662f\u975e\u7ec8\u7ed3\u7b26\u53f7(E)\u4e0e\u7ec8\u7ed3\u7b26\u53f7(/)\u7684\u7ec4\u5408\u3002</p> <p>$ E \\to \\left( E \\right)$  </p> <p>\u53f3\u90e8\u975e\u7ec8\u7ed3\u7b26(E)\u4e0e\u7ec8\u7ed3\u7b26\u53f7\u62ec\u53f7\u201c\uff08\u201d,\u201c\uff09\u201d\u7684\u7ec4\u5408\u3002</p> <p>\u8868\u8fbe\u5f0f\u7684\u540e\u9762\u51e0\u4e2a\u90fd\u662f\u9012\u5f52\u7684\u3002</p> <p>\u4e00\u4e2a\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\uff0c\u53ef\u4ee5\u8868\u793a\u4e3a\u4e00\u4e2a\u56db\u5143\u5f0f  \\(\\left(V_t, V_n,S,\\Psi\\right)\\) \u3002 \\(V_t\\) \u662f\u975e\u7a7a\u6709\u9650\u96c6\uff0c\u662f\u7ec8\u7ed3\u7b26\u53f7\u3002\u7ec8\u7ed3\u7b26\u53f7\u5fc5\u987b\u975e\u7a7a\u3002 \\(V_n\\)\u662f\u975e\u7a7a\u6709\u9650\u96c6\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u975e\u7ec8\u7ed3\u7b26\u53f7\uff0c\\(V_t \\bigcap V_n = \\phi\\) \u3002 \\(S\\) \u662f\u975e\u7ec8\u7ed3\u7b26\u53f7\uff0c\u5f00\u59cb\u7b26\u53f7\u3002 \\(\\Psi\\) \u662f\u4ea7\u751f\u5f0f\u96c6\u5408\uff0c\u662f\u6709\u9650\u96c6\u5408\uff0c\u5bf9\u5e94\u4e86\u89c4\u5219\u3002\u6bcf\u4e2a\u4ea7\u751f\u5f0f\u7684\u5f62\u5f0f\u90fd\u662f \\(P \\to \\alpha\\) \uff0c\u5176\u4e2d\uff0c\\(P \\in V_n\\) \uff0c \\(\\alpha \\in \\left(V_t \\bigcup V_n\\right)^*\\)\uff0c\u5f00\u59cb\u7b26\u53f7 \\(S\\) \u5fc5\u987b\u5728\u67d0\u4e2a\u4ea7\u751f\u5f0f\u7684\u5de6\u8fb9\u51fa\u73b0\u4e00\u6b21\u3002</p> <p>\u82e5\u5e72\u4e2a\u5de6\u90e8\u76f8\u540c\u7684\u4ea7\u751f\u5f0f\uff0c\u53ef\u4ee5\u5408\u5e76\u4e3a\u4e00\u4e2a\u3002</p> <p>\\(P \\to \\alpha_1\\)</p> <p>\\(P \\to \\alpha_2\\)</p> <p>\\(P \\to \\alpha_3\\)</p> <p>\u53ef\u4ee5\u5408\u5e76\uff0c\u8868\u793a\u6216\uff0c\u4efb\u610f\u4e00\u4e2a\u90fd\u53ef\u4ee5</p> <p>$P \\to \\alpha_1\\mid \\alpha_2 \\mid \\alpha_3 $</p> <p>\u5927\u5199\u5b57\u6bcd\u8868\u793a\u975e\u7ec8\u7ed3\u7b26\uff0c\u5c0f\u5199\u5b57\u6bcd\u8868\u793a\u7ec8\u7ed3\u7b26\uff0c\u5e0c\u814a\u5b57\u6bcd\u8868\u793a\u7ec8\u7ed3\u7b26\u548c\u975e\u7ec8\u7ed3\u7b26\u7ec4\u6210\u7684\u7b26\u53f7\u4e32\u3002</p> <p>\u63a8\u5bfc\u3001\u53e5\u578b\u3001\u8bed\u8a00\u3002</p> <p>\u7b26\u53f7\u7ea6\u5b9a\uff0c\u4e00\u822c\u5927\u5199\u82f1\u6587\u5b57\u6bcd \\(ABC...\\) \u4ee3\u8868\u975e\u7ec8\u7ed3\u7b26\uff0c\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd \\(abc...\\) \u4ee3\u8868\u7ec8\u7ed3\u7b26\uff0c\u5e0c\u814a\u5b57\u6bcd \\(\\alpha \\beta \\gamma...\\)\u4ee3\u8868\u7ec8\u7ed3\u7b26\u548c\u975e\u7ec8\u7ed3\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u4ece\u4e00\u4e2a\u6587\u6cd5 \\(G\\) \u7684\u5f00\u59cb\u7b26\u53f7 \\(S\\) \u51fa\u53d1\uff0c\u53ef\u4ee5\u63a8\u5bfc\u51fa\u5f88\u591a\u53e5\u578b\uff0c\u53ea\u542b\u6709\u7ec8\u7ed3\u7b26\u7684\u53e5\u578b\u5c31\u662f\u53e5\u5b50\uff0c\u6587\u6cd5 \\(G\\) \u4ea7\u751f\u7684\u6240\u6709\u53e5\u5b50\u7684\u5168\u4f53\u7ec4\u6210\u4e00\u4e2a\u8bed\u8a00 \\(L(G)\\) \u3002</p> <p>\u5230\u4e86\u8fd9\u91cc\u4f60\u662f\u5426\u89c9\u5f97\u5b66\u4e60\u4e86\u4e00\u5806\u67af\u71e5\u7684\u6982\u5ff5\uff0c\u4e0d\u8981\u7740\u6025\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\u53ea\u9700\u8981\u77e5\u9053\u4ee5\u4e0b\u51e0\u4ef6\u4e8b\uff1a 1. \u6587\u6cd5\u662f\u901a\u8fc7\u4e00\u6761\u6761\u5730\u89c4\u5219\u6765\u4e66\u5199\u7684\uff0c\u6211\u4eec\u9700\u8981\u80fd\u770b\u61c2\u8fd9\u4e9b\u89c4\u5219\u3002 2. \u8fdb\u884c\u8bed\u6cd5\u5206\u6790\u7684\u65f6\u5019\u9700\u8981\u5bf9\u6bd4\u8fd9\u4e9b\u89c4\u5219\u3002</p>"},{"location":"monkey%E8%A7%A3%E9%87%8A%E5%99%A8/keyword/","title":"\u8bfb\u53d6\u5173\u952e\u5b57\u548c\u6807\u8bc6\u7b26","text":"<p>\u5173\u952e\u5b57\u662f\u6709\u9650\u7684\uff0c\u800c\u6807\u8bc6\u7b26\u662f\u65e0\u9650\u7684\u3002</p>"},{"location":"monkey%E8%A7%A3%E9%87%8A%E5%99%A8/keyword/#_2","title":"\u5173\u952e\u5b57\u548c\u6807\u8bc6\u7b26","text":"<p>\u5173\u952e\u5b57\u662f\u7f16\u7a0b\u8bed\u8a00\u4fdd\u7559\u7684\uff0c\u6570\u91cf\u6709\u9650\u7684\u4e00\u7cfb\u5217\u5355\u8bcd\u3002\u53ef\u4ee5\u7a77\u4e3e\uff0c\u56e0\u6b64\u8bc6\u522b\u5173\u952e\u5b57\u53ef\u4ee5\u4f7f\u7528\u548c\u4e0a\u4e00\u8282\u4e00\u6837\u7684\u679a\u4e3e\u5224\u65ad\u7684\u65b9\u5f0f\u3002 \u6807\u8bc6\u7b26\u662f\u7528\u6237\u5728\u7f16\u7a0b\u7684\u65f6\u5019\u6839\u636e\u81ea\u5df1\u7684\u9700\u8981\u4e34\u65f6\u8d77\u7684\u540d\u79f0\uff0c\u4f8b\u5982\u53d8\u91cf\u540d\uff0c\u51fd\u6570\u540d\u7b49\u7b49\uff0c\u6807\u8bc6\u7b26\u662f\u4e0d\u53ef\u679a\u4e3e\u7684\uff0c\u56e0\u6b64\u4e0d\u80fd\u7528\u4e0a\u9762\u7684\u529e\u6cd5\u9010\u4e00\u5224\u65ad\u3002</p> <p>\u5173\u952e\u5b57\u662f\u4e00\u8bcd\u4e00\u7801\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u540c\u7684\u5173\u952e\u5b57\u5bf9\u5e94\u4e0d\u540c\u7684token\uff0c\u4f8b\u5982<code>if</code>\u5bf9\u5e94\u4e00\u4e2atoken\uff0c\u8fd9\u4e2atoken\u53ea\u8868\u793a<code>if</code>\u5173\u952e\u5b57\uff0c\u8fd9\u548c\u8fd0\u7b97\u7b26\u662f\u4e00\u6837\u7684\u9053\u7406\uff0c<code>=</code>\u8d4b\u503c\u8fd0\u7b97\u7b26\u5bf9\u5e94\u4ed6\u81ea\u5df1\u7684token\uff0c\u90a3\u4e2atoken\u4e5f\u53ea\u552f\u4e00\u4ee3\u8868<code>=</code>\u8d4b\u503c\u7b26\u53f7\u3002\u6216\u8005\u6362\u53e5\u8bdd\u8bf4\uff0c\u6bcf\u4e2a\u5173\u952e\u5b57\u548c\u8fd0\u7b97\u7b26\u3001\u754c\u9650\u7b26\uff0c\u81ea\u6210\u4e00\u7c7b\u3002 \u800c\u6807\u8bc6\u7b26\u4e0d\u4e00\u6837\uff0c<code>abc</code>,<code>f1</code>,<code>add_two</code>,<code>findKthLargest</code>\u90fd\u662f\u6807\u8bc6\u7b26\uff0c\u6807\u8bc6\u7b26\u662f\u591a\u8bcd\u4e00\u7801\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u524d\u9762\u7684\u8fd9\u51e0\u4e2a\u5355\u8bcd\uff0c\u90fd\u662f\u6807\u8bc6\u7b26\u8fd9\u4e2a\u7c7b\u578b\uff0c\u53ea\u662f\u5c5e\u6027\u503c\u4e0d\u4e00\u6837\u3002</p> <p>token \u53ef\u4ee5\u8868\u793a\u4e3a &lt;\u79cd\u522b\u7801, \u5c5e\u6027\u503c&gt;, \u5982\u679c\u79cd\u522b\u7801\u53ef\u4ee5\u552f\u4e00\u786e\u5b9atoken\uff0c\u90a3\u4e48\u5c5e\u6027\u503c\u5c31\u53ef\u4ee5\u4e0d\u7528\u586b\uff0c\u5982\u679c\u5f88\u591a\u4e2atoken\u7684\u79cd\u522b\u7801\u90fd\u4e00\u6837\uff0c\u90a3\u5c31\u9700\u8981\u552f\u4e00\u7684\u5c5e\u6027\u503c\u6765\u533a\u5206\u3002</p>"},{"location":"monkey%E8%A7%A3%E9%87%8A%E5%99%A8/keyword/#_3","title":"\u8bc6\u522b\u5173\u952e\u5b57","text":"<p>\u8bc6\u522b\u5173\u952e\u5b57\u5c31\u662f\u679a\u4e3e\u5bf9\u6bd4\u7684\u8fc7\u7a0b\u3002</p>"},{"location":"monkey%E8%A7%A3%E9%87%8A%E5%99%A8/keyword/#_4","title":"\u8bc6\u522b\u6807\u8bc6\u7b26","text":"<p>\u901a\u8fc7\u524d\u9762\u7684\u7ec3\u4e60\uff0c\u754c\u9650\u7b26\u3001\u8fd0\u7b97\u7b26\u3001\u5173\u952e\u5b57\u90fd\u5df2\u7ecf\u80fd\u8bc6\u522b\u4e86\uff0c\u73b0\u5728\u6765\u8bc6\u522b\u6807\u8bc6\u7b26\u5427\uff01 \u6807\u8bc6\u7b26\u7684\u683c\u5f0f\u662f\u6709\u89c4\u5b9a\u7684\uff0c\u5728\u5f88\u591a\u9884\u8a00\u4e2d\uff0c\u6807\u8bc6\u7b26\u53ea\u80fd\u662f\uff1a\u5927\u5c0f\u5199\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u7684\u7ec4\u5408\uff0c\u4e14\u4e0d\u80fd\u662f\u6570\u5b57\u5f00\u5934\u3002 \u6211\u4eec\u505a\u4e00\u70b9\u7b80\u5316\uff0c\u89c4\u5b9a\u6807\u8bc6\u7b26\u5fc5\u987b\u662f\u7eaf\u5927\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\uff08\u8fd9\u662f\u4e3a\u4e86\u6211\u4eec\u5f97\u5b9e\u73b0\u65b9\u4fbf\uff0c\u540e\u9762\u53ef\u4ee5\u62d3\u5c55\u89c4\u5219\uff0c\u90a3\u65f6\u4e5f\u53ea\u9700\u8981\u7b80\u5355\u4fee\u6539\u8bcd\u6cd5\u5206\u6790\u5668\u5373\u53ef\uff09\u3002</p>"},{"location":"monkey%E8%A7%A3%E9%87%8A%E5%99%A8/scanner/","title":"\u8bcd\u6cd5\u89e3\u6790","text":"<p>\u65e0\u8bba\u662f\u7f16\u8bd1\u578b\u8fd8\u662f\u89e3\u91ca\u578b\u8bed\u8a00\uff0c\u4e3a\u4e86\u80fd\u591f\u628a\u7f16\u7a0b\u8bed\u8a00\u8f6c\u5316\u4e3a\u8ba1\u7b97\u673a\u80fd\u7406\u89e3\u7684\u5185\u5bb9\uff0c\u9996\u5148\u5c31\u8981\u5bf9\u7528\u6237\u8f93\u5165\u7684\u5185\u5bb9\u8fdb\u884c\u62c6\u5206\uff0c\u62c6\u5206\u7684\u7ed3\u679c\u5c31\u662ftoken\u3002 \u5b8c\u6210\u8fd9\u4ef6 \u8bc6\u522b\u3001\u62c6\u5206 \u4efb\u52a1\u7684\u4ee3\u7801\u6a21\u5757\uff0c\u5c31\u662f\u8bcd\u6cd5\u89e3\u6790\u5668\uff0c\u662f\u4e00\u79cd\u5904\u7406\u6587\u672c\uff08\u7b26\u5408\u7279\u5b9a\u8bed\u6cd5\u89c4\u5b9a\u7684\uff09\u7684\u5de5\u5177\u3002</p>"},{"location":"monkey%E8%A7%A3%E9%87%8A%E5%99%A8/scanner/#_2","title":"\u8bcd\u6cd5\u89e3\u6790\u5668","text":"<p>\u8bcd\u6cd5\u5206\u6790\u5668\u5f80\u5f80\u662f\u7f16\u8bd1\u6216\u8005\u89e3\u91ca\u7684\u7b2c\u4e00\u6b65\uff0c\u4ed6\u5c06\u6e90\u4ee3\u7801\u62bd\u8c61\u6210\u4e3atoken\u5e8f\u5217\u3002 \u8bcd\u6cd5\u5206\u6790\u5668\uff08lexer\uff09\u4e5f\u53eb\u8bcd\u6cd5\u5355\u5143\u751f\u6210\u5668\uff08tokenizer\uff09\u6216\u8005\u626b\u63cf\u5668\uff08scanner\uff09\u3002</p>"},{"location":"monkey%E8%A7%A3%E9%87%8A%E5%99%A8/scanner/#_3","title":"\u8bcd\u6cd5\u5206\u6790\u5668\u7684\u529f\u80fd","text":"<p>\u8bcd\u6cd5\u5206\u6790\u5668\u662f\u4e00\u4e9b\u4ee3\u7801\uff0c\u5b83\u4eec\u80fd\u591f\u5b9e\u73b0\u8fd9\u6837\u7684\u529f\u80fd\uff1a\u628a\u7528\u6237\u5199\u7684\u6e90\u4ee3\u7801\uff0c\u8f6c\u6362\u6210\u4e00\u5806\u8bcd\u6cd5\u5355\u5143\uff08token\uff09\u3002\u5c31\u50cf\u662f\u4f60\u5728\u7ffb\u8bd1\u6587\u8a00\u6587\u7684\u65f6\u5019\uff0c\u9996\u5148\u9700\u8981\u628a\u4e00\u53e5\u8bdd\u62c6\u5206\u6210\u4e3a\u8bb8\u591a\u4e0d\u53ef\u518d\u5206\u7684\u5355\u5143\u3002</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u4f60\u8981\u7ffb\u8bd1\u201c\u5ead\u6709\u6787\u6777\u6811\u201d\uff0c\u9996\u5148\u5c31\u8981\u628a\u8fd9\u53e5\u8bdd\u62c6\u5206\u4e3a <code>[\"\u5ead\",\"\u6709\",\"\u6787\u6777\",\"\u6811\"]</code> \u6216\u8005 <code>[\"\u5ead\",\"\u6709\",\"\u6787\u6777\u6811\"]</code>\uff0c\u4f60\u8981\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u62c6\u5206\uff0c\u5f97\u5230\u4e00\u4e2a\u5355\u8bcd\uff08\u6709\u7684\u5355\u8bcd\u5c31\u662f\u4e00\u4e2a\u5b57\uff09\u5e8f\u5217\uff0c\u800c\u4e0d\u5fc5\u5173\u5fc3\u8fd9\u53e5\u8bdd\u8868\u8fbe\u4ec0\u4e48\u610f\u601d\uff0c\u662f\u4e0d\u662f\u7b26\u5408\u53e4\u6c49\u8bed\u7684\u8bed\u6cd5\uff08\u8fd9\u662f\u540e\u9762\u7684\u8bed\u6cd5\u5206\u6790\u548c\u8bed\u4e49\u5206\u6790\u8981\u505a\u7684\u4e8b\u60c5\uff09\u3002</p>"},{"location":"monkey%E8%A7%A3%E9%87%8A%E5%99%A8/scanner/#_4","title":"\u8bcd\u6cd5\u89e3\u6790\u5c0f\u6848\u4f8b","text":"<p>\u5bf9\u4e8e\u4e00\u95e8\u50cf\u6837\u7684\u7f16\u7a0b\u8bed\u8a00\u5199\u7684\u4ee3\u7801\uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u8fd9\u4e00\u53e5\uff1a JavaScript<pre><code>// \u6ce8\u610f\u8fd9\u4e0d\u662f\u4efb\u4f55\u4e00\u79cd\u5df2\u7ecf\u5b58\u5728\u7684\u8bed\u8a00\uff0c\n// \u53ea\u662f\u6211\u81ea\u5df1\u89c4\u5b9a\u7684\u5047\u60f3\u8c61\u4e00\u79cd\u8bed\u8a00\u7684\u8bed\u6cd5\uff0c\u5c3d\u7ba1\u4ed6\u770b\u4e0a\u53bb\u6709\u8bb8\u591a\u5176\u4ed6\u8bed\u8a00\u7684\u5f71\u5b50\nlet x = 5 + 5;\n</code></pre> \u8fd9\u95e8\u8bed\u8a00\u7684\u8bcd\u6cd5\u89e3\u6790\u5668\u5e94\u8be5\u80fd\u8fa8\u8ba4\u51fa\uff1a \u6700\u5f00\u59cb\u6709\u4e00\u4e2a\u5173\u952e\u5b57let\uff0c\u7136\u540e\u662f\u4e00\u4e2a\u53d8\u91cf\u7684\u540d\u5b57x\uff0c\u540e\u9762\u662f\u8d4b\u503c\u7b26\u53f7=\uff0c\u52a0\u6cd5\u7b26\u53f7+\uff0c\u8fd8\u6709\u4e24\u4e2a\u6570\u5b575\u3002 \u8bcd\u6cd5\u89e3\u6790\u5668\u5e94\u8be5\u6309\u987a\u5e8f\u7ed9\u6211\u4eec\u8fd9\u6837\u7684\u7ed3\u679c\uff08token\u5e8f\u5217\uff09</p> Python<pre><code>[\n    LET, # \u5173\u952e\u5b57\uff0c\u8bed\u8a00\u89c4\u5b9a\u7684\uff0c\u4f8b\u5982if else while struct await func \u7b49\n    IDENTIFIER('x'), # \u6807\u8bc6\u7b26 \u53d8\u91cf\u540dx, abc student_age, \u51fd\u6570\u540d add, push_back\n    EQUAL_SIGN, # \u7b26\u53f7 + - * / % &amp; &gt; &lt; &lt;= || ? \u7b49\n    INTEGER(5), # \u6570\u5b57\u5b57\u9762\u91cf \n    PLUS_SIGN, \n    INTEGER(5),\n]\n</code></pre> <p>\u8fd9\u4e2a\u7ed3\u679c\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6210\u5458\uff0c\u90fd\u662f\u4e00\u4e2a\u8bcd\u6cd5\u5355\u5143token\uff0c\u6bcf\u4e00\u4e2a\u8bcd\u6cd5\u5355\u5143\uff0c\u90fd\u5728\u6e90\u4ee3\u7801\u4e2d\u6709\u5bf9\u5e94\u3002\u6bcf\u4e00\u4e2a\u8bcd\u6cd5\u5355\u5143token\u90fd\u6709\u81ea\u5df1\u7684\u7c7b\u578b\uff0c\u4e3b\u8981\u6709\u8fd9\u51e0\u7c7b</p> <ul> <li>\u5173\u952e\u5b57 \u2014\u2014\u2014 \u7531\u4e00\u95e8\u8bed\u8a00\u81ea\u5df1\u89c4\u5b9a\uff0c\u4e0d\u540c\u7684\u8bed\u8a00\u5173\u952e\u5b57\u8868\u4e0d\u540c\uff0c\u4f8b\u5982<code>c\u8bed\u8a00</code>\u7684<code>include typedef if else while goto</code> </li> <li>\u8fd0\u7b97\u7b26 \u52a0<code>+</code>\u51cf<code>-</code>\u4e58<code>*</code>\u9664<code>/</code>\uff0c\u53d6\u6a21<code>%</code>\uff0c\u4e0e<code>&amp;</code>\u6216<code>|</code>\u975e<code>^</code>\u5173\u7cfb\u8fd0\u7b97\uff0c\u5927\u4e8e\u7b49\u4e8e<code>&gt;=</code>, \u6709\u7684\u8bed\u8a00\u8fd8\u6709\u4e09\u5143\u8fd0\u7b97<code>\uff1f</code>\u7b26\u53f7\uff0c\u6307\u9488\u53d6\u503c\u7b26<code>-&gt;</code>\uff0c\u89e3\u5f15\u7528\u7b26<code>*</code>\u7b49</li> <li>\u754c\u9650\u7b26 <code>{} () [] &lt;&gt;</code> \u7b49, \u7528\u4e8e\u5728\u8bed\u53e5\u4e2d\u5212\u5206\u51fa\u5c0f\u7684\u4f5c\u7528\u57df\uff0c\u6216\u8005\u6570\u7ec4\u6839\u636e\u4e0b\u6807\u53d6\u503c\u7b49</li> <li>\u6807\u8bc6\u7b26 \u53d8\u91cf\u540d<code>x y z abc p_name</code>\uff0c\u51fd\u6570\u540d<code>func add getEventLoop</code>\u7b49</li> <li>\u5b57\u9762\u91cf \u5199\u4e00\u4e2a\u6570\u5b57 <code>42, 0, 0xfff, 3.24</code> \u6216\u8005\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>\"man out!\"</code></li> </ul> <p>\u8fd9\u4e9b\u7c7b\u578b\u7684token\u518d\u52a0\u4e0a\u4e00\u4e9b\u7a7a\u683c\u6362\u884c\uff0c\u6ce8\u91ca\u7b49\uff0c\u5927\u6982\u5c31\u662f\u4e00\u95e8\u8bed\u8a00\u4e2d\u4f60\u80fd\u5199\u7684\u6240\u6709\u4e1c\u897f\u3002</p>"},{"location":"monkey%E8%A7%A3%E9%87%8A%E5%99%A8/scanner/#_5","title":"\u603b\u7ed3","text":"<p>\u8bcd\u6cd5\u89e3\u6790\u5668\u7684\u529f\u80fd\u548c\u76ee\u6807\uff1a\u5c06\u7b26\u5408\u67d0\u4e00\u95e8\u8bed\u8a00\u89c4\u5219\u7684\u6587\u672c\u6e90\u4ee3\u7801\uff0c\u8f6c\u6362\u6210token\u5e8f\u5217\u3002</p> <p>token\u5e8f\u5217\u7684\u79cd\u7c7b\uff1a\u5173\u952e\u5b57\u3001\u6807\u8bc6\u7b26\u3001\u754c\u9650\u7b26\u3001\u8fd0\u7b97\u7b26\u3001\u5b57\u9762\u91cf\u3002</p>"},{"location":"monkey%E8%A7%A3%E9%87%8A%E5%99%A8/signal/","title":"\u8bfb\u53d6\u5b57\u7b26\uff0c\u5224\u65ad\u662f\u4e0d\u662f\u754c\u9650\u7b26\u548c\u8fd0\u7b97\u7b26","text":""},{"location":"monkey%E8%A7%A3%E9%87%8A%E5%99%A8/signal/#_2","title":"\u8bfb\u53d6\u5b57\u7b26","text":"<ol> <li>\u8ba9\u8bcd\u6cd5\u89e3\u6790\u5668\u80fd\u591f\u8bfb\u53d6\u5b57\u7b26 \u8bf7\u5199\u4e00\u6bb5\u4ee3\u7801\uff0c\u6bcf\u6b21\u80fd\u591f\u8bfb\u53d6\u5b57\u7b26\u4e32\u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u5e76\u6253\u5370\u51fa\u6765     Python<pre><code>s = \"let x = 5; x = x + 7;\"\nfor c in range(len(s)):\n    print(c)\n</code></pre>     \u8fd9\u6837\u5199\u53ef\u4ee5\u5b9e\u73b0\u904d\u5386\u8fdc\u5417\u5b57\u7b26\u4e32\u7684\u529f\u80fd\uff0c\u4f46\u662f\u60f3\u4e00\u4e0b\uff0c\u6709\u65f6\u5019\u6211\u4eec\u9700\u8981\u8bc6\u522b\u7684\u4e0d\u662f\u5355\u4e2a\u5b57\u7b26\uff0c\u800c\u662f\u4e00\u4e2a\u5355\u8bcd\u3002\u8fd9\u6837\u6309\u7167\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u6765\u904d\u5386\uff0c\u5c31\u4e0d\u662f\u4e00\u4e2a\u660e\u667a\u7684\u505a\u6cd5\u4e86\u3002     Python<pre><code># \u7b80\u5355\u7684\u5b9e\u73b0 \u4e0d\u7528oop\ns = \"let x = 5; x = x + 7;\"\ncur_pos, next_pos = -1, 0\ncur_ch = ''\nread_ch = []\nwhile next_pos &lt; len(s):\n    cur_ch = s[next_pos]\n    read_ch.append(cur_ch)\n    cur_pos = next_pos\n    next_pos += 1\nprint(cur_ch)\n</code></pre></li> </ol>"},{"location":"monkey%E8%A7%A3%E9%87%8A%E5%99%A8/signal/#_3","title":"\u53ef\u7a77\u4e3e\u4e0e\u4e0d\u53ef\u7a77\u4e3e","text":"<p>\u8fd0\u7b97\u7b26\u548c\u754c\u9650\u7b26\uff0c\u5728\u4e00\u95e8\u7279\u5b9a\u7684\u8bed\u8a00\u4e2d\uff0c\u6570\u91cf\u662f\u6709\u9650\u7684\uff0c\u5728\u4e0a\u9762\u7684\u8bfb\u53d6\u5b57\u7b26\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u52a0\u4e00\u4e9b\u903b\u8f91\uff1a\u6bcf\u8bfb\u4e00\u4e2a\u5c31\u5224\u65ad\u4e00\u4e0b\u662f\u4e0d\u662f\u67d0\u4e2a\u754c\u9650\u7b26\u6216\u8005\u8fd0\u7b97\u7b26\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8bc6\u522b\u51fa\u6240\u6709\u7684\u8fd0\u7b97\u7b26\u548c\u754c\u9650\u7b26\u3002 Python<pre><code># \u7b80\u5355\u7684\u5b9e\u73b0 \u4e0d\u7528oop\ns = \"let x = 5; x = x + 7;\"\ncur_pos, next_pos = -1, 0\ncur_ch = ''\nread_ch = []\nwhile next_pos &lt; len(s):\n    cur_ch = s[next_pos]\n    if cur_ch in ['=', '+', '(', ')', '{', '}']:  # \u53ef\u4ee5\u62d3\u5c55\u8fd9\u4e2a\u5217\u8868\uff0c\u5b8c\u5168\u53d6\u51b3\u4e8e\u5982\u4f55\u7ea6\u5b9a\n        read_ch.append(cur_ch)\n    cur_pos = next_pos\n    next_pos += 1\nprint(read_ch)\n</code></pre> \u8bf7\u6ce8\u610f\u6211\u4eec\u53ef\u4ee5\u9010\u4e00\u5224\u65ad\u7684\u7406\u7531\u662f\uff1a\u754c\u9650\u7b26\u548c\u8fd0\u7b97\u7b26\u672c\u8eab\u662f\u6709\u9650\u7684\u3002\u76f8\u53cd\uff0c\u5bf9\u4e8e\u6807\u8bc6\u7b26\u4f8b\u5982\u53d8\u91cf\u540d\uff0c\u4ed6\u4eec\u662f\u6ca1\u6709\u6570\u91cf\u9650\u5236\u6216\u8005\u6570\u91cf\u592a\u591a\u7684\uff0c\u4f60\u53ef\u4ee5\u8d77\u4efb\u610f\u5408\u6cd5\u7684\u53d8\u91cf\u540d\uff0c\u6211\u4eec\u4e0d\u80fd\u5199\u4e00\u5806case\u6765\u5224\u65ad\u8fd9\u4e2a\u5b57\u6bcd\u662f\u4e0d\u662f<code>a</code> \u662f\u4e0d\u662f<code>b</code>...</p> <p>\u589e\u52a0\u4e86\u5224\u65ad\u7684\u903b\u8f91\u4e4b\u540e\uff0c\u6211\u4eec\u5f97\u8bcd\u6cd5\u5206\u6790\u5668\u53ef\u4ee5\u5224\u65ad\u754c\u9650\u7b26\u548c\u8fd0\u7b97\u7b26\u4e86\uff0c\u4f46\u662f\u6ca1\u6709\u5224\u65ad\u5176\u4ed6\u7c7b\u578b\u4f8b\u5982\u6807\u8bc6\u7b26\uff0c\u5173\u952e\u5b57\u548c\u5b57\u9762\u91cf\u7684\u80fd\u529b\u3002</p>"},{"location":"monkey%E8%A7%A3%E9%87%8A%E5%99%A8/signal/#_4","title":"\u5224\u65ad\u7b26\u53f7\uff08\u754c\u9650\u7b26\u548c\u8fd0\u7b97\u7b26\uff09","text":"<ol> <li>\u8ba9\u8bcd\u6cd5\u89e3\u6790\u5668\u80fd\u591f\u8bc6\u522b\u8fd0\u7b97\u7b26\u3001\u754c\u9650\u7b26 \u8bf7\u5199\u4e00\u6bb5\u4ee3\u7801\uff0c\u5982\u679c\u9047\u5230 <code>=+,;(){}</code> \u8fd9\u4e9b\u8fd0\u7b97\u7b26\u548c\u754c\u9650\u7b26\uff0c\u5c31\u5f53\u505atoken\u6309\u987a\u5e8f\u4fdd\u5b58\u8d77\u6765\uff0c\u5176\u4ed6\u7684\u5b57\u7b26\u76f4\u63a5\u4e22\u5f03     \u6709\u4e86\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u5f97\u7b2c\u4e8c\u4e2a\u7f16\u7a0b\u7ec3\u4e60\u5b9e\u9645\u4e0a\u5df2\u7ecf\u88ab\u56de\u7b54\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u8fd9\u4e9b\u53ef\u7a77\u4e3e\u7684\u8fd0\u7b97\u7b26\u548c\u754c\u9650\u7b26\u9010\u4e00\u5224\u65ad\u5373\u53ef\u3002     Python<pre><code># \u4f7f\u7528\u7b80\u5355\u7684for\u904d\u5386\u5b57\u7b26\u4e32\ntokens = []\ns = \"{x =x+1}\"\nfor c in range(len(s)):\n    if c == '=':\n        tokens.append('=')\n    elif c == ';':\n        tokens.append(';')\n    elif c == '{':\n        tokens.append('{')\n    ...  # \u6211\u4eec\u8981\u628a\u6240\u6709\u9700\u8981\u8bc6\u522b\u7684\u5b57\u7b26\u90fd\u5217\u51fa\u6765\uff08\u53ef\u4ee5\u4f7f\u7528switch case\u7b80\u5316\uff09\n    else:\n        print('other, drop.')\nprint(tokens)\n</code></pre>     \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5b57\u5178\uff0c\u4f46\u65e0\u8bba\u5982\u4f55\u8fd9\u6bb5\u4ee3\u7801\u53ea\u80fd\u8bc6\u522b\u53ef\u7a77\u4e3e\u7684\u754c\u9650\u7b26\u548c\u8fd0\u7b97\u7b26\uff0c\u9488\u5bf9\u5173\u952e\u5b57\u548c\u6807\u8bc6\u7b26\u65e0\u80fd\u4e3a\u529b\uff1b\u4e0d\u8fc7\u5728\u4e0b\u4e00\u8282\u5bf9\u4ee3\u7801\u7a0d\u52a0\u6539\u8fdb\uff0c\u6211\u4eec\u5c06\u53ef\u4ee5\u8bc6\u522b\u5173\u952e\u5b57\u548c\u6807\u8bc6\u7b26\u3002</li> </ol>"},{"location":"monkey%E8%A7%A3%E9%87%8A%E5%99%A8/task/","title":"\u8bcd\u6cd5\u5206\u6790\u5668\uff1a\u4e00\u6b65\u6b65\u5b9e\u73b0","text":"<p>\u6734\u7d20\u7684\u60f3\u6cd5\u5c31\u662f\u628a\u6e90\u4ee3\u7801\u5f53\u505a\u5b57\u7b26\u4e32\u53bb\u626b\u63cf\uff0c\u6b63\u5982\u201c\u626b\u63cf\u5668\u201d\u8fd9\u4e2a\u540d\u79f0\u6697\u793a\u7684\u90a3\u6837\u3002 \u8fd9\u91cc\u6211\u6253\u7b97\u7528\u4e00\u4e9b\u5c0f\u5c0f\u7684\u7f16\u7a0b\u7ec3\u4e60\u6765\u5f15\u5165\uff0c\u4e00\u6b65\u4e00\u6b65\u5730\u6dfb\u52a0\u529f\u80fd\uff0c\u76f4\u5230\u5b9e\u73b0\u4e00\u4e2a\u7b80\u964b\u7684\u8bcd\u6cd5\u89e3\u6790\u5668\u3002</p>"},{"location":"monkey%E8%A7%A3%E9%87%8A%E5%99%A8/task/#_2","title":"\u6b65\u9aa4","text":"<p>\u6bcf\u4e2a\u5c0f\u7ec3\u4e60\u90fd\u4f1a\u8ba9\u6211\u4eec\u7684\u8bcd\u6cd5\u89e3\u6790\u5668\u591a\u4e00\u70b9\u529f\u80fd\uff0c\u5982\u4f55\u7406\u89e3 \u201c\u6bcf\u4e00\u6b65\u591a\u4e00\u70b9\u529f\u80fd\u201d \u5462\uff1f\u8fd8\u8bb0\u5f97\u4e0a\u4e00\u8282\u6211\u4eec\u8c08\u5230\u4e86token\u7684\u7c7b\u578b\u5417\uff1f</p> <p>\u5728\u4e00\u95e8\u8bed\u8a00\u4e2d\uff0c\u9664\u53bb\u6ce8\u91ca\uff0c\u65e0\u6548\u7684\u7a7a\u683c\u7b49\u5185\u5bb9\uff08\u56e0\u4e3a\u4ed6\u4eec\u5e76\u4e0d\u662f\u5fc5\u8981\u7684\uff0c\u4e5f\u4e0d\u9700\u8981\u53d8\u6210token\uff09\uff0c\u6211\u4eec\u80fd\u5199\u7684\u5185\u5bb9\u5927\u81f4\u5206\u4e3a\u4ee5\u4e0b\u51e0\u7c7b\uff1a</p> <ul> <li>\u5173\u952e\u5b57 \u2014\u2014\u2014 \u7531\u4e00\u95e8\u8bed\u8a00\u81ea\u5df1\u89c4\u5b9a\uff0c\u4e0d\u540c\u7684\u8bed\u8a00\u5173\u952e\u5b57\u8868\u4e0d\u540c\uff0c\u4f8b\u5982<code>c\u8bed\u8a00</code>\u7684<code>include typedef if else while goto</code> </li> <li>\u8fd0\u7b97\u7b26 \u52a0<code>+</code>\u51cf<code>-</code>\u4e58<code>*</code>\u9664<code>/</code>\uff0c\u53d6\u6a21<code>%</code>\uff0c\u4e0e<code>&amp;</code>\u6216<code>|</code>\u975e<code>^</code>\u5173\u7cfb\u8fd0\u7b97\uff0c\u5927\u4e8e\u7b49\u4e8e<code>&gt;=</code>, \u6709\u7684\u8bed\u8a00\u8fd8\u6709\u4e09\u5143\u8fd0\u7b97<code>\uff1f</code>\u7b26\u53f7\uff0c\u6307\u9488\u53d6\u503c\u7b26<code>-&gt;</code>\uff0c\u89e3\u5f15\u7528\u7b26<code>*</code>\u7b49</li> <li>\u754c\u9650\u7b26 <code>{} () [] &lt;&gt;</code> \u7b49, \u7528\u4e8e\u5728\u8bed\u53e5\u4e2d\u5212\u5206\u51fa\u5c0f\u7684\u4f5c\u7528\u57df\uff0c\u6216\u8005\u6570\u7ec4\u6839\u636e\u4e0b\u6807\u53d6\u503c\u7b49</li> <li>\u6807\u8bc6\u7b26 \u53d8\u91cf\u540d<code>x y z abc p_name</code>\uff0c\u51fd\u6570\u540d<code>func add getEventLoop</code>\u7b49</li> <li>\u5b57\u9762\u91cf \u5199\u4e00\u4e2a\u6570\u5b57 <code>42, 0, 0xfff, 3.24</code> \u6216\u8005\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>\"man out!\"</code></li> </ul> <p>\u201c\u6bcf\u4e00\u6b65\u591a\u4e00\u70b9\u529f\u80fd\u201d \u5c31\u662f\u6307\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u65ad\u5730\u5347\u7ea7\u6211\u4eec\u5f97\u8bcd\u6cd5\u89e3\u6790\u5668\u4ee3\u7801\uff0c\u8ba9\u5b83\u4ece \u4e0d\u80fd\u8bc6\u522b \u4e0a\u9762\u6240\u5217\u7c7b\u578b\u7684\u4efb\u4f55\u4e00\u79cd\u7684\u72b6\u6001\uff0c\u5230\u80fd\u591f\u8bc6\u522b\u4e00\u79cd\u3001\u4e24\u79cd\u751a\u81f3\u5168\u90e8\u7684\u72b6\u6001\u3002</p> <p>\u4e0b\u9762\u5148\u5c55\u793a\u51fa\u8fd9\u4e9b\u5c0f\u7ec3\u4e60\u3002</p> <ol> <li> <p>\u8ba9\u8bcd\u6cd5\u89e3\u6790\u5668\u80fd\u591f\u8bfb\u53d6\u5b57\u7b26 \u8bf7\u5199\u4e00\u6bb5\u4ee3\u7801\uff0c\u6bcf\u6b21\u80fd\u591f\u8bfb\u53d6\u5b57\u7b26\u4e32\u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u5e76\u6253\u5370\u51fa\u6765</p> <p>\u53ef\u4ee5\u76f4\u63a5\u904d\u5386\u5b57\u7b26\u4e32\uff0c\u4f46\u8bf7\u60f3\u4e00\u60f3\u4f1a\u4e0d\u4f1a\u7ed9\u540e\u9762\u5e26\u6765\u4e0d\u4fbf\uff1f</p> </li> <li> <p>\u8ba9\u8bcd\u6cd5\u89e3\u6790\u5668\u80fd\u591f\u8bc6\u522b\u8fd0\u7b97\u7b26\u3001\u754c\u9650\u7b26 \u8bf7\u5199\u4e00\u6bb5\u4ee3\u7801\uff0c\u5982\u679c\u9047\u5230 <code>=+,;(){}</code> \u8fd9\u4e9b\u8fd0\u7b97\u7b26\u548c\u754c\u9650\u7b26\uff0c\u5c31\u5f53\u505atoken\u6309\u987a\u5e8f\u4fdd\u5b58\u8d77\u6765\uff0c\u5176\u4ed6\u7684\u5b57\u7b26\u76f4\u63a5\u4e22\u5f03</p> <p>\u662f\u4e0d\u662f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528<code>if</code>\u5224\u65ad\u67d0\u4e2a\u8bfb\u51fa\u7684\u5b57\u7b26\u662f\u4e0d\u662f<code>=</code>,\u662f\u4e0d\u662f<code>{</code>\uff1f...</p> </li> <li> <p>\u8ba9\u8bcd\u6cd5\u89e3\u6790\u5668\u80fd\u591f\u8bc6\u522b\u5173\u952e\u5b57\u548c\u6807\u8bc6\u7b26 \u5b8c\u55842\uff0c\u4f7f\u4e4b\u80fd\u591f\u8bc6\u522b\u5173\u952e\u5b57<code>let</code>,\u548c\u6807\u8bc6\u7b26<code>xyz</code>, <code>add</code>, ...</p> <p>\u5f53\u53d1\u73b0\u662f\u5b57\u6bcd\u5f00\u5934\u65f6\uff0c\u8981\u5f80\u540e\u8bfb\u53d6\u76f4\u5230\u9047\u5230\u975e\u5b57\u6bcd\uff0c\u518d\u5224\u65ad\u8fd9\u4e2a\u8fde\u7eed\u7684\u5b57\u7b26\u5e8f\u5217\u662f\u6807\u8bc6\u7b26\u8fd8\u662f\u5173\u952e\u5b57\u3002</p> </li> <li> <p>\u8ba9\u8bcd\u6cd5\u89e3\u6790\u5668\u80fd\u591f\u8bc6\u522b\u6574\u6570\u5b57\u9762\u91cf \u5b8c\u55843\uff0c\u4f7f\u4e4b\u80fd\u591f\u8bc6\u522b\u6574\u6570\u5b57\u9762\u91cf</p> <p>\u5982\u679c\u5b57\u7b26\u662f\u6570\u5b57\u5b57\u7b26\uff0c\u5c31\u7ee7\u7eed\u8bfb\u53d6\u76f4\u5230\u9047\u5230\u975e\u5b57\u7b26\uff0c\u518d\u628a\u8fd9\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570\u3002</p> </li> </ol>"},{"location":"monkey%E8%A7%A3%E9%87%8A%E5%99%A8/express_cal/readme/","title":"Readme","text":"<p>\u8868\u8fbe\u5f0f\u6c42\u503c \u662f\u8bed\u6cd5\u5206\u6790\u7684\u7b80\u5355\u5f00\u59cb\uff0c\u5148\u4ece\u8fd9\u4e2a\u5c0f\u4f8b\u5b50\u4f53\u4f1a\u8bed\u6cd5\u5206\u6790\u5728\u5e72\u4ec0\u4e48</p> <p>\u8868\u8fbe\u5f0f\u6c42\u503c</p>"},{"location":"python/bisect_test/","title":"Bisect test","text":"<p>python\u7684 bisect_left \u7684\u5b9e\u73b0</p> Python<pre><code>def bisect_right(a, x, lo=0, hi=None):\n    \"\"\"Return the index where to insert item x in list a, assuming a is sorted.\n\n    The return value i is such that all e in a[:i] have e &lt;= x, and all e in\n    a[i:] have e &gt; x.  So if x already appears in the list, a.insert(x) will\n    insert just after the rightmost x already there.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    \"\"\"\n\n    if lo &lt; 0:\n        raise ValueError('lo must be non-negative')\n    if hi is None:\n        hi = len(a)\n    while lo &lt; hi:\n        mid = (lo+hi)//2\n        # Use __lt__ to match the logic in list.sort() and in heapq\n        if x &lt; a[mid]: hi = mid\n        else: lo = mid+1\n    return lo\n</code></pre>"},{"location":"python/defaultdict_use/","title":"defaultdict","text":"<p>Python \u7684 <code>defaultdict</code> \u662f <code>collections</code> \u6a21\u5757\u4e2d\u7684\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u662f\u5b57\u5178\uff08<code>dict</code>\uff09\u7684\u4e00\u4e2a\u5b50\u7c7b\u3002<code>defaultdict</code> \u7684\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\uff0c\u5f53\u4f60\u5c1d\u8bd5\u8bbf\u95ee\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u952e\u65f6\uff0c\u5b83\u4e0d\u4f1a\u629b\u51fa <code>KeyError</code>\uff0c\u800c\u662f\u4f1a\u4f7f\u7528\u4e00\u4e2a\u9ed8\u8ba4\u503c\uff0c\u8fd9\u4e2a\u9ed8\u8ba4\u503c\u7531\u4f60\u63d0\u4f9b\u7684\u4e00\u4e2a\u5de5\u5382\u51fd\u6570\u751f\u6210\u3002</p> <p>\u4ee5\u4e0b\u662f <code>defaultdict</code> \u7684\u57fa\u672c\u7528\u6cd5\uff1a</p>"},{"location":"python/defaultdict_use/#defaultdict","title":"\u5bfc\u5165 <code>defaultdict</code>","text":"Python<pre><code>from collections import defaultdict\n</code></pre>"},{"location":"python/defaultdict_use/#defaultdict_1","title":"\u521b\u5efa <code>defaultdict</code>","text":"<p>\u521b\u5efa <code>defaultdict</code> \u65f6\uff0c\u4f60\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u5de5\u5382\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5728\u5b57\u5178\u4e2d\u9700\u8981\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u952e\u65f6\u88ab\u8c03\u7528\u3002</p> Python<pre><code># \u4f7f\u7528 list \u4f5c\u4e3a\u9ed8\u8ba4\u5de5\u5382\u51fd\u6570\ndd = defaultdict(list)\n</code></pre>"},{"location":"python/defaultdict_use/#defaultdict_2","title":"\u4f7f\u7528 <code>defaultdict</code>","text":"Python<pre><code># \u6dfb\u52a0\u5143\u7d20\ndd['key1'].append(1)  # \u56e0\u4e3a 'key1' \u4e0d\u5b58\u5728\uff0c\u6240\u4ee5\u9996\u5148\u4f1a\u521b\u5efa 'key1' \u5e76\u7528 [] \u4f5c\u4e3a\u9ed8\u8ba4\u503c\ndd['key1'].append(2)\n\n# \u8bbf\u95ee\u5143\u7d20\nprint(dd['key1'])  # \u8f93\u51fa: [1, 2]\n\n# \u5c1d\u8bd5\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u952e\nprint(dd['key2'])  # \u8f93\u51fa: []\uff0c\u56e0\u4e3a 'key2' \u4e0d\u5b58\u5728\uff0c\u6240\u4ee5\u4f7f\u7528\u9ed8\u8ba4\u7684 [] \u4f5c\u4e3a\u503c\n</code></pre>"},{"location":"python/defaultdict_use/#_1","title":"\u5e38\u7528\u7684\u9ed8\u8ba4\u5de5\u5382\u51fd\u6570","text":"<ul> <li><code>list</code>: \u5f53\u4f60\u60f3\u8981\u4e00\u4e2a\u5217\u8868\u4f5c\u4e3a\u9ed8\u8ba4\u503c\u65f6\u3002</li> <li><code>set</code>: \u5f53\u4f60\u60f3\u8981\u4e00\u4e2a\u96c6\u5408\u4f5c\u4e3a\u9ed8\u8ba4\u503c\u65f6\u3002</li> <li><code>int</code>: \u5f53\u4f60\u60f3\u8981\u4e00\u4e2a\u6574\u6570\u4f5c\u4e3a\u9ed8\u8ba4\u503c\u65f6\uff0c\u901a\u5e38\u8bbe\u7f6e\u4e3a <code>int()</code>\uff0c\u5b83\u8fd4\u56de0\u3002</li> <li><code>str</code>: \u5f53\u4f60\u60f3\u8981\u4e00\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u9ed8\u8ba4\u503c\u65f6\uff0c\u901a\u5e38\u8bbe\u7f6e\u4e3a <code>str()</code>\uff0c\u5b83\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32<code>''</code>\u3002</li> <li><code>dict</code>: \u5f53\u4f60\u60f3\u8981\u4e00\u4e2a\u5b57\u5178\u4f5c\u4e3a\u9ed8\u8ba4\u503c\u65f6\u3002</li> </ul>"},{"location":"python/defaultdict_use/#set","title":"\u793a\u4f8b\uff1a\u4f7f\u7528 <code>set</code> \u4f5c\u4e3a\u9ed8\u8ba4\u5de5\u5382\u51fd\u6570","text":"Python<pre><code>from collections import defaultdict\n\n# \u4f7f\u7528 set \u4f5c\u4e3a\u9ed8\u8ba4\u5de5\u5382\u51fd\u6570\ndd = defaultdict(set)\n\n# \u6dfb\u52a0\u5143\u7d20\ndd['key1'].add('value1')\ndd['key2'].add('value2')\n\n# \u8bbf\u95ee\u5143\u7d20\nprint(dd['key1'])  # \u8f93\u51fa: {'value1'}\nprint(dd['key2'])  # \u8f93\u51fa: {'value2'}\n\n# \u5c1d\u8bd5\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u952e\nprint(dd['key3'])  # \u8f93\u51fa: set()\uff0c\u56e0\u4e3a 'key3' \u4e0d\u5b58\u5728\uff0c\u6240\u4ee5\u4f7f\u7528\u9ed8\u8ba4\u7684 set() \u4f5c\u4e3a\u503c\n</code></pre>"},{"location":"python/defaultdict_use/#defaultdict_3","title":"\u4e3a\u4ec0\u4e48\u4f7f\u7528 <code>defaultdict</code>\uff1f","text":"<p>\u4f7f\u7528 <code>defaultdict</code> \u53ef\u4ee5\u907f\u514d\u5728\u8bbf\u95ee\u5b57\u5178\u65f6\u51fa\u73b0 <code>KeyError</code>\uff0c\u5e76\u4e14\u53ef\u4ee5\u7b80\u5316\u4ee3\u7801\uff0c\u7279\u522b\u662f\u5728\u4f60\u9700\u8981\u521d\u59cb\u5316\u5b57\u5178\u4e2d\u7684\u6bcf\u4e2a\u952e\u4e3a\u7279\u5b9a\u7c7b\u578b\u7684\u503c\u65f6\u3002</p>"},{"location":"python/defaultdict_use/#_2","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ul> <li><code>defaultdict</code> \u7684\u9ed8\u8ba4\u503c\u662f\u901a\u8fc7\u5de5\u5382\u51fd\u6570\u751f\u6210\u7684\uff0c\u6bcf\u6b21\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u952e\u65f6\u90fd\u4f1a\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u6240\u4ee5\u5982\u679c\u8fd9\u4e2a\u51fd\u6570\u6709\u526f\u4f5c\u7528\uff0c\u5b83\u53ef\u80fd\u4f1a\u5f71\u54cd\u4f60\u7684\u7a0b\u5e8f\u3002</li> <li>\u4f7f\u7528 <code>defaultdict</code> \u65f6\uff0c\u8981\u786e\u4fdd\u63d0\u4f9b\u7684\u5de5\u5382\u51fd\u6570\u5728\u6bcf\u6b21\u8c03\u7528\u65f6\u90fd\u80fd\u751f\u6210\u76f8\u540c\u7684\u521d\u59cb\u503c\u3002</li> </ul>"},{"location":"python/for_i_in/","title":"\u6539\u8fed\u4ee3\u5668","text":"<p>\u8fd9\u6837\u4fee\u6539\u6570\u7ec4\u7684\u503c\uff0c\u662f\u9519\u8bef\u7684\u65b9\u5f0f Python<pre><code>nums = [2, 4, 5, 7, 9]\nfor i in nums:\n    i = 7\nprint(nums)\n</code></pre> <code>i = 7</code>\u53ea\u662f\u8ba9\u539f\u5148\u6307\u5411\u8fed\u4ee3\u5668\u629b\u51fa\u5bf9\u8c61\u7684\u53d8\u91cfi\uff0c\u8f6c\u800c\u6307\u5411\u53e6\u4e00\u4e2a\u5bf9\u8c617\uff0c\u800c\u539f\u5148\u7684\u8fed\u4ee3\u5668\u7ed9\u51fa\u7684\u5bf9\u8c61\u4e0d\u53d7\u5f71\u54cd</p>"},{"location":"python/func/","title":"\u5728\u51fd\u6570\u91cc\u8be5\u53c2\u6570\u7684\u6307\u5411","text":""},{"location":"python/func/#python","title":"python\u7684\u51fd\u6570\u53c2\u6570\u4f20\u9012\u4e86\u4ec0\u4e48\uff1f","text":"<p>Python<pre><code>&gt;&gt;&gt; a = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n&gt;&gt;&gt; def func(p):\n...     p = p[1]\n...\n&gt;&gt;&gt; a\n[[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n&gt;&gt;&gt; func(a)\n&gt;&gt;&gt; a\n[[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n</code></pre> \u51fd\u6570\u7684\u53c2\u6570p, \u5c31\u662f\u628a\u53c2\u6570a\u7684\u5730\u5740\u653e\u5230\u4e86p\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u91cc\u9762\uff0c\u5728\u51fd\u6570\u91cc\u9762\u4fee\u6539p\u7684\u503c \u53ea\u662f\u628a\u5bc4\u5b58\u5668\u7684\u503c\u6539\u4e3a\u5176\u4ed6\u7684\u503c\uff0c\u5bf9\u539f\u6765\u7684a\u6307\u5411\u54ea\u91cc\u5e76\u6ca1\u6709\u5f71\u54cd\u3002</p>"},{"location":"python/i_scope/","title":"scope","text":"<p>python\u7684\u53d8\u91cf\uff0c\u5728\u4f7f\u7528\u524d\u4e0d\u9700\u8981\u5148\u58f0\u660e\uff0c\u5728\u5faa\u73af\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u53d8\u91cfi\u6765\u627f\u63a5\u8fed\u4ee3\u5668\u7ed9\u51fa\u7684\u503c</p> Python<pre><code>i = 9\nfor i in range(5):\n    print('x')\nprint(i) # i = ?\n</code></pre> <p>\u5728golang\u4e2d\u7684\u8868\u73b0 Go<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    x := []int{1, 2, 3, 4}\n    for i := range(x) {\n        fmt.Println(\"x\", i)\n    }\n    // fmt.Printf(\"i: %v\\n\", i) // undefined: i\n}\n</code></pre></p> <p>\u8fd9\u6bb5\u4ee3\u7801\u5c55\u793a\u4e86\u4e00\u4e2a\u4e8b\u5b9e\uff1a\u5faa\u73af\u5185\u90e8\u7684i\u548c\u5916\u90e8\u5b9a\u4e49\u7684\u53d8\u91cfi\u662f\u65e0\u5173\u7684\uff0c\u8fd9\u8868\u660ego\u7684\u5faa\u73af\u5185\u90e8\u53d8\u91cf\u662f\u6709\u4f5c\u7528\u57df\u7684 Go<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    i := 20\n    x := []int{1, 2, 3, 4}\n    for i := range(x) {\n        fmt.Println(\"x\", i)\n    }\n    fmt.Printf(\"i: %v\\n\", i) // i: 20\n}\n</code></pre></p>"},{"location":"python/python/","title":"python\u8bed\u8a00\u7684\u7279\u6027\u5728\u8fd9\u4e00\u4e2anav\u5c55\u793a","text":""},{"location":"python/setattr/","title":"Setattr","text":"<p>\u7ed9C\u6dfb\u52a0\u5c5e\u6027\uff0c\u8868\u73b0\u4e3a\u6df1\u62f7\u8d1d\uff0c\u6dfb\u52a0\u51fd\u6570\u6210\u5458\uff0c\u662f\u5426\u4e5f\u662f\u6df1\u62f7\u8d1d\uff1f Python<pre><code>class C:\n    pass\n\nlst = [1, 2, 4]\n\nsetattr(C, 'lst', lst)\n\nprint(C.lst)\nlst = [1, 5, 7]\n\nprint(C.lst)\n\n\ndef func():\n    return 1\n\nsetattr(C, 'f', func)\n\nprint(C.f())\n\ndef func():\n    return 5\nsetattr(C, 'f', func)\n\nprint(C.f())\n\n# [1, 2, 4]\n# [1, 2, 4]\n# 1\n# 5\n</code></pre></p>"},{"location":"redis/%E6%8C%81%E4%B9%85%E5%8C%96/","title":"redis\u6301\u4e45\u5316","text":"<p>redis\u662f\u5185\u5b58\u578b\u6570\u636e\u5e93\uff0c\u6240\u6709\u7684\u952e\u503c\u5bf9\u90fd\u4fdd\u5b58\u5728\u5185\u5b58\u91cc\u9762\uff0c\u5f53\u8fdb\u7a0b\u63a8\u51fa\u4e4b\u540e\uff0c\u5185\u5b58\u88ab\u56de\u6536\uff0c\u6570\u636e\u5c31\u6d88\u5931\u4e86\u3002\u518d\u91cd\u542f\uff0c\u4ec0\u4e48\u4e5f\u6ca1\u6709\u4e86\uff0c\u8fd9\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u662f\u4e0d\u80fd\u63a5\u53d7\u7684\u3002 \u56e0\u6b64\u9700\u8981\u6301\u4e45\u5316\uff0c\u4e5f\u5c31\u662f\u628a\u5185\u5b58\u4e2d\u4fdd\u5b58\u7684\u4e1c\u897f\uff0c\u5199\u5230\u6301\u4e45\u5316\u4fdd\u5b58\u7684\u4ecb\u8d28\u2014\u2014\u2014\u2014\u78c1\u76d8\u4e0a\u3002 \u515a\u673a\u91cd\u542f\u4e4b\u540e\u53ef\u6062\u590d\uff0c\u662f\u9700\u8981\u6301\u4e45\u5316\u7684\u4e00\u4e2a\u539f\u56e0\u3002 \u53e6\u5916\u8fd8\u6709\u5176\u4ed6\u539f\u56e0\uff1a\u4e3b\u4ece\u590d\u5236\u7b49\u3002</p>"},{"location":"redis/%E6%8C%81%E4%B9%85%E5%8C%96/#_1","title":"\u65e0\u6301\u4e45\u5316","text":"<p>\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u6709\u5173\u4e8e\u662f\u5426\u5f00\u542f\u6301\u4e45\u5316\u7684\u914d\u7f6e\u9879\uff0c\u628a\u8fd9\u4e9b\u9009\u9879\u5168\u90e8\u5173\u95ed\u7684\u8bdd\uff0c\u5c31\u662f\u65e0\u6301\u4e45\u5316\u7684\u72b6\u6001\u3002 save \u5168\u90e8\u6ce8\u91ca\u6389\u3002 \u8fd9\u6837\u7684\u7b56\u7565\u5c31\u662f\u4e0d\u505a\u6301\u4e45\u5316\uff0credis\u8fdb\u7a0b\u9000\u51fa\u4ee5\u540e\uff0c\u6570\u636e\u76f4\u63a5\u4e22\u5931\u3002 \u8fd9\u6837\u7684\u6a21\u5f0f\uff0c\u5c31\u662f\u53ea\u628aredis\u5f53\u505a\u7f13\u5b58\u6765\u4f7f\u7528\uff0c\u80fd\u591f\u5bb9\u5fcd\u6570\u636e\u4e22\u5931\u7684\u635f\u5931\u7684\u65f6\u5019\u624d\u4f1a\u7528\u3002</p>"},{"location":"redis/%E6%8C%81%E4%B9%85%E5%8C%96/#_2","title":"\u5b9e\u9645\u64cd\u4f5c\u6848\u4f8b","text":"<p>Python<pre><code># redis.conf 7.0.9 \u914d\u7f6e\u6587\u4ef6\n############### SNAPSHOOTTING #################\nsave \"\" # \u8868\u793a\u4e0d\u542f\u7528rdb\u6301\u4e45\u5316\n############### SNAPSHOOTTING #################\nappendonly no # \u8868\u793a\u4e0d\u542f\u7528aof\u6301\u4e45\u5316\n</code></pre> \u670d\u52a1\u7aef\u542f\u52a8redis-server Bash<pre><code>$ ./redis-server ../redis.conf\n21970:C 21 Feb 2025 19:39:46.401 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\n21970:C 21 Feb 2025 19:39:46.401 # Redis version=7.0.9, bits=64, commit=00000000, modified=0, pid=21970, just started\n21970:C 21 Feb 2025 19:39:46.401 # Configuration loaded\n21970:M 21 Feb 2025 19:39:46.401 * Increased maximum number of open files to 10032 (it was originally set to 1024).\n21970:M 21 Feb 2025 19:39:46.401 * monotonic clock: POSIX clock_gettime\n                _._\n           _.-``__ ''-._\n      _.-``    `.  `_.  ''-._           Redis 7.0.9 (00000000/0) 64 bit\n  .-`` .-```.  ```\\/    _.,_ ''-._\n (    '      ,       .-`  | `,    )     Running in standalone mode\n |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379\n |    `-._   `._    /     _.-'    |     PID: 21970\n  `-._    `-._  `-./  _.-'    _.-'\n |`-._`-._    `-.__.-'    _.-'_.-'|\n |    `-._`-._        _.-'_.-'    |           https://redis.io\n  `-._    `-._`-.__.-'_.-'    _.-'\n |`-._`-._    `-.__.-'    _.-'_.-'|\n |    `-._`-._        _.-'_.-'    |\n  `-._    `-._`-.__.-'_.-'    _.-'\n      `-._    `-.__.-'    _.-'\n          `-._        _.-'\n              `-.__.-'\n\n21970:M 21 Feb 2025 19:39:46.403 # Server initialized\n21970:M 21 Feb 2025 19:39:46.403 # WARNING Memory overcommit must be enabled! Without it, a background save or replication may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.\n21970:M 21 Feb 2025 19:39:46.403 * Loading RDB produced by version 7.0.9\n21970:M 21 Feb 2025 19:39:46.403 * RDB age 161089 seconds\n21970:M 21 Feb 2025 19:39:46.403 * RDB memory usage when created 0.95 Mb\n21970:M 21 Feb 2025 19:39:46.403 * Done loading RDB, keys loaded: 2, keys expired: 0.\n21970:M 21 Feb 2025 19:39:46.403 * DB loaded from disk: 0.001 seconds\n21970:M 21 Feb 2025 19:39:46.403 * Ready to accept connections\n</code></pre> redis\u5ba2\u6237\u7aef Bash<pre><code>$ ./redis-cli\n127.0.0.1:6379&gt; get name\n(nil)\n127.0.0.1:6379&gt; lrange task 0 -1\n(empty array)\n127.0.0.1:6379&gt; set name akatako\nOK\n127.0.0.1:6379&gt; get name\n\"akatako\"\n127.0.0.1:6379&gt; lpush task c#\n(integer) 1\n127.0.0.1:6379&gt; lpush java\n(error) ERR wrong number of arguments for 'lpush' command\n127.0.0.1:6379&gt; lpush task java\n(integer) 2\n127.0.0.1:6379&gt; lrange task 0 -1\n1) \"java\"\n2) \"c#\"\n127.0.0.1:6379&gt;\n</code></pre> \u4fdd\u5b58\u4e00\u4e9b\u503c\uff0c\u73b0\u5728\u628aredis\u76f4\u63a5\u5173\u95ed\uff0c\u76f4\u63a5\u6740\u8fdb\u7a0b\u3002 Text Only<pre><code>$ ps -ef |grep redis\nxx+   21995     554  0 19:44 pts/0    00:00:00 src/redis-server 127.0.0.1:6379\nxx+   21999    8784  0 19:44 pts/6    00:00:00 ./redis-cli\nxx+   22090   22016  0 19:46 pts/7    00:00:00 grep --color=auto redis\n~$ ps -ef |grep redis\nxx+   21999    8784  0 19:44 pts/6    00:00:00 ./redis-cli\nxx+   22092   22016  0 19:47 pts/7    00:00:00 grep --color=auto redis\n</code></pre> \u91cd\u65b0\u542f\u52a8redis\u670d\u52a1\uff0c\u53d1\u73b0\u5ba2\u6237\u7aef\u5df2\u7ecf\u67e5\u4e0d\u5230\u4e86\u3002 Bash<pre><code>127.0.0.1:6379&gt; get name\n(nil)\n127.0.0.1:6379&gt; lrange task 0 -1\n(empty array)\n</code></pre></p>"},{"location":"redis/%E6%8C%81%E4%B9%85%E5%8C%96/#rdb","title":"RDB\u6301\u4e45\u5316","text":"<p><code>rdb(redis database)</code>\uff0c\u662f\u6700\u65e9\u8bbe\u8ba1\u7684\u6301\u4e45\u5316\u65b9\u6848\uff0c\u65b9\u5f0f\u662f\u5feb\u7167 <code>snapshoot</code>\u3002</p> <p>\u628aredis\u5185\u5b58\u4e2d\u4fdd\u5b58\u7684\u6570\u636e\uff0c\u7ecf\u8fc7\u5feb\u7167\uff0c\u4ee5\u4e8c\u8fdb\u5236\u7684\u5f62\u5f0f\u4fdd\u5b58\u4e0b\u6765\uff0c\u6587\u4ef6\u5c31\u662frdb\u6587\u4ef6\u3002</p> <p>\u8fd9\u4e2a\u6587\u4ef6\u7684\u540d\u79f0\u548c\u6240\u5728\u7684\u4f4d\u7f6e\u90fd\u662f\u53ef\u4ee5\u81ea\u5df1\u6765\u81ea\u5b9a\u4e49\u7684\uff0c\u9ed8\u8ba4\u53ebdump.rdb\u3002 \u5bf9\u5e94\u7684\u6709\u5feb\u7167\u7b56\u7565\uff0c\u4f8b\u5982 <code>save 60 1</code> \u8868\u793a1\u5206\u949f\u5185\uff0c\u6709\u4e00\u4e2a\u952e\u53d8\u5316\u4e86\uff0c\u5c31\u8fdb\u884c\u5feb\u7167\u5907\u4efd\u3002 Python<pre><code>################################ SNAPSHOTTING  #################################\n# Save the DB on disk:\n#   save &lt;seconds&gt; &lt;changes&gt;\n#   after 900 sec (15 min) if at least 1 key changed\n#   after 300 sec (5 min) if at least 10 keys changed\n#   after 60 sec if at least 10000 keys changed\n#\n#   Note: you can disable saving at all commenting all the \"save\" lines.\n\nsave 900 1\nsave 300 10\n\n# The filename where to dump the DB\ndbfilename dump.rdb\n\n# For default save/load DB in/from the working directory\n# Note that you must specify a directory not a file name.\ndir ./\n</code></pre> rdb\u7684\u53ef\u4ee5\u5728\u4e3b\u7ebf\u7a0b\u5f53\u4e2d\u8fdb\u884c\uff0c\u5bf9\u5e94\u7684\u51fd\u6570\u53eb\u505asave\u3002\u4f46\u662f\u8fd9\u4e2a\u5907\u4efd\u7684\u884c\u4e3a\u8017\u65f6\u5f88\u591a\uff0c\u6240\u4ee5\u4e0d\u80fd\u592a\u8fc7\u4e8e\u9891\u7e41\u5730\u6267\u884c\uff0c\u540e\u6765\u60f3\u4e86\u65b0\u7684\u529e\u6cd5\uff0cfork\u51fa\u5b50\u8fdb\u7a0b\uff0c\u5728\u5b50\u8fdb\u7a0b\u5f53\u4e2d\u8fdb\u884c\u8fd9\u4e2a\u5907\u4efd\uff0c\u5bf9\u5e94\u7684\u51fd\u6570\u662fbgsave\uff0c\u8fd9\u6837\u4e0d\u4f1a\u963b\u788d\u4e3b\u7ebf\u7a0b\u5de5\u4f5c\uff08\u63a5\u53d7\u8bf7\u6c42\uff0c\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\uff09\u3002</p> <p>rdb\u4e0d\u53ef\u80fd\u505a\u5230\u6bcf\u65f6\u6bcf\u523b\u90fd\u66f4\u65b0\uff0c\u6240\u4ee5\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u573a\u666f\uff0c\u524d\u9762\u768415min\u6ee1\u8db3\u4e86\u5907\u4efd\u7684\u8bf7\u6c42\uff0c\u73b0\u5728\u5f00\u59cb\u8fdb\u884crdb\u5feb\u7167\uff0c\u5feb\u7167\u7684\u671f\u95f4\uff0c\u53c8\u6765\u4e86\u4e00\u4e9b\u65b0\u7684\u8bf7\u6c42\uff0c\u800c\u8fd9\u65f6\u5019redis\u670d\u52a1\u6545\u969c\u505c\u6b62\u4e86\uff0c\u6b64\u65f6\u83b7\u5f97\u4e86 dump.rdb \u7684\u786e\u4fdd\u5b58\u4e86\u4e4b\u524d\u4fdd\u5b58\u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u4f46\u662f\u5728\u8fd9\u6bb5\u65f6\u95f4\u5185\u7684\u65b0\u8bf7\u6c42\u5e26\u6765\u7684\u53d8\u5316\uff0c\u5c31\u4e22\u5931\u4e86\u3002</p> <p>\u8fd9\u5c31\u662frdb\u6301\u4e45\u5316\u65b9\u6848\u7684\u7f3a\u70b9 \u2014\u2014\u2014 \u65e0\u6cd5\u505a\u5230\u5b9e\u65f6\u6027\u4e00\u81f4\u3002</p> <p>\u5728\u914d\u7f6e\u6587\u4ef6\u7684AOF\u90e8\u5206\uff0c\u6700\u5f00\u59cb\u5199\u4e0a\u4e86\u8fd9\u53e5\u8bdd\uff0c\u8fd9\u6307\u51fa\u4e86rdb\u6a21\u5f0f\u5b58\u5728\u7684\u95ee\u9898\u3002</p> <p>By default Redis asynchronously dumps the dataset on disk. This mode is good enough in many applications, but an issue with the Redis process or a power outage may result into a few minutes of writes lost (depending on the configured save points).  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cRedis \u4f1a\u5f02\u6b65\u5730\u5c06\u6570\u636e\u96c6\u8f6c\u50a8\u5230\u78c1\u76d8\u3002\u8fd9\u79cd\u6a21\u5f0f\u5728\u8bb8\u591a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5df2\u7ecf\u8db3\u591f\u597d\uff0c\u4f46\u5982\u679c Redis \u8fdb\u7a0b\u51fa\u73b0\u95ee\u9898\u6216\u53d1\u751f\u505c\u7535\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u51e0\u5206\u949f\u5185\u7684\u5199\u5165\u6570\u636e\u4e22\u5931\uff08\u5177\u4f53\u53d6\u51b3\u4e8e\u914d\u7f6e\u7684\u4fdd\u5b58\u70b9\uff09\u3002</p>"},{"location":"redis/%E6%8C%81%E4%B9%85%E5%8C%96/#_3","title":"\u5176\u4ed6\u914d\u7f6e","text":"<p>\u5982\u679c\u5728\u5199rdb\u6587\u4ef6\u7684\u65f6\u5019\u51fa\u73b0\u4e86\u9519\u8bef\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u7acb\u523b\u505c\u6b62</p> <p><code>stop-writes-on-bgsave-error yes</code></p>"},{"location":"redis/%E6%8C%81%E4%B9%85%E5%8C%96/#aof","title":"AOF\u6301\u4e45\u5316","text":"<p><code>AOF(append only file)</code>\uff0c\u662f\u5728rdb\u4e4b\u540e\u8bbe\u8ba1\u7684\u4e00\u79cd\u6301\u4e45\u5316\u65b9\u6848\uff0c\u65b9\u5f0f\u662f\uff1a\u628a\u8ba9redis\u5b58\u50a8\u7684\u5185\u5bb9\u53d1\u751f\u53d8\u5316\u7684\u547d\u4ee4\u4fdd\u5b58\u4e0b\u6765\u3002</p> <p>\u7c7b\u4f3c\u4e8emysql\u7684binlog\uff0c\u5c31\u662f\u6bcf\u6709\u4e00\u6761\u547d\u4ee4\u8fc7\u6765\uff0c\u5982\u679c\u8fd9\u4e2a\u547d\u4ee4\u5bfc\u81f4redis\u4fdd\u5b58\u7684\u6570\u636e\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u5c31\u628a\u8fd9\u4e2a\u547d\u4ee4\u8ffd\u52a0\u5230\u6587\u4ef6\u7ed3\u5c3e\uff0c\u7b49\u5230\u540e\u9762\u91cd\u542f\u7684\u65f6\u5019\uff0c\u5c31\u6309\u7167\u8fd9\u4e2aaof\u6587\u4ef6\u4e00\u6761\u4e00\u6761\u6267\u884c\uff0c\u5373\u53ef\u628a\u524d\u9762\u7684\u6570\u636e\u6062\u590d\u51fa\u6765\u3002</p> <p>\u6ce8\u610f\u5199aof\u6587\u4ef6\u5e76\u4e0d\u662f\u6bcf\u6b21\u90fd\u5199\u5230\u6587\u4ef6\u4e2d\uff0c\u56e0\u4e3a\u6bcf\u4e00\u6b21\u90fd\u8fdb\u884c\u78c1\u76d8\u8bfb\u53d6\u6d6a\u8d39\u65f6\u95f4\uff0c\u800c\u662f\u7ef4\u62a4\u4e00\u4e2a\u7f13\u51b2\u533a\uff0c\u6512\u4e00\u6279\u5199\u4e00\u4e0b\uff08\u5185\u6838\u7cfb\u7edf\u8c03\u7528\u6709\u4e00\u4e2a\u6700\u5c0f\u78c1\u76d8\u5355\u5143\uff0c\u8c8c\u4f3c\u662f4096B\uff1f\u603b\u4e4b\u6512\u4e00\u6279\u4e00\u8d77\u5199\u662f\u6700\u5212\u7b97\u7684\uff09\u3002</p> <p>aof\u65b9\u6848\uff0c\u5728\u7ecf\u8fc7\u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\uff0caof\u6587\u4ef6\u5c31\u4f1a\u53d8\u5f97\u5f88\u5927\u3002\u9700\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u628aaof\u6587\u4ef6\u91cd\u5199\u4e00\u4e0b\uff0c\u4e5f\u5c31\u662f\u7cbe\u7b80\u91cc\u9762\u7684\u5185\u5bb9\uff0c\u6bd4\u5982\u6709\u597d\u591a\u4e2aincr\uff0c\u5c31\u53ef\u4ee5\u5408\u5e76\u6210\u4e3a\u4e00\u6761set\uff0c\u8bf8\u5982\u6b64\u7c7b\uff0c\u628aaof\u6587\u4ef6\u5360\u7528\u7684\u7a7a\u95f4\u53d8\u5c0f\u3002</p> <p>aof\u6587\u4ef6\u7684\u4f4d\u7f6e\u548c\u540d\u79f0\u4e5f\u662f\u53ef\u4ee5\u914d\u7f6e\u7684\u3002</p>"},{"location":"redis/%E6%8C%81%E4%B9%85%E5%8C%96/#_4","title":"\u6df7\u5408\u6301\u4e45\u5316","text":""},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","title":"redis\u7684\u6570\u636e\u7c7b\u578b","text":"<p>redis\u662f\u5185\u5b58k-v\u6570\u636e\u5e93\uff0ck\u4e00\u822c\u662f\u5b57\u7b26\u4e32\uff0cv\u7684\u7c7b\u578b\u5f88\u4e30\u5bcc\u3002</p>"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_1","title":"\u7b80\u8ff0\u503c\u7c7b\u578b","text":"<p>k\u503c\u7684\u7c7b\u578b\u6709\uff1a<code>string</code>\uff0c<code>list</code>\uff0c<code>set</code>\uff0c<code>hash</code>\uff0c<code>zset</code> \u8fd9\u4e9b\u662f\u5e38\u89c1\u7684\u3001\u6700\u65e9\u7248\u672c\u5c31\u6709\u7684\uff0c\u6b64\u5916\u8fd8\u6709 <code>stream</code>\uff0c<code>geo</code>\uff0c<code>bitmap</code>\uff0c<code>bitfield</code> ...\u7b49\u540e\u7eed\u7248\u672c\u589e\u52a0\u7684\u65b0\u7c7b\u578b\u3002</p> <p>\u6ce8\u610f\u533a\u5206 type \u548c encoding\uff0ctype \u662f\u5bf9\u5916\u8868\u73b0\u7684\u6570\u636e\u7c7b\u578b\uff0cencoding \u5219\u662f\u5185\u90e8\u5b9e\u73b0\u91c7\u53d6\u7684\u6570\u636e\u7ed3\u6784\u3002</p> <p>Bash<pre><code># \u6f14\u793a\u67e5\u770b type \u548c encoding \u7684\u547d\u4ee4\n127.0.0.1:6379&gt; set id3467:status healthy\nOK\n127.0.0.1:6379&gt; get id3467:status\n\"healthy\"\n127.0.0.1:6379&gt; type id3467:status\nstring\n127.0.0.1:6379&gt; object encoding id3467:status\n\"embstr\"\n\n127.0.0.1:6379&gt; sadd banned_ip 34.234.211.67 82.56.71.12\n(integer) 2\n127.0.0.1:6379&gt; smembers banned_ip\n1) \"34.234.211.67\"\n2) \"82.56.71.12\"\n127.0.0.1:6379&gt; type banned_ip\nset\n127.0.0.1:6379&gt; object encoding banned_ip\n\"listpack\"\n</code></pre> \u4e0a\u9762\u7684 redis-cli \u8868\u660e\u4e86redis\u6570\u636e\u7c7b\u578b\u7684type\u548cencoding\u7684\u533a\u522b\u3002encoding\u662f\u5e95\u5c42\u5b9e\u73b0\u6570\u636e\u7ed3\u6784\uff0c\u540c\u4e00\u79cdtype\u5728\u4e0d\u540c\u7684\u65f6\u5019\uff0c\u4f1a\u6839\u636e\u8981\u4fdd\u5b58\u7684\u6570\u636e\u7684\u5927\u5c0f\u4ee5\u53ca\u5176\u4ed6\u56e0\u7d20\u9009\u62e9\u5408\u9002\u7684encoding\uff0c\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\u56fe\uff1b</p> <p></p> <p>\uff08\u6ce8\u610f\u8fd9\u4e2a\u662f\u65e7\u7248\u672c\u7684\uff0c\u6700\u65b0\u7248redis7.0\u6709\u90e8\u5206\u53d8\u5316\uff09</p> <p>type\u662f\u5bf9\u5916\u8868\u73b0\u7684\u884c\u4e3a\uff0c\u5373\u4f7f\u5185\u90e8\u7684encoding\u4e0d\u4e00\u6837\uff0c\u53ea\u8981type\u4e00\u6837\uff0c\u5c31\u5171\u7528\u4e00\u5957\u64cd\u4f5capi\uff0c\u4f8b\u5982set\u90fd\u53ef\u4ee5asdd\uff0csismember\u7b49\u547d\u4ee4\u3002</p> <p>\u6709\u4e9btype\u7684\u7684encoding\u968f\u7248\u672c\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u4f8b\u5982ziplist\u5728redis7.0\u5df2\u7ecf\u5e9f\u5f03\u4e86\uff0c\u4f7f\u7528listpack\u6765\u4ee3\u66ff\u3002</p> <p>\u603b\u4e4b\uff0credis\u7684\u5b9e\u73b0\u5404\u7c7btype\u7684\u5e95\u5c42\u6570\u636e\u7ed3\u6784\uff0c\u4e5f\u5c31\u662f\u8fd9\u51e0\u79cd\uff0c<code>int</code>, <code>embstr</code>, <code>raw</code>, <code>ziplist</code>, <code>linkedlist</code>, <code>intset</code>, <code>hash</code>, <code>skiplist</code>\u3002</p> <p>\u8fd9\u4e00\u7bc7\u535a\u5ba2\u4ecb\u7ecd\u4e86\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u3002</p>"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#sds","title":"SDS\u7b80\u5355\u52a8\u6001\u5b57\u7b26\u4e32","text":""},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#linkedlist","title":"\u94fe\u8868linkedlist","text":""},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_2","title":"\u54c8\u5e0c\u8868","text":"<p>redis\u7684\u54c8\u5e0c\u8868\uff0c\u5e94\u5bf9\u54c8\u5e0c\u51b2\u7a81\u7684\u65b9\u5f0f\u662f\u94fe\u5730\u5740\u6cd5\uff0c\u8fd9\u548cgolang\u7684map\u7684\u5b9e\u73b0\u65b9\u5f0f\u662f\u7c7b\u4f3c\u7684\u3002\u5e76\u4e14\u5728\u6269\u5bb9\u7684\u65f6\u5019\uff0c\u90fd\u91c7\u7528\u4e86\u6e10\u8fdb\u5f0f\u518d\u54c8\u5e0c\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5bf9\u6bd4\u6765\u5b66\u4e60\u3002</p>"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_3","title":"\u8df3\u8868","text":""},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_4","title":"\u8282\u7701\u5185\u5b58\u7684\u5b9e\u73b0","text":"<p>\u53ef\u4ee5\u770b\u5230\u6709\u4e9b\u8282\u70b9\u503c\u5728\u5f88\u591a\u5c42\u90fd\u4f1a\u51fa\u73b0\uff0c\u5728\u5b9e\u73b0\u8df3\u8868\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e9b\u8282\u70b9\u5728\u4e0d\u540c\u5c42\u7684\u5206\u8eab\u5f53\u505a\u5355\u72ec\u7684\u8282\u70b9\u3002\u8fd9\u6837\u5b9e\u73b0\u8d77\u6765\u975e\u5e38\u5bb9\u6613\u3002 \u4e5f\u53ef\u4ee5\u76f4\u63a5\u628a\u8fd9\u4e9b\u5206\u8eab\u90fd\u5f53\u505a\u76f8\u540c\u7684\u8282\u70b9\uff0c\u5728\u8282\u70b9\u5185\u90e8\u7ef4\u62a4\u6bcf\u4e00\u5c42\u7684<code>next</code>\u3002\u8fd9\u4e24\u79cd\u5b9e\u73b0\u90fd\u6709\uff0c\u5728<code>Leetcode</code>\u4e2d\u6709\u4e00\u9053\u9898\u76ee\u5c31\u662f<code>\u8bbe\u8ba1\u8df3\u8868</code>\uff0c\u53ef\u4ee5\u53c2\u8003\u90a3\u8fb9\u7684\u4ee3\u7801\u3002</p>"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#ziplist","title":"\u538b\u7f29\u5217\u8868 ziplist","text":""},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#ziplist_1","title":"ziplist\u7684\u8fed\u4ee3","text":"<p>ziplist\u5728\u65e9\u671f\u88ab\u8fd9\u4e9btype\u4f9d\u8d56\uff1alist\u3001zset\u3001hash\u3002\u540e\u6765\u7ecf\u8fc7\u8fed\u4ee3\uff0c\u51fa\u73b0\u4e86quicklist\u4ee5\u53calistpack\u3002\u73b0\u5728redis7\u4e2d\uff0cziplist\u5df2\u7ecf\u88ablistpack\u66ff\u4ee3\u4e86\u3002 ziplist\u88ab\u66ff\u4ee3\u7684\u539f\u56e0\u662f\u8fde\u9501\u66f4\u65b0\u5e26\u6765\u7684\u6027\u80fd\u4e0b\u964d\u3002</p>"},{"location":"redis/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/","title":"redis.conf \u6587\u4ef6","text":"<p>\u8fd9\u662f\u6700\u65b0\u7248\u672c7.4.2\u7684 \u914d\u7f6e\u6587\u4ef6 Python<pre><code># Redis configuration file example.\n#\n# Note that in order to read the configuration file, Redis must be\n# started with the file path as first argument:\n#\n# ./redis-server /path/to/redis.conf\n\n# Note on units: when memory size is needed, it is possible to specify\n# it in the usual form of 1k 5GB 4M and so forth:\n#\n# 1k =&gt; 1000 bytes\n# 1kb =&gt; 1024 bytes\n# 1m =&gt; 1000000 bytes\n# 1mb =&gt; 1024*1024 bytes\n# 1g =&gt; 1000000000 bytes\n# 1gb =&gt; 1024*1024*1024 bytes\n#\n# units are case insensitive so 1GB 1Gb 1gB are all the same.\n\n################################## INCLUDES ###################################\n\n# Include one or more other config files here.  This is useful if you\n# have a standard template that goes to all Redis servers but also need\n# to customize a few per-server settings.  Include files can include\n# other files, so use this wisely.\n#\n# Note that option \"include\" won't be rewritten by command \"CONFIG REWRITE\"\n# from admin or Redis Sentinel. Since Redis always uses the last processed\n# line as value of a configuration directive, you'd better put includes\n# at the beginning of this file to avoid overwriting config change at runtime.\n#\n# If instead you are interested in using includes to override configuration\n# options, it is better to use include as the last line.\n#\n# Included paths may contain wildcards. All files matching the wildcards will\n# be included in alphabetical order.\n# Note that if an include path contains a wildcards but no files match it when\n# the server is started, the include statement will be ignored and no error will\n# be emitted.  It is safe, therefore, to include wildcard files from empty\n# directories.\n#\n# include /path/to/local.conf\n# include /path/to/other.conf\n# include /path/to/fragments/*.conf\n#\n\n################################## MODULES #####################################\n\n# Load modules at startup. If the server is not able to load modules\n# it will abort. It is possible to use multiple loadmodule directives.\n#\n# loadmodule /path/to/my_module.so\n# loadmodule /path/to/other_module.so\n# loadmodule /path/to/args_module.so [arg [arg ...]]\n\n################################## NETWORK #####################################\n\n# By default, if no \"bind\" configuration directive is specified, Redis listens\n# for connections from all available network interfaces on the host machine.\n# It is possible to listen to just one or multiple selected interfaces using\n# the \"bind\" configuration directive, followed by one or more IP addresses.\n# Each address can be prefixed by \"-\", which means that redis will not fail to\n# start if the address is not available. Being not available only refers to\n# addresses that does not correspond to any network interface. Addresses that\n# are already in use will always fail, and unsupported protocols will always BE\n# silently skipped.\n#\n# Examples:\n#\n# bind 192.168.1.100 10.0.0.1     # listens on two specific IPv4 addresses\n# bind 127.0.0.1 ::1              # listens on loopback IPv4 and IPv6\n# bind * -::*                     # like the default, all available interfaces\n#\n# ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the\n# internet, binding to all the interfaces is dangerous and will expose the\n# instance to everybody on the internet. So by default we uncomment the\n# following bind directive, that will force Redis to listen only on the\n# IPv4 and IPv6 (if available) loopback interface addresses (this means Redis\n# will only be able to accept client connections from the same host that it is\n# running on).\n#\n# IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES\n# COMMENT OUT THE FOLLOWING LINE.\n#\n# You will also need to set a password unless you explicitly disable protected\n# mode.\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nbind 127.0.0.1 -::1\n\n# By default, outgoing connections (from replica to master, from Sentinel to\n# instances, cluster bus, etc.) are not bound to a specific local address. In\n# most cases, this means the operating system will handle that based on routing\n# and the interface through which the connection goes out.\n#\n# Using bind-source-addr it is possible to configure a specific address to bind\n# to, which may also affect how the connection gets routed.\n#\n# Example:\n#\n# bind-source-addr 10.0.0.1\n\n# Protected mode is a layer of security protection, in order to avoid that\n# Redis instances left open on the internet are accessed and exploited.\n#\n# When protected mode is on and the default user has no password, the server\n# only accepts local connections from the IPv4 address (127.0.0.1), IPv6 address\n# (::1) or Unix domain sockets.\n#\n# By default protected mode is enabled. You should disable it only if\n# you are sure you want clients from other hosts to connect to Redis\n# even if no authentication is configured.\nprotected-mode yes\n\n# Redis uses default hardened security configuration directives to reduce the\n# attack surface on innocent users. Therefore, several sensitive configuration\n# directives are immutable, and some potentially-dangerous commands are blocked.\n#\n# Configuration directives that control files that Redis writes to (e.g., 'dir'\n# and 'dbfilename') and that aren't usually modified during runtime\n# are protected by making them immutable.\n#\n# Commands that can increase the attack surface of Redis and that aren't usually\n# called by users are blocked by default.\n#\n# These can be exposed to either all connections or just local ones by setting\n# each of the configs listed below to either of these values:\n#\n# no    - Block for any connection (remain immutable)\n# yes   - Allow for any connection (no protection)\n# local - Allow only for local connections. Ones originating from the\n#         IPv4 address (127.0.0.1), IPv6 address (::1) or Unix domain sockets.\n#\n# enable-protected-configs no\n# enable-debug-command no\n# enable-module-command no\n\n# Accept connections on the specified port, default is 6379 (IANA #815344).\n# If port 0 is specified Redis will not listen on a TCP socket.\nport 6379\n\n# TCP listen() backlog.\n#\n# In high requests-per-second environments you need a high backlog in order\n# to avoid slow clients connection issues. Note that the Linux kernel\n# will silently truncate it to the value of /proc/sys/net/core/somaxconn so\n# make sure to raise both the value of somaxconn and tcp_max_syn_backlog\n# in order to get the desired effect.\ntcp-backlog 511\n\n# Unix socket.\n#\n# Specify the path for the Unix socket that will be used to listen for\n# incoming connections. There is no default, so Redis will not listen\n# on a unix socket when not specified.\n#\n# unixsocket /run/redis.sock\n# unixsocketperm 700\n\n# Close the connection after a client is idle for N seconds (0 to disable)\ntimeout 0\n\n# TCP keepalive.\n#\n# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence\n# of communication. This is useful for two reasons:\n#\n# 1) Detect dead peers.\n# 2) Force network equipment in the middle to consider the connection to be\n#    alive.\n#\n# On Linux, the specified value (in seconds) is the period used to send ACKs.\n# Note that to close the connection the double of the time is needed.\n# On other kernels the period depends on the kernel configuration.\n#\n# A reasonable value for this option is 300 seconds, which is the new\n# Redis default starting with Redis 3.2.1.\ntcp-keepalive 300\n\n# Apply OS-specific mechanism to mark the listening socket with the specified\n# ID, to support advanced routing and filtering capabilities.\n#\n# On Linux, the ID represents a connection mark.\n# On FreeBSD, the ID represents a socket cookie ID.\n# On OpenBSD, the ID represents a route table ID.\n#\n# The default value is 0, which implies no marking is required.\n# socket-mark-id 0\n\n################################# TLS/SSL #####################################\n\n# By default, TLS/SSL is disabled. To enable it, the \"tls-port\" configuration\n# directive can be used to define TLS-listening ports. To enable TLS on the\n# default port, use:\n#\n# port 0\n# tls-port 6379\n\n# Configure a X.509 certificate and private key to use for authenticating the\n# server to connected clients, masters or cluster peers.  These files should be\n# PEM formatted.\n#\n# tls-cert-file redis.crt\n# tls-key-file redis.key\n#\n# If the key file is encrypted using a passphrase, it can be included here\n# as well.\n#\n# tls-key-file-pass secret\n\n# Normally Redis uses the same certificate for both server functions (accepting\n# connections) and client functions (replicating from a master, establishing\n# cluster bus connections, etc.).\n#\n# Sometimes certificates are issued with attributes that designate them as\n# client-only or server-only certificates. In that case it may be desired to use\n# different certificates for incoming (server) and outgoing (client)\n# connections. To do that, use the following directives:\n#\n# tls-client-cert-file client.crt\n# tls-client-key-file client.key\n#\n# If the key file is encrypted using a passphrase, it can be included here\n# as well.\n#\n# tls-client-key-file-pass secret\n\n# Configure a DH parameters file to enable Diffie-Hellman (DH) key exchange,\n# required by older versions of OpenSSL (&lt;3.0). Newer versions do not require\n# this configuration and recommend against it.\n#\n# tls-dh-params-file redis.dh\n\n# Configure a CA certificate(s) bundle or directory to authenticate TLS/SSL\n# clients and peers.  Redis requires an explicit configuration of at least one\n# of these, and will not implicitly use the system wide configuration.\n#\n# tls-ca-cert-file ca.crt\n# tls-ca-cert-dir /etc/ssl/certs\n\n# By default, clients (including replica servers) on a TLS port are required\n# to authenticate using valid client side certificates.\n#\n# If \"no\" is specified, client certificates are not required and not accepted.\n# If \"optional\" is specified, client certificates are accepted and must be\n# valid if provided, but are not required.\n#\n# tls-auth-clients no\n# tls-auth-clients optional\n\n# By default, a Redis replica does not attempt to establish a TLS connection\n# with its master.\n#\n# Use the following directive to enable TLS on replication links.\n#\n# tls-replication yes\n\n# By default, the Redis Cluster bus uses a plain TCP connection. To enable\n# TLS for the bus protocol, use the following directive:\n#\n# tls-cluster yes\n\n# By default, only TLSv1.2 and TLSv1.3 are enabled and it is highly recommended\n# that older formally deprecated versions are kept disabled to reduce the attack surface.\n# You can explicitly specify TLS versions to support.\n# Allowed values are case insensitive and include \"TLSv1\", \"TLSv1.1\", \"TLSv1.2\",\n# \"TLSv1.3\" (OpenSSL &gt;= 1.1.1) or any combination.\n# To enable only TLSv1.2 and TLSv1.3, use:\n#\n# tls-protocols \"TLSv1.2 TLSv1.3\"\n\n# Configure allowed ciphers.  See the ciphers(1ssl) manpage for more information\n# about the syntax of this string.\n#\n# Note: this configuration applies only to &lt;= TLSv1.2.\n#\n# tls-ciphers DEFAULT:!MEDIUM\n\n# Configure allowed TLSv1.3 ciphersuites.  See the ciphers(1ssl) manpage for more\n# information about the syntax of this string, and specifically for TLSv1.3\n# ciphersuites.\n#\n# tls-ciphersuites TLS_CHACHA20_POLY1305_SHA256\n\n# When choosing a cipher, use the server's preference instead of the client\n# preference. By default, the server follows the client's preference.\n#\n# tls-prefer-server-ciphers yes\n\n# By default, TLS session caching is enabled to allow faster and less expensive\n# reconnections by clients that support it. Use the following directive to disable\n# caching.\n#\n# tls-session-caching no\n\n# Change the default number of TLS sessions cached. A zero value sets the cache\n# to unlimited size. The default size is 20480.\n#\n# tls-session-cache-size 5000\n\n# Change the default timeout of cached TLS sessions. The default timeout is 300\n# seconds.\n#\n# tls-session-cache-timeout 60\n\n################################# GENERAL #####################################\n\n# By default Redis does not run as a daemon. Use 'yes' if you need it.\n# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.\n# When Redis is supervised by upstart or systemd, this parameter has no impact.\ndaemonize no\n\n# If you run Redis from upstart or systemd, Redis can interact with your\n# supervision tree. Options:\n#   supervised no      - no supervision interaction\n#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode\n#                        requires \"expect stop\" in your upstart job config\n#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET\n#                        on startup, and updating Redis status on a regular\n#                        basis.\n#   supervised auto    - detect upstart or systemd method based on\n#                        UPSTART_JOB or NOTIFY_SOCKET environment variables\n# Note: these supervision methods only signal \"process is ready.\"\n#       They do not enable continuous pings back to your supervisor.\n#\n# The default is \"no\". To run under upstart/systemd, you can simply uncomment\n# the line below:\n#\n# supervised auto\n\n# If a pid file is specified, Redis writes it where specified at startup\n# and removes it at exit.\n#\n# When the server runs non daemonized, no pid file is created if none is\n# specified in the configuration. When the server is daemonized, the pid file\n# is used even if not specified, defaulting to \"/var/run/redis.pid\".\n#\n# Creating a pid file is best effort: if Redis is not able to create it\n# nothing bad happens, the server will start and run normally.\n#\n# Note that on modern Linux systems \"/run/redis.pid\" is more conforming\n# and should be used instead.\npidfile /var/run/redis_6379.pid\n\n# Specify the server verbosity level.\n# This can be one of:\n# debug (a lot of information, useful for development/testing)\n# verbose (many rarely useful info, but not a mess like the debug level)\n# notice (moderately verbose, what you want in production probably)\n# warning (only very important / critical messages are logged)\n# nothing (nothing is logged)\nloglevel notice\n\n# Specify the log file name. Also the empty string can be used to force\n# Redis to log on the standard output. Note that if you use standard\n# output for logging but daemonize, logs will be sent to /dev/null\nlogfile \"\"\n\n# To enable logging to the system logger, just set 'syslog-enabled' to yes,\n# and optionally update the other syslog parameters to suit your needs.\n# syslog-enabled no\n\n# Specify the syslog identity.\n# syslog-ident redis\n\n# Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.\n# syslog-facility local0\n\n# To disable the built in crash log, which will possibly produce cleaner core\n# dumps when they are needed, uncomment the following:\n#\n# crash-log-enabled no\n\n# To disable the fast memory check that's run as part of the crash log, which\n# will possibly let redis terminate sooner, uncomment the following:\n#\n# crash-memcheck-enabled no\n\n# Set the number of databases. The default database is DB 0, you can select\n# a different one on a per-connection basis using SELECT &lt;dbid&gt; where\n# dbid is a number between 0 and 'databases'-1\ndatabases 16\n\n# By default Redis shows an ASCII art logo only when started to log to the\n# standard output and if the standard output is a TTY and syslog logging is\n# disabled. Basically this means that normally a logo is displayed only in\n# interactive sessions.\n#\n# However it is possible to force the pre-4.0 behavior and always show a\n# ASCII art logo in startup logs by setting the following option to yes.\nalways-show-logo no\n\n# To avoid logging personal identifiable information (PII) into server log file,\n# uncomment the following:\n#\n# hide-user-data-from-log yes\n\n# By default, Redis modifies the process title (as seen in 'top' and 'ps') to\n# provide some runtime information. It is possible to disable this and leave\n# the process name as executed by setting the following to no.\nset-proc-title yes\n\n# When changing the process title, Redis uses the following template to construct\n# the modified title.\n#\n# Template variables are specified in curly brackets. The following variables are\n# supported:\n#\n# {title}           Name of process as executed if parent, or type of child process.\n# {listen-addr}     Bind address or '*' followed by TCP or TLS port listening on, or\n#                   Unix socket if only that's available.\n# {server-mode}     Special mode, i.e. \"[sentinel]\" or \"[cluster]\".\n# {port}            TCP port listening on, or 0.\n# {tls-port}        TLS port listening on, or 0.\n# {unixsocket}      Unix domain socket listening on, or \"\".\n# {config-file}     Name of configuration file used.\n#\nproc-title-template \"{title} {listen-addr} {server-mode}\"\n\n# Set the local environment which is used for string comparison operations, and \n# also affect the performance of Lua scripts. Empty String indicates the locale \n# is derived from the environment variables.\nlocale-collate \"\"\n\n################################ SNAPSHOTTING  ################################\n\n# Save the DB to disk.\n#\n# save &lt;seconds&gt; &lt;changes&gt; [&lt;seconds&gt; &lt;changes&gt; ...]\n#\n# Redis will save the DB if the given number of seconds elapsed and it\n# surpassed the given number of write operations against the DB.\n#\n# Snapshotting can be completely disabled with a single empty string argument\n# as in following example:\n#\n# save \"\"\n#\n# Unless specified otherwise, by default Redis will save the DB:\n#   * After 3600 seconds (an hour) if at least 1 change was performed\n#   * After 300 seconds (5 minutes) if at least 100 changes were performed\n#   * After 60 seconds if at least 10000 changes were performed\n#\n# You can set these explicitly by uncommenting the following line.\n#\n# save 3600 1 300 100 60 10000\n\n# By default Redis will stop accepting writes if RDB snapshots are enabled\n# (at least one save point) and the latest background save failed.\n# This will make the user aware (in a hard way) that data is not persisting\n# on disk properly, otherwise chances are that no one will notice and some\n# disaster will happen.\n#\n# If the background saving process will start working again Redis will\n# automatically allow writes again.\n#\n# However if you have setup your proper monitoring of the Redis server\n# and persistence, you may want to disable this feature so that Redis will\n# continue to work as usual even if there are problems with disk,\n# permissions, and so forth.\nstop-writes-on-bgsave-error yes\n\n# Compress string objects using LZF when dump .rdb databases?\n# By default compression is enabled as it's almost always a win.\n# If you want to save some CPU in the saving child set it to 'no' but\n# the dataset will likely be bigger if you have compressible values or keys.\nrdbcompression yes\n\n# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.\n# This makes the format more resistant to corruption but there is a performance\n# hit to pay (around 10%) when saving and loading RDB files, so you can disable it\n# for maximum performances.\n#\n# RDB files created with checksum disabled have a checksum of zero that will\n# tell the loading code to skip the check.\nrdbchecksum yes\n\n# Enables or disables full sanitization checks for ziplist and listpack etc when\n# loading an RDB or RESTORE payload. This reduces the chances of a assertion or\n# crash later on while processing commands.\n# Options:\n#   no         - Never perform full sanitization\n#   yes        - Always perform full sanitization\n#   clients    - Perform full sanitization only for user connections.\n#                Excludes: RDB files, RESTORE commands received from the master\n#                connection, and client connections which have the\n#                skip-sanitize-payload ACL flag.\n# The default should be 'clients' but since it currently affects cluster\n# resharding via MIGRATE, it is temporarily set to 'no' by default.\n#\n# sanitize-dump-payload no\n\n# The filename where to dump the DB\ndbfilename dump.rdb\n\n# Remove RDB files used by replication in instances without persistence\n# enabled. By default this option is disabled, however there are environments\n# where for regulations or other security concerns, RDB files persisted on\n# disk by masters in order to feed replicas, or stored on disk by replicas\n# in order to load them for the initial synchronization, should be deleted\n# ASAP. Note that this option ONLY WORKS in instances that have both AOF\n# and RDB persistence disabled, otherwise is completely ignored.\n#\n# An alternative (and sometimes better) way to obtain the same effect is\n# to use diskless replication on both master and replicas instances. However\n# in the case of replicas, diskless is not always an option.\nrdb-del-sync-files no\n\n# The working directory.\n#\n# The DB will be written inside this directory, with the filename specified\n# above using the 'dbfilename' configuration directive.\n#\n# The Append Only File will also be created inside this directory.\n#\n# Note that you must specify a directory here, not a file name.\ndir ./\n\n################################# REPLICATION #################################\n\n# Master-Replica replication. Use replicaof to make a Redis instance a copy of\n# another Redis server. A few things to understand ASAP about Redis replication.\n#\n#   +------------------+      +---------------+\n#   |      Master      | ---&gt; |    Replica    |\n#   | (receive writes) |      |  (exact copy) |\n#   +------------------+      +---------------+\n#\n# 1) Redis replication is asynchronous, but you can configure a master to\n#    stop accepting writes if it appears to be not connected with at least\n#    a given number of replicas.\n# 2) Redis replicas are able to perform a partial resynchronization with the\n#    master if the replication link is lost for a relatively small amount of\n#    time. You may want to configure the replication backlog size (see the next\n#    sections of this file) with a sensible value depending on your needs.\n# 3) Replication is automatic and does not need user intervention. After a\n#    network partition replicas automatically try to reconnect to masters\n#    and resynchronize with them.\n#\n# replicaof &lt;masterip&gt; &lt;masterport&gt;\n\n# If the master is password protected (using the \"requirepass\" configuration\n# directive below) it is possible to tell the replica to authenticate before\n# starting the replication synchronization process, otherwise the master will\n# refuse the replica request.\n#\n# masterauth &lt;master-password&gt;\n#\n# However this is not enough if you are using Redis ACLs (for Redis version\n# 6 or greater), and the default user is not capable of running the PSYNC\n# command and/or other commands needed for replication. In this case it's\n# better to configure a special user to use with replication, and specify the\n# masteruser configuration as such:\n#\n# masteruser &lt;username&gt;\n#\n# When masteruser is specified, the replica will authenticate against its\n# master using the new AUTH form: AUTH &lt;username&gt; &lt;password&gt;.\n\n# When a replica loses its connection with the master, or when the replication\n# is still in progress, the replica can act in two different ways:\n#\n# 1) if replica-serve-stale-data is set to 'yes' (the default) the replica will\n#    still reply to client requests, possibly with out of date data, or the\n#    data set may just be empty if this is the first synchronization.\n#\n# 2) If replica-serve-stale-data is set to 'no' the replica will reply with error\n#    \"MASTERDOWN Link with MASTER is down and replica-serve-stale-data is set to 'no'\"\n#    to all data access commands, excluding commands such as:\n#    INFO, REPLICAOF, AUTH, SHUTDOWN, REPLCONF, ROLE, CONFIG, SUBSCRIBE,\n#    UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB, COMMAND, POST,\n#    HOST and LATENCY.\n#\nreplica-serve-stale-data yes\n\n# You can configure a replica instance to accept writes or not. Writing against\n# a replica instance may be useful to store some ephemeral data (because data\n# written on a replica will be easily deleted after resync with the master) but\n# may also cause problems if clients are writing to it because of a\n# misconfiguration.\n#\n# Since Redis 2.6 by default replicas are read-only.\n#\n# Note: read only replicas are not designed to be exposed to untrusted clients\n# on the internet. It's just a protection layer against misuse of the instance.\n# Still a read only replica exports by default all the administrative commands\n# such as CONFIG, DEBUG, and so forth. To a limited extent you can improve\n# security of read only replicas using 'rename-command' to shadow all the\n# administrative / dangerous commands.\nreplica-read-only yes\n\n# Replication SYNC strategy: disk or socket.\n#\n# New replicas and reconnecting replicas that are not able to continue the\n# replication process just receiving differences, need to do what is called a\n# \"full synchronization\". An RDB file is transmitted from the master to the\n# replicas.\n#\n# The transmission can happen in two different ways:\n#\n# 1) Disk-backed: The Redis master creates a new process that writes the RDB\n#                 file on disk. Later the file is transferred by the parent\n#                 process to the replicas incrementally.\n# 2) Diskless: The Redis master creates a new process that directly writes the\n#              RDB file to replica sockets, without touching the disk at all.\n#\n# With disk-backed replication, while the RDB file is generated, more replicas\n# can be queued and served with the RDB file as soon as the current child\n# producing the RDB file finishes its work. With diskless replication instead\n# once the transfer starts, new replicas arriving will be queued and a new\n# transfer will start when the current one terminates.\n#\n# When diskless replication is used, the master waits a configurable amount of\n# time (in seconds) before starting the transfer in the hope that multiple\n# replicas will arrive and the transfer can be parallelized.\n#\n# With slow disks and fast (large bandwidth) networks, diskless replication\n# works better.\nrepl-diskless-sync yes\n\n# When diskless replication is enabled, it is possible to configure the delay\n# the server waits in order to spawn the child that transfers the RDB via socket\n# to the replicas.\n#\n# This is important since once the transfer starts, it is not possible to serve\n# new replicas arriving, that will be queued for the next RDB transfer, so the\n# server waits a delay in order to let more replicas arrive.\n#\n# The delay is specified in seconds, and by default is 5 seconds. To disable\n# it entirely just set it to 0 seconds and the transfer will start ASAP.\nrepl-diskless-sync-delay 5\n\n# When diskless replication is enabled with a delay, it is possible to let\n# the replication start before the maximum delay is reached if the maximum\n# number of replicas expected have connected. Default of 0 means that the\n# maximum is not defined and Redis will wait the full delay.\nrepl-diskless-sync-max-replicas 0\n\n# -----------------------------------------------------------------------------\n# WARNING: Since in this setup the replica does not immediately store an RDB on\n# disk, it may cause data loss during failovers. RDB diskless load + Redis\n# modules not handling I/O reads may cause Redis to abort in case of I/O errors\n# during the initial synchronization stage with the master.\n# -----------------------------------------------------------------------------\n#\n# Replica can load the RDB it reads from the replication link directly from the\n# socket, or store the RDB to a file and read that file after it was completely\n# received from the master.\n#\n# In many cases the disk is slower than the network, and storing and loading\n# the RDB file may increase replication time (and even increase the master's\n# Copy on Write memory and replica buffers).\n# However, when parsing the RDB file directly from the socket, in order to avoid\n# data loss it's only safe to flush the current dataset when the new dataset is\n# fully loaded in memory, resulting in higher memory usage.\n# For this reason we have the following options:\n#\n# \"disabled\"    - Don't use diskless load (store the rdb file to the disk first)\n# \"swapdb\"      - Keep current db contents in RAM while parsing the data directly\n#                 from the socket. Replicas in this mode can keep serving current\n#                 dataset while replication is in progress, except for cases where\n#                 they can't recognize master as having a data set from same\n#                 replication history.\n#                 Note that this requires sufficient memory, if you don't have it,\n#                 you risk an OOM kill.\n# \"on-empty-db\" - Use diskless load only when current dataset is empty. This is \n#                 safer and avoid having old and new dataset loaded side by side\n#                 during replication.\nrepl-diskless-load disabled\n\n# Master send PINGs to its replicas in a predefined interval. It's possible to\n# change this interval with the repl-ping-replica-period option. The default\n# value is 10 seconds.\n#\n# repl-ping-replica-period 10\n\n# The following option sets the replication timeout for:\n#\n# 1) Bulk transfer I/O during SYNC, from the point of view of replica.\n# 2) Master timeout from the point of view of replicas (data, pings).\n# 3) Replica timeout from the point of view of masters (REPLCONF ACK pings).\n#\n# It is important to make sure that this value is greater than the value\n# specified for repl-ping-replica-period otherwise a timeout will be detected\n# every time there is low traffic between the master and the replica. The default\n# value is 60 seconds.\n#\n# repl-timeout 60\n\n# Disable TCP_NODELAY on the replica socket after SYNC?\n#\n# If you select \"yes\" Redis will use a smaller number of TCP packets and\n# less bandwidth to send data to replicas. But this can add a delay for\n# the data to appear on the replica side, up to 40 milliseconds with\n# Linux kernels using a default configuration.\n#\n# If you select \"no\" the delay for data to appear on the replica side will\n# be reduced but more bandwidth will be used for replication.\n#\n# By default we optimize for low latency, but in very high traffic conditions\n# or when the master and replicas are many hops away, turning this to \"yes\" may\n# be a good idea.\nrepl-disable-tcp-nodelay no\n\n# Set the replication backlog size. The backlog is a buffer that accumulates\n# replica data when replicas are disconnected for some time, so that when a\n# replica wants to reconnect again, often a full resync is not needed, but a\n# partial resync is enough, just passing the portion of data the replica\n# missed while disconnected.\n#\n# The bigger the replication backlog, the longer the replica can endure the\n# disconnect and later be able to perform a partial resynchronization.\n#\n# The backlog is only allocated if there is at least one replica connected.\n#\n# repl-backlog-size 1mb\n\n# After a master has no connected replicas for some time, the backlog will be\n# freed. The following option configures the amount of seconds that need to\n# elapse, starting from the time the last replica disconnected, for the backlog\n# buffer to be freed.\n#\n# Note that replicas never free the backlog for timeout, since they may be\n# promoted to masters later, and should be able to correctly \"partially\n# resynchronize\" with other replicas: hence they should always accumulate backlog.\n#\n# A value of 0 means to never release the backlog.\n#\n# repl-backlog-ttl 3600\n\n# During a fullsync, the master may decide to send both the RDB file and the\n# replication stream to the replica in parallel. This approach shifts the\n# responsibility of buffering the replication stream to the replica during the\n# fullsync process. The replica accumulates the replication stream data until\n# the RDB file is fully loaded. Once the RDB delivery is completed and\n# successfully loaded, the replica begins processing and applying the\n# accumulated replication data to the db. The configuration below controls how\n# much replication data the replica can accumulate during a fullsync.\n#\n# When the replica reaches this limit, it will stop accumulating further data.\n# At this point, additional data accumulation may occur on the master side\n# depending on the 'client-output-buffer-limit &lt;replica&gt;' config of master.\n#\n# A value of 0 means replica inherits hard limit of\n# 'client-output-buffer-limit &lt;replica&gt;' config to limit accumulation size.\n#\n# replica-full-sync-buffer-limit 0\n\n# The replica priority is an integer number published by Redis in the INFO\n# output. It is used by Redis Sentinel in order to select a replica to promote\n# into a master if the master is no longer working correctly.\n#\n# A replica with a low priority number is considered better for promotion, so\n# for instance if there are three replicas with priority 10, 100, 25 Sentinel\n# will pick the one with priority 10, that is the lowest.\n#\n# However a special priority of 0 marks the replica as not able to perform the\n# role of master, so a replica with priority of 0 will never be selected by\n# Redis Sentinel for promotion.\n#\n# By default the priority is 100.\nreplica-priority 100\n\n# The propagation error behavior controls how Redis will behave when it is\n# unable to handle a command being processed in the replication stream from a master\n# or processed while reading from an AOF file. Errors that occur during propagation\n# are unexpected, and can cause data inconsistency. However, there are edge cases\n# in earlier versions of Redis where it was possible for the server to replicate or persist\n# commands that would fail on future versions. For this reason the default behavior\n# is to ignore such errors and continue processing commands.\n#\n# If an application wants to ensure there is no data divergence, this configuration\n# should be set to 'panic' instead. The value can also be set to 'panic-on-replicas'\n# to only panic when a replica encounters an error on the replication stream. One of\n# these two panic values will become the default value in the future once there are\n# sufficient safety mechanisms in place to prevent false positive crashes.\n#\n# propagation-error-behavior ignore\n\n# Replica ignore disk write errors controls the behavior of a replica when it is\n# unable to persist a write command received from its master to disk. By default,\n# this configuration is set to 'no' and will crash the replica in this condition.\n# It is not recommended to change this default, however in order to be compatible\n# with older versions of Redis this config can be toggled to 'yes' which will just\n# log a warning and execute the write command it got from the master.\n#\n# replica-ignore-disk-write-errors no\n\n# -----------------------------------------------------------------------------\n# By default, Redis Sentinel includes all replicas in its reports. A replica\n# can be excluded from Redis Sentinel's announcements. An unannounced replica\n# will be ignored by the 'sentinel replicas &lt;master&gt;' command and won't be\n# exposed to Redis Sentinel's clients.\n#\n# This option does not change the behavior of replica-priority. Even with\n# replica-announced set to 'no', the replica can be promoted to master. To\n# prevent this behavior, set replica-priority to 0.\n#\n# replica-announced yes\n\n# It is possible for a master to stop accepting writes if there are less than\n# N replicas connected, having a lag less or equal than M seconds.\n#\n# The N replicas need to be in \"online\" state.\n#\n# The lag in seconds, that must be &lt;= the specified value, is calculated from\n# the last ping received from the replica, that is usually sent every second.\n#\n# This option does not GUARANTEE that N replicas will accept the write, but\n# will limit the window of exposure for lost writes in case not enough replicas\n# are available, to the specified number of seconds.\n#\n# For example to require at least 3 replicas with a lag &lt;= 10 seconds use:\n#\n# min-replicas-to-write 3\n# min-replicas-max-lag 10\n#\n# Setting one or the other to 0 disables the feature.\n#\n# By default min-replicas-to-write is set to 0 (feature disabled) and\n# min-replicas-max-lag is set to 10.\n\n# A Redis master is able to list the address and port of the attached\n# replicas in different ways. For example the \"INFO replication\" section\n# offers this information, which is used, among other tools, by\n# Redis Sentinel in order to discover replica instances.\n# Another place where this info is available is in the output of the\n# \"ROLE\" command of a master.\n#\n# The listed IP address and port normally reported by a replica is\n# obtained in the following way:\n#\n#   IP: The address is auto detected by checking the peer address\n#   of the socket used by the replica to connect with the master.\n#\n#   Port: The port is communicated by the replica during the replication\n#   handshake, and is normally the port that the replica is using to\n#   listen for connections.\n#\n# However when port forwarding or Network Address Translation (NAT) is\n# used, the replica may actually be reachable via different IP and port\n# pairs. The following two options can be used by a replica in order to\n# report to its master a specific set of IP and port, so that both INFO\n# and ROLE will report those values.\n#\n# There is no need to use both the options if you need to override just\n# the port or the IP address.\n#\n# replica-announce-ip 5.5.5.5\n# replica-announce-port 1234\n\n############################### KEYS TRACKING #################################\n\n# Redis implements server assisted support for client side caching of values.\n# This is implemented using an invalidation table that remembers, using\n# a radix key indexed by key name, what clients have which keys. In turn\n# this is used in order to send invalidation messages to clients. Please\n# check this page to understand more about the feature:\n#\n#   https://redis.io/docs/latest/develop/use/client-side-caching/\n#\n# When tracking is enabled for a client, all the read only queries are assumed\n# to be cached: this will force Redis to store information in the invalidation\n# table. When keys are modified, such information is flushed away, and\n# invalidation messages are sent to the clients. However if the workload is\n# heavily dominated by reads, Redis could use more and more memory in order\n# to track the keys fetched by many clients.\n#\n# For this reason it is possible to configure a maximum fill value for the\n# invalidation table. By default it is set to 1M of keys, and once this limit\n# is reached, Redis will start to evict keys in the invalidation table\n# even if they were not modified, just to reclaim memory: this will in turn\n# force the clients to invalidate the cached values. Basically the table\n# maximum size is a trade off between the memory you want to spend server\n# side to track information about who cached what, and the ability of clients\n# to retain cached objects in memory.\n#\n# If you set the value to 0, it means there are no limits, and Redis will\n# retain as many keys as needed in the invalidation table.\n# In the \"stats\" INFO section, you can find information about the number of\n# keys in the invalidation table at every given moment.\n#\n# Note: when key tracking is used in broadcasting mode, no memory is used\n# in the server side so this setting is useless.\n#\n# tracking-table-max-keys 1000000\n\n################################## SECURITY ###################################\n\n# Warning: since Redis is pretty fast, an outside user can try up to\n# 1 million passwords per second against a modern box. This means that you\n# should use very strong passwords, otherwise they will be very easy to break.\n# Note that because the password is really a shared secret between the client\n# and the server, and should not be memorized by any human, the password\n# can be easily a long string from /dev/urandom or whatever, so by using a\n# long and unguessable password no brute force attack will be possible.\n\n# Redis ACL users are defined in the following format:\n#\n#   user &lt;username&gt; ... acl rules ...\n#\n# For example:\n#\n#   user worker +@list +@connection ~jobs:* on &gt;ffa9203c493aa99\n#\n# The special username \"default\" is used for new connections. If this user\n# has the \"nopass\" rule, then new connections will be immediately authenticated\n# as the \"default\" user without the need of any password provided via the\n# AUTH command. Otherwise if the \"default\" user is not flagged with \"nopass\"\n# the connections will start in not authenticated state, and will require\n# AUTH (or the HELLO command AUTH option) in order to be authenticated and\n# start to work.\n#\n# The ACL rules that describe what a user can do are the following:\n#\n#  on           Enable the user: it is possible to authenticate as this user.\n#  off          Disable the user: it's no longer possible to authenticate\n#               with this user, however the already authenticated connections\n#               will still work.\n#  skip-sanitize-payload    RESTORE dump-payload sanitization is skipped.\n#  sanitize-payload         RESTORE dump-payload is sanitized (default).\n#  +&lt;command&gt;   Allow the execution of that command.\n#               May be used with `|` for allowing subcommands (e.g \"+config|get\")\n#  -&lt;command&gt;   Disallow the execution of that command.\n#               May be used with `|` for blocking subcommands (e.g \"-config|set\")\n#  +@&lt;category&gt; Allow the execution of all the commands in such category\n#               with valid categories are like @admin, @set, @sortedset, ...\n#               and so forth, see the full list in the server.c file where\n#               the Redis command table is described and defined.\n#               The special category @all means all the commands, but currently\n#               present in the server, and that will be loaded in the future\n#               via modules.\n#  +&lt;command&gt;|first-arg  Allow a specific first argument of an otherwise\n#                        disabled command. It is only supported on commands with\n#                        no sub-commands, and is not allowed as negative form\n#                        like -SELECT|1, only additive starting with \"+\". This\n#                        feature is deprecated and may be removed in the future.\n#  allcommands  Alias for +@all. Note that it implies the ability to execute\n#               all the future commands loaded via the modules system.\n#  nocommands   Alias for -@all.\n#  ~&lt;pattern&gt;   Add a pattern of keys that can be mentioned as part of\n#               commands. For instance ~* allows all the keys. The pattern\n#               is a glob-style pattern like the one of KEYS.\n#               It is possible to specify multiple patterns.\n# %R~&lt;pattern&gt;  Add key read pattern that specifies which keys can be read \n#               from.\n# %W~&lt;pattern&gt;  Add key write pattern that specifies which keys can be\n#               written to. \n#  allkeys      Alias for ~*\n#  resetkeys    Flush the list of allowed keys patterns.\n#  &amp;&lt;pattern&gt;   Add a glob-style pattern of Pub/Sub channels that can be\n#               accessed by the user. It is possible to specify multiple channel\n#               patterns.\n#  allchannels  Alias for &amp;*\n#  resetchannels            Flush the list of allowed channel patterns.\n#  &gt;&lt;password&gt;  Add this password to the list of valid password for the user.\n#               For example &gt;mypass will add \"mypass\" to the list.\n#               This directive clears the \"nopass\" flag (see later).\n#  &lt;&lt;password&gt;  Remove this password from the list of valid passwords.\n#  nopass       All the set passwords of the user are removed, and the user\n#               is flagged as requiring no password: it means that every\n#               password will work against this user. If this directive is\n#               used for the default user, every new connection will be\n#               immediately authenticated with the default user without\n#               any explicit AUTH command required. Note that the \"resetpass\"\n#               directive will clear this condition.\n#  resetpass    Flush the list of allowed passwords. Moreover removes the\n#               \"nopass\" status. After \"resetpass\" the user has no associated\n#               passwords and there is no way to authenticate without adding\n#               some password (or setting it as \"nopass\" later).\n#  reset        Performs the following actions: resetpass, resetkeys, resetchannels,\n#               allchannels (if acl-pubsub-default is set), off, clearselectors, -@all.\n#               The user returns to the same state it has immediately after its creation.\n# (&lt;options&gt;)   Create a new selector with the options specified within the\n#               parentheses and attach it to the user. Each option should be \n#               space separated. The first character must be ( and the last \n#               character must be ).\n# clearselectors            Remove all of the currently attached selectors. \n#                           Note this does not change the \"root\" user permissions,\n#                           which are the permissions directly applied onto the\n#                           user (outside the parentheses).\n#\n# ACL rules can be specified in any order: for instance you can start with\n# passwords, then flags, or key patterns. However note that the additive\n# and subtractive rules will CHANGE MEANING depending on the ordering.\n# For instance see the following example:\n#\n#   user alice on +@all -DEBUG ~* &gt;somepassword\n#\n# This will allow \"alice\" to use all the commands with the exception of the\n# DEBUG command, since +@all added all the commands to the set of the commands\n# alice can use, and later DEBUG was removed. However if we invert the order\n# of two ACL rules the result will be different:\n#\n#   user alice on -DEBUG +@all ~* &gt;somepassword\n#\n# Now DEBUG was removed when alice had yet no commands in the set of allowed\n# commands, later all the commands are added, so the user will be able to\n# execute everything.\n#\n# Basically ACL rules are processed left-to-right.\n#\n# The following is a list of command categories and their meanings:\n# * keyspace - Writing or reading from keys, databases, or their metadata \n#     in a type agnostic way. Includes DEL, RESTORE, DUMP, RENAME, EXISTS, DBSIZE,\n#     KEYS, EXPIRE, TTL, FLUSHALL, etc. Commands that may modify the keyspace,\n#     key or metadata will also have `write` category. Commands that only read\n#     the keyspace, key or metadata will have the `read` category.\n# * read - Reading from keys (values or metadata). Note that commands that don't\n#     interact with keys, will not have either `read` or `write`.\n# * write - Writing to keys (values or metadata)\n# * admin - Administrative commands. Normal applications will never need to use\n#     these. Includes REPLICAOF, CONFIG, DEBUG, SAVE, MONITOR, ACL, SHUTDOWN, etc.\n# * dangerous - Potentially dangerous (each should be considered with care for\n#     various reasons). This includes FLUSHALL, MIGRATE, RESTORE, SORT, KEYS,\n#     CLIENT, DEBUG, INFO, CONFIG, SAVE, REPLICAOF, etc.\n# * connection - Commands affecting the connection or other connections.\n#     This includes AUTH, SELECT, COMMAND, CLIENT, ECHO, PING, etc.\n# * blocking - Potentially blocking the connection until released by another\n#     command.\n# * fast - Fast O(1) commands. May loop on the number of arguments, but not the\n#     number of elements in the key.\n# * slow - All commands that are not Fast.\n# * pubsub - PUBLISH / SUBSCRIBE related\n# * transaction - WATCH / MULTI / EXEC related commands.\n# * scripting - Scripting related.\n# * set - Data type: sets related.\n# * sortedset - Data type: zsets related.\n# * list - Data type: lists related.\n# * hash - Data type: hashes related.\n# * string - Data type: strings related.\n# * bitmap - Data type: bitmaps related.\n# * hyperloglog - Data type: hyperloglog related.\n# * geo - Data type: geo related.\n# * stream - Data type: streams related.\n#\n# For more information about ACL configuration please refer to\n# the Redis web site at https://redis.io/docs/latest/operate/oss_and_stack/management/security/acl/\n\n# ACL LOG\n#\n# The ACL Log tracks failed commands and authentication events associated\n# with ACLs. The ACL Log is useful to troubleshoot failed commands blocked\n# by ACLs. The ACL Log is stored in memory. You can reclaim memory with\n# ACL LOG RESET. Define the maximum entry length of the ACL Log below.\nacllog-max-len 128\n\n# Using an external ACL file\n#\n# Instead of configuring users here in this file, it is possible to use\n# a stand-alone file just listing users. The two methods cannot be mixed:\n# if you configure users here and at the same time you activate the external\n# ACL file, the server will refuse to start.\n#\n# The format of the external ACL user file is exactly the same as the\n# format that is used inside redis.conf to describe users.\n#\n# aclfile /etc/redis/users.acl\n\n# IMPORTANT NOTE: starting with Redis 6 \"requirepass\" is just a compatibility\n# layer on top of the new ACL system. The option effect will be just setting\n# the password for the default user. Clients will still authenticate using\n# AUTH &lt;password&gt; as usually, or more explicitly with AUTH default &lt;password&gt;\n# if they follow the new protocol: both will work.\n#\n# The requirepass is not compatible with aclfile option and the ACL LOAD\n# command, these will cause requirepass to be ignored.\n#\n# requirepass foobared\n\n# New users are initialized with restrictive permissions by default, via the\n# equivalent of this ACL rule 'off resetkeys -@all'. Starting with Redis 6.2, it\n# is possible to manage access to Pub/Sub channels with ACL rules as well. The\n# default Pub/Sub channels permission if new users is controlled by the\n# acl-pubsub-default configuration directive, which accepts one of these values:\n#\n# allchannels: grants access to all Pub/Sub channels\n# resetchannels: revokes access to all Pub/Sub channels\n#\n# From Redis 7.0, acl-pubsub-default defaults to 'resetchannels' permission.\n#\n# acl-pubsub-default resetchannels\n\n# Command renaming (DEPRECATED).\n#\n# ------------------------------------------------------------------------\n# WARNING: avoid using this option if possible. Instead use ACLs to remove\n# commands from the default user, and put them only in some admin user you\n# create for administrative purposes.\n# ------------------------------------------------------------------------\n#\n# It is possible to change the name of dangerous commands in a shared\n# environment. For instance the CONFIG command may be renamed into something\n# hard to guess so that it will still be available for internal-use tools\n# but not available for general clients.\n#\n# Example:\n#\n# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52\n#\n# It is also possible to completely kill a command by renaming it into\n# an empty string:\n#\n# rename-command CONFIG \"\"\n#\n# Please note that changing the name of commands that are logged into the\n# AOF file or transmitted to replicas may cause problems.\n\n################################### CLIENTS ####################################\n\n# Set the max number of connected clients at the same time. By default\n# this limit is set to 10000 clients, however if the Redis server is not\n# able to configure the process file limit to allow for the specified limit\n# the max number of allowed clients is set to the current file limit\n# minus 32 (as Redis reserves a few file descriptors for internal uses).\n#\n# Once the limit is reached Redis will close all the new connections sending\n# an error 'max number of clients reached'.\n#\n# IMPORTANT: When Redis Cluster is used, the max number of connections is also\n# shared with the cluster bus: every node in the cluster will use two\n# connections, one incoming and another outgoing. It is important to size the\n# limit accordingly in case of very large clusters.\n#\n# maxclients 10000\n\n############################## MEMORY MANAGEMENT ################################\n\n# Set a memory usage limit to the specified amount of bytes.\n# When the memory limit is reached Redis will try to remove keys\n# according to the eviction policy selected (see maxmemory-policy).\n#\n# If Redis can't remove keys according to the policy, or if the policy is\n# set to 'noeviction', Redis will start to reply with errors to commands\n# that would use more memory, like SET, LPUSH, and so on, and will continue\n# to reply to read-only commands like GET.\n#\n# This option is usually useful when using Redis as an LRU or LFU cache, or to\n# set a hard memory limit for an instance (using the 'noeviction' policy).\n#\n# WARNING: If you have replicas attached to an instance with maxmemory on,\n# the size of the output buffers needed to feed the replicas are subtracted\n# from the used memory count, so that network problems / resyncs will\n# not trigger a loop where keys are evicted, and in turn the output\n# buffer of replicas is full with DELs of keys evicted triggering the deletion\n# of more keys, and so forth until the database is completely emptied.\n#\n# In short... if you have replicas attached it is suggested that you set a lower\n# limit for maxmemory so that there is some free RAM on the system for replica\n# output buffers (but this is not needed if the policy is 'noeviction').\n#\n# maxmemory &lt;bytes&gt;\n\n# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory\n# is reached. You can select one from the following behaviors:\n#\n# volatile-lru -&gt; Evict using approximated LRU, only keys with an expire set.\n# allkeys-lru -&gt; Evict any key using approximated LRU.\n# volatile-lfu -&gt; Evict using approximated LFU, only keys with an expire set.\n# allkeys-lfu -&gt; Evict any key using approximated LFU.\n# volatile-random -&gt; Remove a random key having an expire set.\n# allkeys-random -&gt; Remove a random key, any key.\n# volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)\n# noeviction -&gt; Don't evict anything, just return an error on write operations.\n#\n# LRU means Least Recently Used\n# LFU means Least Frequently Used\n#\n# Both LRU, LFU and volatile-ttl are implemented using approximated\n# randomized algorithms.\n#\n# Note: with any of the above policies, when there are no suitable keys for\n# eviction, Redis will return an error on write operations that require\n# more memory. These are usually commands that create new keys, add data or\n# modify existing keys. A few examples are: SET, INCR, HSET, LPUSH, SUNIONSTORE,\n# SORT (due to the STORE argument), and EXEC (if the transaction includes any\n# command that requires memory).\n#\n# The default is:\n#\n# maxmemory-policy noeviction\n\n# LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated\n# algorithms (in order to save memory), so you can tune it for speed or\n# accuracy. By default Redis will check five keys and pick the one that was\n# used least recently, you can change the sample size using the following\n# configuration directive.\n#\n# The default of 5 produces good enough results. 10 Approximates very closely\n# true LRU but costs more CPU. 3 is faster but not very accurate. The maximum\n# value that can be set is 64.\n#\n# maxmemory-samples 5\n\n# Eviction processing is designed to function well with the default setting.\n# If there is an unusually large amount of write traffic, this value may need to\n# be increased.  Decreasing this value may reduce latency at the risk of\n# eviction processing effectiveness\n#   0 = minimum latency, 10 = default, 100 = process without regard to latency\n#\n# maxmemory-eviction-tenacity 10\n\n# Starting from Redis 5, by default a replica will ignore its maxmemory setting\n# (unless it is promoted to master after a failover or manually). It means\n# that the eviction of keys will be just handled by the master, sending the\n# DEL commands to the replica as keys evict in the master side.\n#\n# This behavior ensures that masters and replicas stay consistent, and is usually\n# what you want, however if your replica is writable, or you want the replica\n# to have a different memory setting, and you are sure all the writes performed\n# to the replica are idempotent, then you may change this default (but be sure\n# to understand what you are doing).\n#\n# Note that since the replica by default does not evict, it may end using more\n# memory than the one set via maxmemory (there are certain buffers that may\n# be larger on the replica, or data structures may sometimes take more memory\n# and so forth). So make sure you monitor your replicas and make sure they\n# have enough memory to never hit a real out-of-memory condition before the\n# master hits the configured maxmemory setting.\n#\n# replica-ignore-maxmemory yes\n\n# Redis reclaims expired keys in two ways: upon access when those keys are\n# found to be expired, and also in background, in what is called the\n# \"active expire key\". The key space is slowly and interactively scanned\n# looking for expired keys to reclaim, so that it is possible to free memory\n# of keys that are expired and will never be accessed again in a short time.\n#\n# The default effort of the expire cycle will try to avoid having more than\n# ten percent of expired keys still in memory, and will try to avoid consuming\n# more than 25% of total memory and to add latency to the system. However\n# it is possible to increase the expire \"effort\" that is normally set to\n# \"1\", to a greater value, up to the value \"10\". At its maximum value the\n# system will use more CPU, longer cycles (and technically may introduce\n# more latency), and will tolerate less already expired keys still present\n# in the system. It's a tradeoff between memory, CPU and latency.\n#\n# active-expire-effort 1\n\n############################# LAZY FREEING ####################################\n\n# Redis has two primitives to delete keys. One is called DEL and is a blocking\n# deletion of the object. It means that the server stops processing new commands\n# in order to reclaim all the memory associated with an object in a synchronous\n# way. If the key deleted is associated with a small object, the time needed\n# in order to execute the DEL command is very small and comparable to most other\n# O(1) or O(log_N) commands in Redis. However if the key is associated with an\n# aggregated value containing millions of elements, the server can block for\n# a long time (even seconds) in order to complete the operation.\n#\n# For the above reasons Redis also offers non blocking deletion primitives\n# such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and\n# FLUSHDB commands, in order to reclaim memory in background. Those commands\n# are executed in constant time. Another thread will incrementally free the\n# object in the background as fast as possible.\n#\n# DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled.\n# It's up to the design of the application to understand when it is a good\n# idea to use one or the other. However the Redis server sometimes has to\n# delete keys or flush the whole database as a side effect of other operations.\n# Specifically Redis deletes objects independently of a user call in the\n# following scenarios:\n#\n# 1) On eviction, because of the maxmemory and maxmemory policy configurations,\n#    in order to make room for new data, without going over the specified\n#    memory limit.\n# 2) Because of expire: when a key with an associated time to live (see the\n#    EXPIRE command) must be deleted from memory.\n# 3) Because of a side effect of a command that stores data on a key that may\n#    already exist. For example the RENAME command may delete the old key\n#    content when it is replaced with another one. Similarly SUNIONSTORE\n#    or SORT with STORE option may delete existing keys. The SET command\n#    itself removes any old content of the specified key in order to replace\n#    it with the specified string.\n# 4) During replication, when a replica performs a full resynchronization with\n#    its master, the content of the whole database is removed in order to\n#    load the RDB file just transferred.\n#\n# In all the above cases the default is to delete objects in a blocking way,\n# like if DEL was called. However you can configure each case specifically\n# in order to instead release memory in a non-blocking way like if UNLINK\n# was called, using the following configuration directives.\n\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\n\n# It is also possible, for the case when to replace the user code DEL calls\n# with UNLINK calls is not easy, to modify the default behavior of the DEL\n# command to act exactly like UNLINK, using the following configuration\n# directive:\n\nlazyfree-lazy-user-del no\n\n# FLUSHDB, FLUSHALL, SCRIPT FLUSH and FUNCTION FLUSH support both asynchronous and synchronous\n# deletion, which can be controlled by passing the [SYNC|ASYNC] flags into the\n# commands. When neither flag is passed, this directive will be used to determine\n# if the data should be deleted asynchronously.\n\nlazyfree-lazy-user-flush no\n\n################################ THREADED I/O #################################\n\n# Redis is mostly single threaded, however there are certain threaded\n# operations such as UNLINK, slow I/O accesses and other things that are\n# performed on side threads.\n#\n# Now it is also possible to handle Redis clients socket reads and writes\n# in different I/O threads. Since especially writing is so slow, normally\n# Redis users use pipelining in order to speed up the Redis performances per\n# core, and spawn multiple instances in order to scale more. Using I/O\n# threads it is possible to easily speedup several times Redis without resorting\n# to pipelining nor sharding of the instance.\n#\n# By default threading is disabled, we suggest enabling it only in machines\n# that have at least 4 or more cores, leaving at least one spare core.\n# We also recommend using threaded I/O only if you actually have performance\n# problems, with Redis instances being able to use a quite big percentage of\n# CPU time, otherwise there is no point in using this feature.\n#\n# So for instance if you have a four cores boxes, try to use 3 I/O\n# threads, if you have a 8 cores, try to use 7 threads. In order to\n# enable I/O threads use the following configuration directive:\n#\n# io-threads 4\n#\n# Setting io-threads to 1 will just use the main thread as usual.\n# When I/O threads are enabled, we not only use threads for writes, that\n# is to thread the write(2) syscall and transfer the client buffers to the\n# socket, but also use threads for reads and protocol parsing.\n#\n# NOTE: If you want to test the Redis speedup using redis-benchmark, make\n# sure you also run the benchmark itself in threaded mode, using the\n# --threads option to match the number of Redis threads, otherwise you'll not\n# be able to notice the improvements.\n\n############################ KERNEL OOM CONTROL ##############################\n\n# On Linux, it is possible to hint the kernel OOM killer on what processes\n# should be killed first when out of memory.\n#\n# Enabling this feature makes Redis actively control the oom_score_adj value\n# for all its processes, depending on their role. The default scores will\n# attempt to have background child processes killed before all others, and\n# replicas killed before masters.\n#\n# Redis supports these options:\n#\n# no:       Don't make changes to oom-score-adj (default).\n# yes:      Alias to \"relative\" see below.\n# absolute: Values in oom-score-adj-values are written as is to the kernel.\n# relative: Values are used relative to the initial value of oom_score_adj when\n#           the server starts and are then clamped to a range of -1000 to 1000.\n#           Because typically the initial value is 0, they will often match the\n#           absolute values.\noom-score-adj no\n\n# When oom-score-adj is used, this directive controls the specific values used\n# for master, replica and background child processes. Values range -2000 to\n# 2000 (higher means more likely to be killed).\n#\n# Unprivileged processes (not root, and without CAP_SYS_RESOURCE capabilities)\n# can freely increase their value, but not decrease it below its initial\n# settings. This means that setting oom-score-adj to \"relative\" and setting the\n# oom-score-adj-values to positive values will always succeed.\noom-score-adj-values 0 200 800\n\n\n#################### KERNEL transparent hugepage CONTROL ######################\n\n# Usually the kernel Transparent Huge Pages control is set to \"madvise\" or\n# \"never\" by default (/sys/kernel/mm/transparent_hugepage/enabled), in which\n# case this config has no effect. On systems in which it is set to \"always\",\n# redis will attempt to disable it specifically for the redis process in order\n# to avoid latency problems specifically with fork(2) and CoW.\n# If for some reason you prefer to keep it enabled, you can set this config to\n# \"no\" and the kernel global to \"always\".\n\ndisable-thp yes\n\n############################## APPEND ONLY MODE ###############################\n\n# By default Redis asynchronously dumps the dataset on disk. This mode is\n# good enough in many applications, but an issue with the Redis process or\n# a power outage may result into a few minutes of writes lost (depending on\n# the configured save points).\n#\n# The Append Only File is an alternative persistence mode that provides\n# much better durability. For instance using the default data fsync policy\n# (see later in the config file) Redis can lose just one second of writes in a\n# dramatic event like a server power outage, or a single write if something\n# wrong with the Redis process itself happens, but the operating system is\n# still running correctly.\n#\n# AOF and RDB persistence can be enabled at the same time without problems.\n# If the AOF is enabled on startup Redis will load the AOF, that is the file\n# with the better durability guarantees.\n#\n# Note that changing this value in a config file of an existing database and\n# restarting the server can lead to data loss. A conversion needs to be done\n# by setting it via CONFIG command on a live server first.\n#\n# Please check https://redis.io/docs/latest/operate/oss_and_stack/management/persistence/ for more information.\n\nappendonly no\n\n# The base name of the append only file.\n#\n# Redis 7 and newer use a set of append-only files to persist the dataset\n# and changes applied to it. There are two basic types of files in use:\n#\n# - Base files, which are a snapshot representing the complete state of the\n#   dataset at the time the file was created. Base files can be either in\n#   the form of RDB (binary serialized) or AOF (textual commands).\n# - Incremental files, which contain additional commands that were applied\n#   to the dataset following the previous file.\n#\n# In addition, manifest files are used to track the files and the order in\n# which they were created and should be applied.\n#\n# Append-only file names are created by Redis following a specific pattern.\n# The file name's prefix is based on the 'appendfilename' configuration\n# parameter, followed by additional information about the sequence and type.\n#\n# For example, if appendfilename is set to appendonly.aof, the following file\n# names could be derived:\n#\n# - appendonly.aof.1.base.rdb as a base file.\n# - appendonly.aof.1.incr.aof, appendonly.aof.2.incr.aof as incremental files.\n# - appendonly.aof.manifest as a manifest file.\n\nappendfilename \"appendonly.aof\"\n\n# For convenience, Redis stores all persistent append-only files in a dedicated\n# directory. The name of the directory is determined by the appenddirname\n# configuration parameter.\n\nappenddirname \"appendonlydir\"\n\n# The fsync() call tells the Operating System to actually write data on disk\n# instead of waiting for more data in the output buffer. Some OS will really flush\n# data on disk, some other OS will just try to do it ASAP.\n#\n# Redis supports three different modes:\n#\n# no: don't fsync, just let the OS flush the data when it wants. Faster.\n# always: fsync after every write to the append only log. Slow, Safest.\n# everysec: fsync only one time every second. Compromise.\n#\n# The default is \"everysec\", as that's usually the right compromise between\n# speed and data safety. It's up to you to understand if you can relax this to\n# \"no\" that will let the operating system flush the output buffer when\n# it wants, for better performances (but if you can live with the idea of\n# some data loss consider the default persistence mode that's snapshotting),\n# or on the contrary, use \"always\" that's very slow but a bit safer than\n# everysec.\n#\n# More details please check the following article:\n# http://antirez.com/post/redis-persistence-demystified.html\n#\n# If unsure, use \"everysec\".\n\n# appendfsync always\nappendfsync everysec\n# appendfsync no\n\n# When the AOF fsync policy is set to always or everysec, and a background\n# saving process (a background save or AOF log background rewriting) is\n# performing a lot of I/O against the disk, in some Linux configurations\n# Redis may block too long on the fsync() call. Note that there is no fix for\n# this currently, as even performing fsync in a different thread will block\n# our synchronous write(2) call.\n#\n# In order to mitigate this problem it's possible to use the following option\n# that will prevent fsync() from being called in the main process while a\n# BGSAVE or BGREWRITEAOF is in progress.\n#\n# This means that while another child is saving, the durability of Redis is\n# the same as \"appendfsync no\". In practical terms, this means that it is\n# possible to lose up to 30 seconds of log in the worst scenario (with the\n# default Linux settings).\n#\n# If you have latency problems turn this to \"yes\". Otherwise leave it as\n# \"no\" that is the safest pick from the point of view of durability.\n\nno-appendfsync-on-rewrite no\n\n# Automatic rewrite of the append only file.\n# Redis is able to automatically rewrite the log file implicitly calling\n# BGREWRITEAOF when the AOF log size grows by the specified percentage.\n#\n# This is how it works: Redis remembers the size of the AOF file after the\n# latest rewrite (if no rewrite has happened since the restart, the size of\n# the AOF at startup is used).\n#\n# This base size is compared to the current size. If the current size is\n# bigger than the specified percentage, the rewrite is triggered. Also\n# you need to specify a minimal size for the AOF file to be rewritten, this\n# is useful to avoid rewriting the AOF file even if the percentage increase\n# is reached but it is still pretty small.\n#\n# Specify a percentage of zero in order to disable the automatic AOF\n# rewrite feature.\n\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\n\n# An AOF file may be found to be truncated at the end during the Redis\n# startup process, when the AOF data gets loaded back into memory.\n# This may happen when the system where Redis is running\n# crashes, especially when an ext4 filesystem is mounted without the\n# data=ordered option (however this can't happen when Redis itself\n# crashes or aborts but the operating system still works correctly).\n#\n# Redis can either exit with an error when this happens, or load as much\n# data as possible (the default now) and start if the AOF file is found\n# to be truncated at the end. The following option controls this behavior.\n#\n# If aof-load-truncated is set to yes, a truncated AOF file is loaded and\n# the Redis server starts emitting a log to inform the user of the event.\n# Otherwise if the option is set to no, the server aborts with an error\n# and refuses to start. When the option is set to no, the user requires\n# to fix the AOF file using the \"redis-check-aof\" utility before to restart\n# the server.\n#\n# Note that if the AOF file will be found to be corrupted in the middle\n# the server will still exit with an error. This option only applies when\n# Redis will try to read more data from the AOF file but not enough bytes\n# will be found.\naof-load-truncated yes\n\n# Redis can create append-only base files in either RDB or AOF formats. Using\n# the RDB format is always faster and more efficient, and disabling it is only\n# supported for backward compatibility purposes.\naof-use-rdb-preamble yes\n\n# Redis supports recording timestamp annotations in the AOF to support restoring\n# the data from a specific point-in-time. However, using this capability changes\n# the AOF format in a way that may not be compatible with existing AOF parsers.\naof-timestamp-enabled no\n\n################################ SHUTDOWN #####################################\n\n# Maximum time to wait for replicas when shutting down, in seconds.\n#\n# During shut down, a grace period allows any lagging replicas to catch up with\n# the latest replication offset before the master exists. This period can\n# prevent data loss, especially for deployments without configured disk backups.\n#\n# The 'shutdown-timeout' value is the grace period's duration in seconds. It is\n# only applicable when the instance has replicas. To disable the feature, set\n# the value to 0.\n#\n# shutdown-timeout 10\n\n# When Redis receives a SIGINT or SIGTERM, shutdown is initiated and by default\n# an RDB snapshot is written to disk in a blocking operation if save points are configured.\n# The options used on signaled shutdown can include the following values:\n# default:  Saves RDB snapshot only if save points are configured.\n#           Waits for lagging replicas to catch up.\n# save:     Forces a DB saving operation even if no save points are configured.\n# nosave:   Prevents DB saving operation even if one or more save points are configured.\n# now:      Skips waiting for lagging replicas.\n# force:    Ignores any errors that would normally prevent the server from exiting.\n#\n# Any combination of values is allowed as long as \"save\" and \"nosave\" are not set simultaneously.\n# Example: \"nosave force now\"\n#\n# shutdown-on-sigint default\n# shutdown-on-sigterm default\n\n################ NON-DETERMINISTIC LONG BLOCKING COMMANDS #####################\n\n# Maximum time in milliseconds for EVAL scripts, functions and in some cases\n# modules' commands before Redis can start processing or rejecting other clients.\n#\n# If the maximum execution time is reached Redis will start to reply to most\n# commands with a BUSY error.\n#\n# In this state Redis will only allow a handful of commands to be executed.\n# For instance, SCRIPT KILL, FUNCTION KILL, SHUTDOWN NOSAVE and possibly some\n# module specific 'allow-busy' commands.\n#\n# SCRIPT KILL and FUNCTION KILL will only be able to stop a script that did not\n# yet call any write commands, so SHUTDOWN NOSAVE may be the only way to stop\n# the server in the case a write command was already issued by the script when\n# the user doesn't want to wait for the natural termination of the script.\n#\n# The default is 5 seconds. It is possible to set it to 0 or a negative value\n# to disable this mechanism (uninterrupted execution). Note that in the past\n# this config had a different name, which is now an alias, so both of these do\n# the same:\n# lua-time-limit 5000\n# busy-reply-threshold 5000\n\n################################ REDIS CLUSTER  ###############################\n\n# Normal Redis instances can't be part of a Redis Cluster; only nodes that are\n# started as cluster nodes can. In order to start a Redis instance as a\n# cluster node enable the cluster support uncommenting the following:\n#\n# cluster-enabled yes\n\n# Every cluster node has a cluster configuration file. This file is not\n# intended to be edited by hand. It is created and updated by Redis nodes.\n# Every Redis Cluster node requires a different cluster configuration file.\n# Make sure that instances running in the same system do not have\n# overlapping cluster configuration file names.\n#\n# cluster-config-file nodes-6379.conf\n\n# Cluster node timeout is the amount of milliseconds a node must be unreachable\n# for it to be considered in failure state.\n# Most other internal time limits are a multiple of the node timeout.\n#\n# cluster-node-timeout 15000\n\n# The cluster port is the port that the cluster bus will listen for inbound connections on. When set \n# to the default value, 0, it will be bound to the command port + 10000. Setting this value requires \n# you to specify the cluster bus port when executing cluster meet.\n# cluster-port 0\n\n# A replica of a failing master will avoid to start a failover if its data\n# looks too old.\n#\n# There is no simple way for a replica to actually have an exact measure of\n# its \"data age\", so the following two checks are performed:\n#\n# 1) If there are multiple replicas able to failover, they exchange messages\n#    in order to try to give an advantage to the replica with the best\n#    replication offset (more data from the master processed).\n#    Replicas will try to get their rank by offset, and apply to the start\n#    of the failover a delay proportional to their rank.\n#\n# 2) Every single replica computes the time of the last interaction with\n#    its master. This can be the last ping or command received (if the master\n#    is still in the \"connected\" state), or the time that elapsed since the\n#    disconnection with the master (if the replication link is currently down).\n#    If the last interaction is too old, the replica will not try to failover\n#    at all.\n#\n# The point \"2\" can be tuned by user. Specifically a replica will not perform\n# the failover if, since the last interaction with the master, the time\n# elapsed is greater than:\n#\n#   (node-timeout * cluster-replica-validity-factor) + repl-ping-replica-period\n#\n# So for example if node-timeout is 30 seconds, and the cluster-replica-validity-factor\n# is 10, and assuming a default repl-ping-replica-period of 10 seconds, the\n# replica will not try to failover if it was not able to talk with the master\n# for longer than 310 seconds.\n#\n# A large cluster-replica-validity-factor may allow replicas with too old data to failover\n# a master, while a too small value may prevent the cluster from being able to\n# elect a replica at all.\n#\n# For maximum availability, it is possible to set the cluster-replica-validity-factor\n# to a value of 0, which means, that replicas will always try to failover the\n# master regardless of the last time they interacted with the master.\n# (However they'll always try to apply a delay proportional to their\n# offset rank).\n#\n# Zero is the only value able to guarantee that when all the partitions heal\n# the cluster will always be able to continue.\n#\n# cluster-replica-validity-factor 10\n\n# Cluster replicas are able to migrate to orphaned masters, that are masters\n# that are left without working replicas. This improves the cluster ability\n# to resist to failures as otherwise an orphaned master can't be failed over\n# in case of failure if it has no working replicas.\n#\n# Replicas migrate to orphaned masters only if there are still at least a\n# given number of other working replicas for their old master. This number\n# is the \"migration barrier\". A migration barrier of 1 means that a replica\n# will migrate only if there is at least 1 other working replica for its master\n# and so forth. It usually reflects the number of replicas you want for every\n# master in your cluster.\n#\n# Default is 1 (replicas migrate only if their masters remain with at least\n# one replica). To disable migration just set it to a very large value or\n# set cluster-allow-replica-migration to 'no'.\n# A value of 0 can be set but is useful only for debugging and dangerous\n# in production.\n#\n# cluster-migration-barrier 1\n\n# Turning off this option allows to use less automatic cluster configuration.\n# It both disables migration to orphaned masters and migration from masters\n# that became empty.\n#\n# Default is 'yes' (allow automatic migrations).\n#\n# cluster-allow-replica-migration yes\n\n# By default Redis Cluster nodes stop accepting queries if they detect there\n# is at least a hash slot uncovered (no available node is serving it).\n# This way if the cluster is partially down (for example a range of hash slots\n# are no longer covered) all the cluster becomes, eventually, unavailable.\n# It automatically returns available as soon as all the slots are covered again.\n#\n# However sometimes you want the subset of the cluster which is working,\n# to continue to accept queries for the part of the key space that is still\n# covered. In order to do so, just set the cluster-require-full-coverage\n# option to no.\n#\n# cluster-require-full-coverage yes\n\n# This option, when set to yes, prevents replicas from trying to failover its\n# master during master failures. However the replica can still perform a\n# manual failover, if forced to do so.\n#\n# This is useful in different scenarios, especially in the case of multiple\n# data center operations, where we want one side to never be promoted if not\n# in the case of a total DC failure.\n#\n# cluster-replica-no-failover no\n\n# This option, when set to yes, allows nodes to serve read traffic while the\n# cluster is in a down state, as long as it believes it owns the slots.\n#\n# This is useful for two cases.  The first case is for when an application\n# doesn't require consistency of data during node failures or network partitions.\n# One example of this is a cache, where as long as the node has the data it\n# should be able to serve it.\n#\n# The second use case is for configurations that don't meet the recommended\n# three shards but want to enable cluster mode and scale later. A\n# master outage in a 1 or 2 shard configuration causes a read/write outage to the\n# entire cluster without this option set, with it set there is only a write outage.\n# Without a quorum of masters, slot ownership will not change automatically.\n#\n# cluster-allow-reads-when-down no\n\n# This option, when set to yes, allows nodes to serve pubsub shard traffic while\n# the cluster is in a down state, as long as it believes it owns the slots.\n#\n# This is useful if the application would like to use the pubsub feature even when\n# the cluster global stable state is not OK. If the application wants to make sure only\n# one shard is serving a given channel, this feature should be kept as yes.\n#\n# cluster-allow-pubsubshard-when-down yes\n\n# Cluster link send buffer limit is the limit on the memory usage of an individual\n# cluster bus link's send buffer in bytes. Cluster links would be freed if they exceed\n# this limit. This is to primarily prevent send buffers from growing unbounded on links\n# toward slow peers (E.g. PubSub messages being piled up).\n# This limit is disabled by default. Enable this limit when 'mem_cluster_links' INFO field\n# and/or 'send-buffer-allocated' entries in the 'CLUSTER LINKS` command output continuously increase.\n# Minimum limit of 1gb is recommended so that cluster link buffer can fit in at least a single\n# PubSub message by default. (client-query-buffer-limit default value is 1gb)\n#\n# cluster-link-sendbuf-limit 0\n\n# Clusters can configure their announced hostname using this config. This is a common use case for \n# applications that need to use TLS Server Name Indication (SNI) or dealing with DNS based\n# routing. By default this value is only shown as additional metadata in the CLUSTER SLOTS\n# command, but can be changed using 'cluster-preferred-endpoint-type' config. This value is \n# communicated along the clusterbus to all nodes, setting it to an empty string will remove \n# the hostname and also propagate the removal.\n#\n# cluster-announce-hostname \"\"\n\n# Clusters can configure an optional nodename to be used in addition to the node ID for\n# debugging and admin information. This name is broadcasted between nodes, so will be used\n# in addition to the node ID when reporting cross node events such as node failures.\n# cluster-announce-human-nodename \"\"\n\n# Clusters can advertise how clients should connect to them using either their IP address,\n# a user defined hostname, or by declaring they have no endpoint. Which endpoint is\n# shown as the preferred endpoint is set by using the cluster-preferred-endpoint-type\n# config with values 'ip', 'hostname', or 'unknown-endpoint'. This value controls how\n# the endpoint returned for MOVED/ASKING requests as well as the first field of CLUSTER SLOTS. \n# If the preferred endpoint type is set to hostname, but no announced hostname is set, a '?' \n# will be returned instead.\n#\n# When a cluster advertises itself as having an unknown endpoint, it's indicating that\n# the server doesn't know how clients can reach the cluster. This can happen in certain \n# networking situations where there are multiple possible routes to the node, and the \n# server doesn't know which one the client took. In this case, the server is expecting\n# the client to reach out on the same endpoint it used for making the last request, but use\n# the port provided in the response.\n#\n# cluster-preferred-endpoint-type ip\n\n# In order to setup your cluster make sure to read the documentation\n# available at https://redis.io web site.\n\n########################## CLUSTER DOCKER/NAT support  ########################\n\n# In certain deployments, Redis Cluster nodes address discovery fails, because\n# addresses are NAT-ted or because ports are forwarded (the typical case is\n# Docker and other containers).\n#\n# In order to make Redis Cluster working in such environments, a static\n# configuration where each node knows its public address is needed. The\n# following four options are used for this scope, and are:\n#\n# * cluster-announce-ip\n# * cluster-announce-port\n# * cluster-announce-tls-port\n# * cluster-announce-bus-port\n#\n# Each instructs the node about its address, client ports (for connections\n# without and with TLS) and cluster message bus port. The information is then\n# published in the header of the bus packets so that other nodes will be able to\n# correctly map the address of the node publishing the information.\n#\n# If tls-cluster is set to yes and cluster-announce-tls-port is omitted or set\n# to zero, then cluster-announce-port refers to the TLS port. Note also that\n# cluster-announce-tls-port has no effect if tls-cluster is set to no.\n#\n# If the above options are not used, the normal Redis Cluster auto-detection\n# will be used instead.\n#\n# Note that when remapped, the bus port may not be at the fixed offset of\n# clients port + 10000, so you can specify any port and bus-port depending\n# on how they get remapped. If the bus-port is not set, a fixed offset of\n# 10000 will be used as usual.\n#\n# Example:\n#\n# cluster-announce-ip 10.1.1.5\n# cluster-announce-tls-port 6379\n# cluster-announce-port 0\n# cluster-announce-bus-port 6380\n\n################################## SLOW LOG ###################################\n\n# The Redis Slow Log is a system to log queries that exceeded a specified\n# execution time. The execution time does not include the I/O operations\n# like talking with the client, sending the reply and so forth,\n# but just the time needed to actually execute the command (this is the only\n# stage of command execution where the thread is blocked and can not serve\n# other requests in the meantime).\n#\n# You can configure the slow log with two parameters: one tells Redis\n# what is the execution time, in microseconds, to exceed in order for the\n# command to get logged, and the other parameter is the length of the\n# slow log. When a new command is logged the oldest one is removed from the\n# queue of logged commands.\n\n# The following time is expressed in microseconds, so 1000000 is equivalent\n# to one second. Note that a negative number disables the slow log, while\n# a value of zero forces the logging of every command.\nslowlog-log-slower-than 10000\n\n# There is no limit to this length. Just be aware that it will consume memory.\n# You can reclaim memory used by the slow log with SLOWLOG RESET.\nslowlog-max-len 128\n\n################################ LATENCY MONITOR ##############################\n\n# The Redis latency monitoring subsystem samples different operations\n# at runtime in order to collect data related to possible sources of\n# latency of a Redis instance.\n#\n# Via the LATENCY command this information is available to the user that can\n# print graphs and obtain reports.\n#\n# The system only logs operations that were performed in a time equal or\n# greater than the amount of milliseconds specified via the\n# latency-monitor-threshold configuration directive. When its value is set\n# to zero, the latency monitor is turned off.\n#\n# By default latency monitoring is disabled since it is mostly not needed\n# if you don't have latency issues, and collecting data has a performance\n# impact, that while very small, can be measured under big load. Latency\n# monitoring can easily be enabled at runtime using the command\n# \"CONFIG SET latency-monitor-threshold &lt;milliseconds&gt;\" if needed.\nlatency-monitor-threshold 0\n\n################################ LATENCY TRACKING ##############################\n\n# The Redis extended latency monitoring tracks the per command latencies and enables\n# exporting the percentile distribution via the INFO latencystats command,\n# and cumulative latency distributions (histograms) via the LATENCY command.\n#\n# By default, the extended latency monitoring is enabled since the overhead\n# of keeping track of the command latency is very small.\n# latency-tracking yes\n\n# By default the exported latency percentiles via the INFO latencystats command\n# are the p50, p99, and p999.\n# latency-tracking-info-percentiles 50 99 99.9\n\n############################# EVENT NOTIFICATION ##############################\n\n# Redis can notify Pub/Sub clients about events happening in the key space.\n# This feature is documented at https://redis.io/docs/latest/develop/use/keyspace-notifications/\n#\n# For instance if keyspace events notification is enabled, and a client\n# performs a DEL operation on key \"foo\" stored in the Database 0, two\n# messages will be published via Pub/Sub:\n#\n# PUBLISH __keyspace@0__:foo del\n# PUBLISH __keyevent@0__:del foo\n#\n# It is possible to select the events that Redis will notify among a set\n# of classes. Every class is identified by a single character:\n#\n#  K     Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.\n#  E     Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.\n#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...\n#  $     String commands\n#  l     List commands\n#  s     Set commands\n#  h     Hash commands\n#  z     Sorted set commands\n#  x     Expired events (events generated every time a key expires)\n#  e     Evicted events (events generated when a key is evicted for maxmemory)\n#  n     New key events (Note: not included in the 'A' class)\n#  t     Stream commands\n#  d     Module key type events\n#  m     Key-miss events (Note: It is not included in the 'A' class)\n#  A     Alias for g$lshzxetd, so that the \"AKE\" string means all the events\n#        (Except key-miss events which are excluded from 'A' due to their\n#         unique nature).\n#\n#  The \"notify-keyspace-events\" takes as argument a string that is composed\n#  of zero or multiple characters. The empty string means that notifications\n#  are disabled.\n#\n#  Example: to enable list and generic events, from the point of view of the\n#           event name, use:\n#\n#  notify-keyspace-events Elg\n#\n#  Example 2: to get the stream of the expired keys subscribing to channel\n#             name __keyevent@0__:expired use:\n#\n#  notify-keyspace-events Ex\n#\n#  By default all notifications are disabled because most users don't need\n#  this feature and the feature has some overhead. Note that if you don't\n#  specify at least one of K or E, no events will be delivered.\nnotify-keyspace-events \"\"\n\n############################### ADVANCED CONFIG ###############################\n\n# Hashes are encoded using a memory efficient data structure when they have a\n# small number of entries, and the biggest entry does not exceed a given\n# threshold. These thresholds can be configured using the following directives.\nhash-max-listpack-entries 512\nhash-max-listpack-value 64\n\n# Lists are also encoded in a special way to save a lot of space.\n# The number of entries allowed per internal list node can be specified\n# as a fixed maximum size or a maximum number of elements.\n# For a fixed maximum size, use -5 through -1, meaning:\n# -5: max size: 64 Kb  &lt;-- not recommended for normal workloads\n# -4: max size: 32 Kb  &lt;-- not recommended\n# -3: max size: 16 Kb  &lt;-- probably not recommended\n# -2: max size: 8 Kb   &lt;-- good\n# -1: max size: 4 Kb   &lt;-- good\n# Positive numbers mean store up to _exactly_ that number of elements\n# per list node.\n# The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),\n# but if your use case is unique, adjust the settings as necessary.\nlist-max-listpack-size -2\n\n# Lists may also be compressed.\n# Compress depth is the number of quicklist ziplist nodes from *each* side of\n# the list to *exclude* from compression.  The head and tail of the list\n# are always uncompressed for fast push/pop operations.  Settings are:\n# 0: disable all list compression\n# 1: depth 1 means \"don't start compressing until after 1 node into the list,\n#    going from either the head or tail\"\n#    So: [head]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[tail]\n#    [head], [tail] will always be uncompressed; inner nodes will compress.\n# 2: [head]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[tail]\n#    2 here means: don't compress head or head-&gt;next or tail-&gt;prev or tail,\n#    but compress all nodes between them.\n# 3: [head]-&gt;[next]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[prev]-&gt;[tail]\n# etc.\nlist-compress-depth 0\n\n# Sets have a special encoding when a set is composed\n# of just strings that happen to be integers in radix 10 in the range\n# of 64 bit signed integers.\n# The following configuration setting sets the limit in the size of the\n# set in order to use this special memory saving encoding.\nset-max-intset-entries 512\n\n# Sets containing non-integer values are also encoded using a memory efficient\n# data structure when they have a small number of entries, and the biggest entry\n# does not exceed a given threshold. These thresholds can be configured using\n# the following directives.\nset-max-listpack-entries 128\nset-max-listpack-value 64\n\n# Similarly to hashes and lists, sorted sets are also specially encoded in\n# order to save a lot of space. This encoding is only used when the length and\n# elements of a sorted set are below the following limits:\nzset-max-listpack-entries 128\nzset-max-listpack-value 64\n\n# HyperLogLog sparse representation bytes limit. The limit includes the\n# 16 bytes header. When a HyperLogLog using the sparse representation crosses\n# this limit, it is converted into the dense representation.\n#\n# A value greater than 16000 is totally useless, since at that point the\n# dense representation is more memory efficient.\n#\n# The suggested value is ~ 3000 in order to have the benefits of\n# the space efficient encoding without slowing down too much PFADD,\n# which is O(N) with the sparse encoding. The value can be raised to\n# ~ 10000 when CPU is not a concern, but space is, and the data set is\n# composed of many HyperLogLogs with cardinality in the 0 - 15000 range.\nhll-sparse-max-bytes 3000\n\n# Streams macro node max size / items. The stream data structure is a radix\n# tree of big nodes that encode multiple items inside. Using this configuration\n# it is possible to configure how big a single node can be in bytes, and the\n# maximum number of items it may contain before switching to a new node when\n# appending new stream entries. If any of the following settings are set to\n# zero, the limit is ignored, so for instance it is possible to set just a\n# max entries limit by setting max-bytes to 0 and max-entries to the desired\n# value.\nstream-node-max-bytes 4096\nstream-node-max-entries 100\n\n# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in\n# order to help rehashing the main Redis hash table (the one mapping top-level\n# keys to values). The hash table implementation Redis uses (see dict.c)\n# performs a lazy rehashing: the more operation you run into a hash table\n# that is rehashing, the more rehashing \"steps\" are performed, so if the\n# server is idle the rehashing is never complete and some more memory is used\n# by the hash table.\n#\n# The default is to use this millisecond 10 times every second in order to\n# actively rehash the main dictionaries, freeing memory when possible.\n#\n# If unsure:\n# use \"activerehashing no\" if you have hard latency requirements and it is\n# not a good thing in your environment that Redis can reply from time to time\n# to queries with 2 milliseconds delay.\n#\n# use \"activerehashing yes\" if you don't have such hard requirements but\n# want to free memory asap when possible.\nactiverehashing yes\n\n# The client output buffer limits can be used to force disconnection of clients\n# that are not reading data from the server fast enough for some reason (a\n# common reason is that a Pub/Sub client can't consume messages as fast as the\n# publisher can produce them).\n#\n# The limit can be set differently for the three different classes of clients:\n#\n# normal -&gt; normal clients including MONITOR clients\n# replica -&gt; replica clients\n# pubsub -&gt; clients subscribed to at least one pubsub channel or pattern\n#\n# The syntax of every client-output-buffer-limit directive is the following:\n#\n# client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;\n#\n# A client is immediately disconnected once the hard limit is reached, or if\n# the soft limit is reached and remains reached for the specified number of\n# seconds (continuously).\n# So for instance if the hard limit is 32 megabytes and the soft limit is\n# 16 megabytes / 10 seconds, the client will get disconnected immediately\n# if the size of the output buffers reach 32 megabytes, but will also get\n# disconnected if the client reaches 16 megabytes and continuously overcomes\n# the limit for 10 seconds.\n#\n# By default normal clients are not limited because they don't receive data\n# without asking (in a push way), but just after a request, so only\n# asynchronous clients may create a scenario where data is requested faster\n# than it can read.\n#\n# Instead there is a default limit for pubsub and replica clients, since\n# subscribers and replicas receive data in a push fashion.\n#\n# Note that it doesn't make sense to set the replica clients output buffer\n# limit lower than the repl-backlog-size config (partial sync will succeed\n# and then replica will get disconnected).\n# Such a configuration is ignored (the size of repl-backlog-size will be used).\n# This doesn't have memory consumption implications since the replica client\n# will share the backlog buffers memory.\n#\n# Both the hard or the soft limit can be disabled by setting them to zero.\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit replica 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\n\n# Client query buffers accumulate new commands. They are limited to a fixed\n# amount by default in order to avoid that a protocol desynchronization (for\n# instance due to a bug in the client) will lead to unbound memory usage in\n# the query buffer. However you can configure it here if you have very special\n# needs, such as a command with huge argument, or huge multi/exec requests or alike.\n#\n# client-query-buffer-limit 1gb\n\n# In some scenarios client connections can hog up memory leading to OOM\n# errors or data eviction. To avoid this we can cap the accumulated memory\n# used by all client connections (all pubsub and normal clients). Once we\n# reach that limit connections will be dropped by the server freeing up\n# memory. The server will attempt to drop the connections using the most \n# memory first. We call this mechanism \"client eviction\".\n#\n# Client eviction is configured using the maxmemory-clients setting as follows:\n# 0 - client eviction is disabled (default)\n#\n# A memory value can be used for the client eviction threshold,\n# for example:\n# maxmemory-clients 1g\n#\n# A percentage value (between 1% and 100%) means the client eviction threshold\n# is based on a percentage of the maxmemory setting. For example to set client\n# eviction at 5% of maxmemory:\n# maxmemory-clients 5%\n\n# In the Redis protocol, bulk requests, that are, elements representing single\n# strings, are normally limited to 512 mb. However you can change this limit\n# here, but must be 1mb or greater\n#\n# proto-max-bulk-len 512mb\n\n# Redis calls an internal function to perform many background tasks, like\n# closing connections of clients in timeout, purging expired keys that are\n# never requested, and so forth.\n#\n# Not all tasks are performed with the same frequency, but Redis checks for\n# tasks to perform according to the specified \"hz\" value.\n#\n# By default \"hz\" is set to 10. Raising the value will use more CPU when\n# Redis is idle, but at the same time will make Redis more responsive when\n# there are many keys expiring at the same time, and timeouts may be\n# handled with more precision.\n#\n# The range is between 1 and 500, however a value over 100 is usually not\n# a good idea. Most users should use the default of 10 and raise this up to\n# 100 only in environments where very low latency is required.\nhz 10\n\n# Normally it is useful to have an HZ value which is proportional to the\n# number of clients connected. This is useful in order, for instance, to\n# avoid too many clients are processed for each background task invocation\n# in order to avoid latency spikes.\n#\n# Since the default HZ value by default is conservatively set to 10, Redis\n# offers, and enables by default, the ability to use an adaptive HZ value\n# which will temporarily raise when there are many connected clients.\n#\n# When dynamic HZ is enabled, the actual configured HZ will be used\n# as a baseline, but multiples of the configured HZ value will be actually\n# used as needed once more clients are connected. In this way an idle\n# instance will use very little CPU time while a busy instance will be\n# more responsive.\ndynamic-hz yes\n\n# When a child rewrites the AOF file, if the following option is enabled\n# the file will be fsync-ed every 4 MB of data generated. This is useful\n# in order to commit the file to the disk more incrementally and avoid\n# big latency spikes.\naof-rewrite-incremental-fsync yes\n\n# When redis saves RDB file, if the following option is enabled\n# the file will be fsync-ed every 4 MB of data generated. This is useful\n# in order to commit the file to the disk more incrementally and avoid\n# big latency spikes.\nrdb-save-incremental-fsync yes\n\n# Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good\n# idea to start with the default settings and only change them after investigating\n# how to improve the performances and how the keys LFU change over time, which\n# is possible to inspect via the OBJECT FREQ command.\n#\n# There are two tunable parameters in the Redis LFU implementation: the\n# counter logarithm factor and the counter decay time. It is important to\n# understand what the two parameters mean before changing them.\n#\n# The LFU counter is just 8 bits per key, it's maximum value is 255, so Redis\n# uses a probabilistic increment with logarithmic behavior. Given the value\n# of the old counter, when a key is accessed, the counter is incremented in\n# this way:\n#\n# 1. A random number R between 0 and 1 is extracted.\n# 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).\n# 3. The counter is incremented only if R &lt; P.\n#\n# The default lfu-log-factor is 10. This is a table of how the frequency\n# counter changes with a different number of accesses with different\n# logarithmic factors:\n#\n# +--------+------------+------------+------------+------------+------------+\n# | factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |\n# +--------+------------+------------+------------+------------+------------+\n# | 0      | 104        | 255        | 255        | 255        | 255        |\n# +--------+------------+------------+------------+------------+------------+\n# | 1      | 18         | 49         | 255        | 255        | 255        |\n# +--------+------------+------------+------------+------------+------------+\n# | 10     | 10         | 18         | 142        | 255        | 255        |\n# +--------+------------+------------+------------+------------+------------+\n# | 100    | 8          | 11         | 49         | 143        | 255        |\n# +--------+------------+------------+------------+------------+------------+\n#\n# NOTE: The above table was obtained by running the following commands:\n#\n#   redis-benchmark -n 1000000 incr foo\n#   redis-cli object freq foo\n#\n# NOTE 2: The counter initial value is 5 in order to give new objects a chance\n# to accumulate hits.\n#\n# The counter decay time is the time, in minutes, that must elapse in order\n# for the key counter to be decremented.\n#\n# The default value for the lfu-decay-time is 1. A special value of 0 means we\n# will never decay the counter.\n#\n# lfu-log-factor 10\n# lfu-decay-time 1\n\n\n# The maximum number of new client connections accepted per event-loop cycle. This configuration\n# is set independently for TLS connections.\n#\n# By default, up to 10 new connection will be accepted per event-loop cycle for normal connections\n# and up to 1 new connection per event-loop cycle for TLS connections.\n#\n# Adjusting this to a larger number can slightly improve efficiency for new connections\n# at the risk of causing timeouts for regular commands on established connections.  It is\n# not advised to change this without ensuring that all clients have limited connection\n# pools and exponential backoff in the case of command/connection timeouts. \n#\n# If your application is establishing a large number of new connections per second you should\n# also consider tuning the value of tcp-backlog, which allows the kernel to buffer more\n# pending connections before dropping or rejecting connections. \n#\n# max-new-connections-per-cycle 10\n# max-new-tls-connections-per-cycle 1\n\n\n########################### ACTIVE DEFRAGMENTATION #######################\n#\n# What is active defragmentation?\n# -------------------------------\n#\n# Active (online) defragmentation allows a Redis server to compact the\n# spaces left between small allocations and deallocations of data in memory,\n# thus allowing to reclaim back memory.\n#\n# Fragmentation is a natural process that happens with every allocator (but\n# less so with Jemalloc, fortunately) and certain workloads. Normally a server\n# restart is needed in order to lower the fragmentation, or at least to flush\n# away all the data and create it again. However thanks to this feature\n# implemented by Oran Agra for Redis 4.0 this process can happen at runtime\n# in a \"hot\" way, while the server is running.\n#\n# Basically when the fragmentation is over a certain level (see the\n# configuration options below) Redis will start to create new copies of the\n# values in contiguous memory regions by exploiting certain specific Jemalloc\n# features (in order to understand if an allocation is causing fragmentation\n# and to allocate it in a better place), and at the same time, will release the\n# old copies of the data. This process, repeated incrementally for all the keys\n# will cause the fragmentation to drop back to normal values.\n#\n# Important things to understand:\n#\n# 1. This feature is disabled by default, and only works if you compiled Redis\n#    to use the copy of Jemalloc we ship with the source code of Redis.\n#    This is the default with Linux builds.\n#\n# 2. You never need to enable this feature if you don't have fragmentation\n#    issues.\n#\n# 3. Once you experience fragmentation, you can enable this feature when\n#    needed with the command \"CONFIG SET activedefrag yes\".\n#\n# The configuration parameters are able to fine tune the behavior of the\n# defragmentation process. If you are not sure about what they mean it is\n# a good idea to leave the defaults untouched.\n\n# Active defragmentation is disabled by default\n# activedefrag no\n\n# Minimum amount of fragmentation waste to start active defrag\n# active-defrag-ignore-bytes 100mb\n\n# Minimum percentage of fragmentation to start active defrag\n# active-defrag-threshold-lower 10\n\n# Maximum percentage of fragmentation at which we use maximum effort\n# active-defrag-threshold-upper 100\n\n# Minimal effort for defrag in CPU percentage, to be used when the lower\n# threshold is reached\n# active-defrag-cycle-min 1\n\n# Maximal effort for defrag in CPU percentage, to be used when the upper\n# threshold is reached\n# active-defrag-cycle-max 25\n\n# Maximum number of set/hash/zset/list fields that will be processed from\n# the main dictionary scan\n# active-defrag-max-scan-fields 1000\n\n# Jemalloc background thread for purging will be enabled by default\njemalloc-bg-thread yes\n\n# It is possible to pin different threads and processes of Redis to specific\n# CPUs in your system, in order to maximize the performances of the server.\n# This is useful both in order to pin different Redis threads in different\n# CPUs, but also in order to make sure that multiple Redis instances running\n# in the same host will be pinned to different CPUs.\n#\n# Normally you can do this using the \"taskset\" command, however it is also\n# possible to this via Redis configuration directly, both in Linux and FreeBSD.\n#\n# You can pin the server/IO threads, bio threads, aof rewrite child process, and\n# the bgsave child process. The syntax to specify the cpu list is the same as\n# the taskset command:\n#\n# Set redis server/io threads to cpu affinity 0,2,4,6:\n# server-cpulist 0-7:2\n#\n# Set bio threads to cpu affinity 1,3:\n# bio-cpulist 1,3\n#\n# Set aof rewrite child process to cpu affinity 8,9,10,11:\n# aof-rewrite-cpulist 8-11\n#\n# Set bgsave child process to cpu affinity 1,10,11\n# bgsave-cpulist 1,10-11\n\n# In some cases redis will emit warnings and even refuse to start if it detects\n# that the system is in bad state, it is possible to suppress these warnings\n# by setting the following config which takes a space delimited list of warnings\n# to suppress\n#\n# ignore-warnings ARM64-COW-BUG\n</code></pre></p>"},{"location":"riscv%E6%B1%87%E7%BC%96/ISA/","title":"ISA\u6307\u4ee4\u96c6\u67b6\u6784","text":"<p>ISA == Instruction Set Architecture \u6307\u4ee4\u96c6\u67b6\u6784 ISA\u5b9a\u4e49\u4e86\u5bc4\u5b58\u5668\uff0c\u6307\u4ee4\uff0c\u5bfb\u5740\u65b9\u5f0f\uff0c\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u5f02\u5e38\u4e2d\u65ad\u7b49\u3002</p> <p>\u6700\u91cd\u8981\u7684\u5c31\u662f\u6709\u54ea\u4e9b\u5bc4\u5b58\u5668\uff0c\u6709\u54ea\u4e9b\u6307\u4ee4\u3002</p> <p>CISC \u590d\u6742\u6307\u4ee4\u96c6 RISC \u7cbe\u7b80\u6307\u4ee4\u96c6</p> <p>riscv\u662f\u7cbe\u7b80\u6307\u4ee4\u96c6\u3002</p>"},{"location":"riscv%E6%B1%87%E7%BC%96/ISA/#riscvisa","title":"RISCV\u7684ISA\u547d\u540d\u65b9\u5f0f","text":"<p>riscv\u6709\u5f88\u591a\u7248\u672c\u7684ISA\uff0c\u4f8b\u5982RV32\uff0cRV64 \u8fd9\u91cc\u768432\uff0c64\u662f\u6307\u4ee4\u96c6\u5b57\u6b3e\uff0c\u5c31\u662f\u901a\u7528\u5bc4\u5b58\u5668\u7684\u5bbd\u5ea6\uff0c\u6ce8\u610f\u4e0d\u662f\u6307\u4ee4\u7684\u5bbd\u5ea6\u3002 riscv\u662f\u5206\u5c42\u8bbe\u8ba1\u7684\uff0c\u6240\u4ee5\u5f88\u591a\u6307\u4ee4\u6a21\u5757\u90fd\u662f\u6e10\u8fdb\u5f0f\u7684\uff0c\u6bd4\u5982\u6709\u4e00\u4e2aI\u96c6\u5408\u53ea\u5305\u542b\u6574\u9664\u64cd\u4f5c\u7684\u6307\u4ee4\uff0cF\u8868\u793a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u7684\u64cd\u4f5c\u6307\u4ee4\uff0cD\u662f\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u7684\u6307\u4ee4\uff0c\u7b49\u7b49\uff0c\u6309\u9700\u7ec4\u5408\u3002</p> <p>A\u662f\u539f\u5b50\u6307\u4ee4\u96c6\u5408 C\u662f\u538b\u7f29\u6307\u4ee4\u96c6\u5408...</p> <p>IMAFD = G\uff0c RV64GC\u8868\u793a\u652f\u6301 IMAFD\uff0cC\u8fd9\u4e9b\u6307\u4ee4\u96c6\uff0c\u768464\u4f4d\u3002</p>"},{"location":"riscv%E6%B1%87%E7%BC%96/ISA/#_1","title":"\u5bc4\u5b58\u5668","text":"<p>32\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\uff0cx0-x31, PC\u5bc4\u5b58\u5668\uff08\u7a0b\u5e8f\u6307\u9488\uff09 RV32\u7684\u5bc4\u5b58\u5668\u5bbd\u5ea6\u662f32\u4f4d\uff0cRV64\u662f64\u4f4d\uff0c\u4f46\u662f\u6307\u4ee4\u90fd\u662f32\u4f4d\u7684\uff0c\u8fd9\u4e00\u70b9\u8981\u6ce8\u610f\u3002</p> <p>\u8fd9\u4e9b\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u7684\u4f7f\u7528\u89c4\u8303\uff0c\u5728ABI\uff08application binary interface\uff09\u4e2d\u5b9a\u4e49\uff0c\u4f8b\u5982\u6bcf\u4e2a\u5bc4\u5b58\u5668\u5b9e\u9645\u4e0a\u6709\u81ea\u5df1\u7684\u540d\u5b57\uff0c\u548c\u4f7f\u7528\u65f6\u7684\u60ef\u4f8b\u3002</p>"},{"location":"riscv%E6%B1%87%E7%BC%96/ISA/#_2","title":"\u7279\u6743\u7ea7\u522b","text":"<p>\u7528\u4e24\u4e2a\u6bd4\u7279\u6765\u8868\u793a\u7279\u6743\u7ea7\u522b\uff0c\u6709\u4e09\u79cd\u7279\u6743\u7ea7\u522b\uff0cmachine\uff0csupervisor\uff0cuser\u3002 supervisor\u662f\u7528\u6765\u5b9e\u73b0\u5177\u6709\u865a\u62df\u5185\u5b58\u548c\u8fdb\u7a0b\u6982\u5ff5\u7684\u64cd\u4f5c\u7cfb\u7edf\u7684\u7ea7\u522b\uff0c\u5c31\u662fos\u8bfe\u4e0a\u5b66\u5230\u7684\u5185\u6838\u6a21\u5f0f\u3002 machain\u7c7b\u4f3c\u4e8e\u88f8\u91d1\u5c5e\u6a21\u5f0f\uff0c\u7ea7\u522b\u6700\u9ad8\uff0c\u80fd\u64cd\u4f5c\u7684\u5bc4\u5b58\u5668\u6700\u591a\u3002</p> <p>CSR(control status register) \u63a7\u5236\u72b6\u6001\u5bc4\u5b58\u5668\u3002\u4e0d\u540c\u7684\u7279\u6743\u7ea7\u522b\u5177\u5907\u5404\u81ea\u7684csr\u3002</p>"},{"location":"riscv%E6%B1%87%E7%BC%96/%E9%A1%B5%E8%A1%A8/","title":"\u9875\u8868","text":"<p>\u865a\u62df\u5185\u5b58\u662f\u4ec0\u4e48\uff0c\u4e3a\u4ec0\u4e48\u9700\u8981\u9875\u8868\uff0c\u9875\u8868\u4fdd\u5b58\u4e86\u4ec0\u4e48\uff0c\u9875\u8868\u548cMMU\u5982\u4f55\u914d\u5408\uff1f</p>"},{"location":"riscv%E6%B1%87%E7%BC%96/%E9%A1%B5%E8%A1%A8/#_2","title":"\u865a\u62df\u5185\u5b58","text":"<p>\u5728\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u7684\u89c6\u89d2\uff0c\u4eff\u4f5b\u81ea\u5df1\u5360\u7528\u4e86\u201c\u5168\u90e8\u7684\u5185\u5b58\u201d\u3002\u2014\u2014\u2014\u2014 \u8fd9\u91cc\u7684\u5185\u5b58\u6307\u7684\u5c31\u662f\u865a\u62df\u5185\u5b58\u3002</p> <p>\u56e0\u4e3a\u7a0b\u5e8f\u7684\u5c40\u90e8\u6027\uff0c\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u4ee3\u7801\u53ea\u5360\u5185\u5b58\u7684\u4e00\u70b9\u70b9\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\uff0c\u6240\u8c13\u7684\u5360\u7528\u5168\u90e8\u7684\u5185\u5bb9\uff0c\u5e76\u4e0d\u662f\u771f\u7684\u5360\u7528\u3002</p> <p>\u865a\u62df\u5185\u5b58\u548c\u7269\u7406\u5185\u5b58\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u5c31\u9700\u8981\u6709\u4e00\u4e2a\u4fdd\u5b58\u8fd9\u4e2a\u6620\u5c04\u5173\u7cfb\u7684\u5730\u65b9\uff0c\u8fd9\u5c31\u662f\u9875\u8868\u3002</p>"},{"location":"riscv%E6%B1%87%E7%BC%96/%E9%A1%B5%E8%A1%A8/#_3","title":"\u9875\u8868","text":"<p>\u9875\u8868\u5c31\u662f\u4e00\u4e2a\u6620\u5c04\u8868\uff0c\u5b83\u4e00\u822c\u5b58\u5728\u4e8e\u8fdb\u7a0b\u63a7\u5236\u5757PCB\u5f53\u4e2d\uff0c\u5f53\u8fdb\u7a0b\u4e0aCPU\u7684\u65f6\u5019\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u628a\u8fd9\u4e2a\u8fdb\u7a0b\u7684\u9875\u8868\u8d77\u59cb\u5730\u5740\u653e\u5230\u7279\u5b9a\u7684\u786c\u4ef6\u5f53\u4e2d\uff0c\u914d\u5408MMU\u6765\u8fdb\u884c\u5730\u5740\u7684\u7ffb\u8bd1\u3002</p> <p>\u6765\u8c08\u8c08\u9875\u8868\u6620\u5c04\u7684\u4e24\u4e2a\u4e1c\u897f\uff0c\u4e00\u4e2a\u662f\u7269\u7406\u5730\u5740\uff0c\u4e00\u4e2a\u662f\u865a\u62df\u5730\u5740\u3002</p>"},{"location":"riscv%E6%B1%87%E7%BC%96/%E9%A1%B5%E8%A1%A8/#_4","title":"\u7269\u7406\u5730\u5740\u7684\u5212\u5206","text":"<p>\u7269\u7406\u5185\u5b58\uff0c\u6309\u7167\u7279\u5b9a\u7684\u9875\u9762\u5927\u5c0f\uff0c\u4f8b\u59824kb\uff0c\u5207\u5206\u4e3a\u5f88\u591a\u7684\u5c0f\u5355\u5143\uff0c\u8fd9\u4e9b\u5355\u5143\u79f0\u4e3a\u7269\u7406\u9875\u9762\u3002 \u8fd9\u4e9b\u5355\u5143\u6709\u81ea\u5df1\u7684\u7f16\u53f7\u3002\u4f8b\u59824GB\u7684\u5185\u5b58\uff0c\u5982\u679c\u6309\u71674KB\u4e3a\u4e00\u4e2a\u9875\u9762\u6765\u5212\u5206\uff0c\u5c31\u67092^20\u8fd9\u4e48\u591a\u9875\u9762\u3002</p>"},{"location":"riscv%E6%B1%87%E7%BC%96/%E9%A1%B5%E8%A1%A8/#_5","title":"\u865a\u62df\u5730\u5740\u7684\u5212\u5206","text":"<p>\u865a\u62df\u5730\u5740\u7684\u7a7a\u95f4\u53ef\u4ee5\u548c\u7269\u7406\u5730\u5740\u4e00\u6837\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u4e00\u6837\uff08\u5728rv32I\u91cc\u9762\u53ef\u4ee5\u770b\u5230\u8fd9\u4e00\u70b9\uff09\u3002\u4f46\u662f\u5212\u5206\u7684\u6700\u5c0f\u5355\u5143\u8fd8\u662f\u4e00\u6837\u7684\uff0c\u4f8b\u5982\u90fd\u662f4KB\uff0c\u865a\u62df\u5730\u5740\u9875\u9762\u6709\u65f6\u5019\u4e5f\u53eb\u9875\u6846\u3002\u603b\u4e4b\u865a\u62df\u9875\u9762\u53ef\u4ee5\u548c\u7269\u7406\u5730\u5740\u9875\u9762\u4e4b\u95f4\u4ea7\u751f\u5bf9\u5e94\u7684\u5173\u7cfb\uff0c\u6240\u8c13\u7684\u9875\u8868\u6620\u5c04\uff0c\u4e5f\u5c31\u662f\u6620\u5c04\u9875\u9762\u548c\u9875\u6846\u3002</p>"},{"location":"riscv%E6%B1%87%E7%BC%96/%E9%A1%B5%E8%A1%A8/#_6","title":"\u9875\u8868\u9879","text":"<p>\u9875\u8868\u5b9e\u9645\u4e0a\u5c31\u50cf\u662f\u4e00\u4e2a\u5927\u6570\u7ec4\uff0c\u5b83\u7684index\uff0c\u5c31\u662f\u865a\u62df\u5730\u5740\u7684\u7f16\u53f7\uff0c\u6240\u5b58\u7684\u7f16\u53f7\uff0c\u5c31\u662f\u7269\u7406\u9875\u9762\u7684\u7f16\u53f7\uff0c\u5c31\u8fd9\u4e48\u7b80\u5355\u3002</p>"},{"location":"riscv%E6%B1%87%E7%BC%96/%E9%A1%B5%E8%A1%A8/#_7","title":"\u5730\u5740\u7ffb\u8bd1\u8fc7\u7a0b","text":"<p>\u4f8b\u5982\u5728\u4ee3\u7801\u4e2d\u67d0\u5904\uff0c\u8981\u8bbf\u95ee\u67d0\u4e2a\u865a\u62df\u5730\u5740\uff0c\u8fd9\u4e2a\u865a\u62df\u5730\u5740\uff0c\u5728\u5206\u9875\u4e86\u7684\u865a\u62df\u5730\u5740\u4e2d\uff0c\u4e00\u5b9a\u5728\u67d0\u4e2a\u9875\u6846\u4e0a\uff0c\u8fd9\u4e2a\u9875\u6846\u53c8\u5bf9\u5e94\u4e00\u4e2a\u5b9e\u9645\u7684\u7269\u7406\u9875\u9762\uff0c\u7ecf\u8fc7MMU\uff08\u5185\u5b58\u7ba1\u7406\u5355\u5143\uff09\u67e5\u8be2\u9875\u8868\uff0c\u5c31\u627e\u5230\u4e86\u5b9e\u9645\u7684\u9875\u9762\u5728\u7269\u7406\u5185\u5b58\u4e0a\u7684\u4f4d\u7f6e\uff0c\u800c\u8fd9\u4e2a\u5730\u5740\u5728\u9875\u6846\u548c\u9875\u9762\u4e0a\u7684\u4f4d\u7f6e\uff0c\u662f\u4e00\u6837\u7684\u3002</p> <p>\u8fd9\u4e2a\u201c\u5730\u5740\u5728\u9875\u6846\u548c\u9875\u9762\u4e0a\u7684\u4f4d\u7f6e\u201d \u53eb\u505a\u9875\u5185\u504f\u79fboffset\u3002</p>"},{"location":"riscv%E6%B1%87%E7%BC%96/%E9%A1%B5%E8%A1%A8/#_8","title":"\u591a\u7ea7\u9875\u8868","text":"<p>\u4e0a\u9762\u63d0\u5230\u7684\uff0c\u76f4\u63a5\u4fdd\u5b58\u6620\u5c04\u5230\u9875\u8868\u4e2d\uff0c\u67e5\u7684\u65f6\u5019\u4e5f\u53ea\u9700\u8981\u76f4\u63a5\u67e5\u8be2\u9875\u8868\u3002\u8fd9\u79cd\u7b80\u5355\u7684\u6a21\u578b\u5c31\u53eb\u4e00\u7ea7\u9875\u8868\u3002 \u4e00\u7ea7\u9875\u8868\u5b58\u5728\u4e00\u4e2a\u8f83\u660e\u663e\u7684\u95ee\u9898\uff1a \u8ba9\u6211\u4eec\u5047\u8bbe\u73b0\u5728\u6709 4GB \u7684\u7269\u7406\u5185\u5b58\uff0c\u6bcf\u4e2a\u9875\u9762\u7684\u5927\u5c0f \u8bbe\u5b9a\u4e3a 4KB\u3002 \u90a3\u4e48\u603b\u5171\u6709 4GB = 2^32B \u4e3b\u5b58\u7a7a\u95f4\uff0c\u6bcf\u4e2a\u6700\u5c0f\u5355\u5143\uff08\u9875\u9762\uff09\u5360\u636e 2^12B\u7684 \u7a7a\u95f4\u3002\u603b\u5c31\u67092^20\u4e2a\u9875\u9762\u3002 \u7ed90 - 2^20-1 \u6807\u53f7\uff0c\u9700\u8981 20 \u4e2a\u6bd4\u7279\u4f4d\u3002\u90a3\u4e48\u6bcf\u4e2a\u7f16\u53f7\u672c\u8eab\u9700\u8981\u5360\u636e3\u4e2abyte \u4e5f\u5c31\u662f24bit\u3002 \u5f53\u9875\u8868\u8bb0\u5f55\u4e86\u5f88\u591a\u9879\u7684\u65f6\u5019\uff08\u6700\u591a\u662f2^20\u9879\uff09\uff0c\u6700\u5927\u53ef\u80fd\u9700\u8981 2^20 * 3 byte = 3MB\u5185\u5b58\u3002 3MB\u5185\u5b58\u76f8\u5bf9\u4e8e4GB\u6765\u8bf4\uff0c\u786e\u5b9e\u4e0d\u7b97\u5f88\u591a\uff0c\u4f46\u662f\u8981\u6ce8\u610f\uff0c\u9875\u8868\u662f\u9700\u8981\u8fde\u7eed\u5b58\u653e\u7684\uff0c\u800c\u8fde\u7eed\u5b58\u653e\u76843MB\uff0c\u9700\u8981\u5360\u636e\u591a\u5c11\u9875\u9875\u9762\uff1f 3MB / 4KB \u7ea6\u7b49\u4e8e 1k\u4e2a\u8fde\u7eed\u7684\u9875\u9762\uff0c\u8fd9\u662f\u4e0d\u73b0\u5b9e\u7684\u3002</p> <p>\u6ce8\u610f\uff0c\u4e0a\u9762\u5047\u8bbe\u4f7f\u75283\u4e2abyte\u6765\u4fdd\u5b58\u4e00\u4e2a\u9875\u9762\u7f16\u53f7\uff0c\u5b9e\u9645\u4e0a\u5e94\u8be5\u4f7f\u75284KB\uff0c\u4e3a\u4e86\u5bf9\u9f50\u3002</p> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a \u201c\u592a\u591a\u8fde\u7eed\u9875\u9762\u201d \u4e0d\u53ef\u80fd\u88ab\u63d0\u4f9b\u7684\u95ee\u9898\uff0c\u5c31\u9700\u8981\u91c7\u7528\u591a\u7ea7\u9875\u8868\u7684\u6280\u672f\u3002</p>"},{"location":"riscv%E6%B1%87%E7%BC%96/%E9%A1%B5%E8%A1%A8/#riscv","title":"riscv\u7684\u9875\u8868\u673a\u5236","text":""},{"location":"riscv%E6%B1%87%E7%BC%96/%E9%A1%B5%E8%A1%A8/#riscv_1","title":"riscv\u9875\u8868\u76f8\u5173\u786c\u4ef6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA/utf8/","title":"\u6570\u636e\u5728\u8ba1\u7b97\u673a\u5185\u7684\u5b58\u50a8","text":"<p>\u8ba1\u7b97\u673a\u7684\u786c\u76d8\u548cRAM\u90fd\u53ea\u80fd\u4fdd\u5b58\u6bd4\u72790\u548c1\uff0c\u4f46\u662f\u5b9e\u9645\u7684\u4fe1\u606f\u79cd\u7c7b\u5f88\u591a\uff1a\u6574\u6570\u3001\u6d6e\u70b9\u6570\u3001\u5b57\u7b26... \u90a3\u4e48\u8981\u5982\u4f55\u4fdd\u5b58\u8fd9\u4e9b\u5185\u5bb9\u5462\uff1f\u552f\u4e00\u7684\u529e\u6cd5\u5c31\u662f\u628a\u5efa\u7acb\u89c4\u5219\uff0c\u628a\u8fd9\u4e9b\u5185\u5bb9\u6620\u5c04\u4e3a\u6bd4\u72790\u548c1\u7684\u7ec4\u5408\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA/utf8/#ascii","title":"ascii","text":"<p>ascii\u5c31\u662f\u5b9e\u73b0\u4e86\u4e0a\u9762\u7684\u6620\u5c04\u7684\u4e00\u4e2a\u89c4\u5219\uff0c\u53ea\u4e0d\u8fc7\uff0c\u4ed6\u53ea\u8003\u8651\u4e86\u82f1\u6587\u7684\u5e38\u89c1\u7b26\u53f7\u548c\u5b57\u7b26\u3002</p> <p></p> <p>ascii\u4fdd\u5b58\u4e860-127\u7f16\u53f7\u7684128\u4e2a\u5b57\u7b26\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u5b57\u82821byte(8bit) \u5c31\u80fd\u8868\u793a\u4e00\u4e2a\u82f1\u6587\u5b57\u7b26\u3002 \u4fdd\u5b58\u5b57\u7b26\u5230\u8ba1\u7b97\u673a\u65f6\uff0c\u53ea\u9700\u8981\u8f6c\u6362\u4e3a01\u5e8f\u5217\u5373\u53ef\uff0c\u89e3\u7801\u7684\u65f6\u5019\uff0c\u4e5f\u53ea\u9700\u8981\u6309\u7167\u5b57\u8282\u62c6\u5206\u3001\u67e5\u8868\u7ffb\u8bd1\u56de\u5b57\u7b26\u5373\u53ef\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA/utf8/#unicode","title":"Unicode\u6807\u51c6","text":"<p>unicode\u662f\u4e00\u79cd\u6807\u51c6\uff0c\u7b80\u5355\u6765\u8bb2\uff0c\u5c31\u662f\u628a\u4e16\u754c\u4e0a\u7684\u4e00\u5207\u7b26\u53f7\uff0c\u90fd\u5bf9\u5e94\u4e00\u4e2a\u552f\u4e00\u7f16\u7801\u3002 unicode = unicode\u5b57\u7b26\u96c6 + \u591a\u79cd\u53ef\u9009\u7684\u7f16\u7801\u7b56\u7565\u3002</p> <p>\u7b80\u5355\u6765\u8bb2\uff0c\u5c31\u662funicode\u6807\u51c6\u8fd9\u5e2e\u4eba\uff0c\u786e\u5b9a\u4e86\u4e00\u4e2a\u5927\u8868\uff0c\u5730\u7403\u4eba\u65e5\u5e38\u7528\u7684\u5927\u90e8\u5206\u6587\u5b57\uff0c\u90fd\u5728\u8fd9\u4e2a\u8868\u91cc\u9762\u6709\u4e00\u4e2a\u5e8f\u53f7\uff0c\u4f8b\u5982<code>a</code>\u5c31\u662f97\uff0c<code>\u4f60</code>\u662f20320\u53f7\uff0c\u7b49\u7b49\u3002</p> <p>\u600e\u4e48\u628a\u8fd9\u4e2a97\u6570\u5b57\u4fdd\u5b58\u5728\u8ba1\u7b97\u673a\u91cc\u9762\uff0c\u4fdd\u5b58\u4e86\u53c8\u600e\u4e48\u53bb\u628a\u4ed6\u8f6c\u56de\u5b57\u7b26\uff0c\u5c31\u662f\u7f16\u7801\u89c4\u5219\uff08\u7b56\u7565\uff09\uff0c\u4f8b\u5982utf8\uff0cutf32\u3002</p> <p>\u7b49\u7b49\uff0c\u6709\u4eba\u5728\u8fd9\u91cc\u4f1a\u6709\u56f0\u60d1\u4e86\uff0c\u5b58\u4e00\u4e2a\u6570\u5b57\u7f16\u53f7\u8fd8\u9700\u8981\u4ec0\u4e48\u89c4\u5219\u5462\uff1f\u76f4\u63a5\u8f6c\u4e3a\u4e8c\u8fdb\u5236\u5b58\u4e0d\u5c31\u597d\u4e86\u5417\uff1f\u8fd9\u4e2a\u95ee\u9898\u4f1a\u5728\u540e\u9762\u7684\u7f16\u7801\u89c4\u5219\u4e2d\u8be6\u7ec6\u63d0\u5230\uff0c\u5982\u679c\u4f60\u6709\u8fd9\u4e2a\u7591\u95ee\uff0c\u539f\u56e0\u5728\u4e8e\uff1a\u4f60\u6216\u8bb8\u4e0d\u77e5\u9053\u5b9a\u957f\u7f16\u7801\u548c\u8fb9\u957f\u7f16\u7801\u7684\u4e00\u4e9b\u4e8b\u60c5\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528<code>python</code>\u7684<code>ord</code>\u51fd\u6570\u6765\u83b7\u53d6\u67d0\u4e2a\u5b57\u7b26\u5bf9\u5e94\u7684unicode\u7f16\u53f7\uff0c\u975e\u5e38\u4fbf\u6377\uff01 Python<pre><code># test_ord.py\n# \u4f7f\u7528 python \u7684 ord \u51fd\u6570 \u6765\u83b7\u53d6\u5b57\u7b26\u5728 unicode \u5b57\u7b26\u96c6\u4e2d\u7684\u7f16\u53f7\n\nemoji = \"\ud83d\ude05\"\n\nchinese_char = \"\u4f60\"\n\nunicode_id1 = ord(emoji)\nunicode_id2 = ord(chinese_char)\n\nprint(unicode_id1, unicode_id2)\n\n# \u276f python test_ord.py\n# 128517 20320\n</code></pre> \u5f53\u7136\u5982\u679c\u4f60\u8bd5\u8fc7\u4e86\u5f88\u591a\u5b57\u7b26\uff0c\u5c31\u4f1a\u53d1\u73b0\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u6709\u65f6\u5019\u4f1a\u62a5\u9519\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\uff01 Python<pre><code># test_ord.py\n# ord\u51fd\u6570\u5728\u5904\u7406 \ud83d\udcaa\ud83c\udfff \u7684\u65f6\u5019\u62a5\u9519\u4e86\uff01\u56e0\u4e3a\u4ed6\u4e0d\u662f \u201c\u4e00\u4e2a\u5b57\u7b26\u201d\uff0c\u66f4\u4e13\u4e1a\u6765\u8bb2\uff0c\ud83d\udcaa\ud83c\udfff \u4e0d\u6b62\u4e00\u4e2a\u4ee3\u7801\u70b9\uff08rune\u6216code point\uff09\n\nemoji_with_2_code_point = \"\ud83d\udcaa\ud83c\udfff\"\n\nunicode_id3 = ord(emoji_with_2_code_point)\n\nprint(unicode_id3)\n\n# unicode_id3 = ord(emoji_with_2_code_point)\n                #   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n# TypeError: ord() expected a character, but string of length 2 found\n</code></pre> \u4e3a\u4e86\u7406\u89e3\u8fd9\u4e2a\u5947\u602a\u7684\u73b0\u8c61\uff0c\u6211\u4eec\u5fc5\u987b\u597d\u597d\u5730\u4e86\u89e3\u4e00\u4e0b <code>unicode \u4ee3\u7801\u70b9</code> \u4ee5\u53ca <code>\u5b57\u7d20 grapheme</code> \u8fd9\u4e9b\u6982\u5ff5\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA/utf8/#no-character-but-grapheme","title":"No character, but grapheme","text":"<p>\u201cgrapheme \u5b57\u7d20 \u2014\u2014\u2014\u2014 \u6700\u5c0f\u7684\u3001\u6709\u610f\u4e49\u7684\uff0c\u4eba\u7c7b\u4e66\u5199\u5355\u5143\u3002\u201d</p> <p></p> <p>\u5728unicode\u4e2d\uff0c\u4e0d\u518d\u4f7f\u7528\u201c\u5b57\u7b26\u201d\u8fd9\u6837\u7684\u5b57\u773c\uff0c\u800c\u4f7f\u7528\u201c\u5b57\u7d20\u201dgrapheme\u8fd9\u4e2a\u79f0\u547c\u3002</p> <p>\u5728\u82f1\u6587\u4e2d\uff0c\u4e3a\u4e86\u7ec4\u6210\u4e00\u4e2a\u5355\u8bcd\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u591a\u4e2a\u5b57\u6bcd\uff0c\u4f8b\u5982<code>cat</code>\u9700\u8981c\uff0ca\uff0ct\u4e09\u4e2a\u5b57\u6bcd\u3002 \u5728\u73b0\u4ee3\u6c49\u8bed\u91cc\u9762\uff0c<code>\u81ea\u884c\u8f66</code> \u8fd9\u4e2a\u8bcd\u8bed\u9700\u8981\u4e09\u4e2a\u5b57\uff0c\u81ea\uff0c\u884c\uff0c\u8f66\u6765\u6784\u6210\uff0c<code>c</code> <code>a</code> <code>t</code> <code>\u81ea</code> <code>\u884c</code> <code>\u8f66</code> \u8fd9\u4e9b\u5355\u4e2a\u7684\u5c31\u53eb\u5b57\u7d20\uff0c\u803d\u6401\u7684\u8868\u60c5\u4e5f\u662f\u4e00\u4e2a\u5b57\u7d20\u3002</p> <p>\u6211\u4eec\u7684unicode\u7f16\u7801\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u5bf9\u8fd9\u79cd\u80fd\u591f\u5355\u72ec\u4e66\u5199\u7684\u6700\u5c0f\u5355\u4f4d\u8fdb\u884c\u7f16\u53f7\uff0c\u800c\u8fd9\u79cd\u6700\u5c0f\u5355\u4f4d\uff0c\u5c31\u88ab\u79f0\u4e3agrapheme\u3002</p> <p>\u552f\u4e00\u7684\u5751\u70b9\u5728\u4e8e\uff1a\u6709\u7684\u5b57\u7d20\u5bf9\u5e94\u4e00\u4e2aunicode\u4ee3\u7801\u70b9\uff0c\u6709\u7684\u5219\u5bf9\u5e94\u591a\u4e2a\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA/utf8/#unicode_1","title":"unicode \u7801\u70b9","text":"<p>code point \u53c8\u662f\u4ec0\u4e48\uff1f \u5728\u524d\u9762\u6211\u4eec\u63d0\u5230 unicode \u6807\u51c6\u7ef4\u62a4\u4e86\u4e00\u5f20\u5927\u8868\uff0c\u8fd9\u5f20\u8868\u91cc\u7684\u6bcf\u4e00\u4e2a\u4e1c\u897f\u90fd\u5bf9\u5e94\u4e00\u4e2a\u7f16\u53f7\uff0c\u5b9e\u9645\u4e0a\u8fd9\u4e9b\u8868\u91cc\u9762\u7684\u4e1c\u897f\u5c31\u662funicode\u4ee3\u7801\u70b9\uff0c\u524d\u9762\u6211\u4eec\u8bf4\u201c\u4e3a\u6bcf\u4e00\u4e2a\u5b57\u7b26\u7f16\u4e00\u4e2a\u53f7\u201d\u8fd9\u5b9e\u9645\u4e0a\u662f\u4e0d\u51c6\u786e\u7684 \ud83d\ude01\u300c\u8bf7\u539f\u8c05\u6211\uff0c\u6bd5\u7adf\u4e4b\u524d\u6211\u4eec\u8fd8\u6ca1\u5f15\u5165\u5b57\u7d20\uff0c\u4ee3\u7801\u70b9\u8fd9\u4e9b\u6982\u5ff5\u300d\u3002</p> <p>\u6709\u4e9b\u5b57\u7b26\u53ef\u4ee5\u5bf9\u5e94\u4e00\u4e2acode point\uff0c\u6709\u7684\u5219\u53ef\u4ee5\u5bf9\u5e94\u4e24\u4e2a\uff0c\u4f8b\u5982\ud83d\udc4d\ud83c\udffb\u5bf9\u5e94\u4e00\u4e2a\u9ec4\u8272\u7684\ud83d\udc4d\uff0c\u548c\u4e00\u4e2a\u767d\u8272\u5757\uff1b\u53c8\u6bd4\u5982\u6709\u4e9b\u5b57\u6bcd\u4e0a\u9762\u5e26\u97f3\u6807\uff0c\u5b9e\u9645\u4e0a\u53ef\u80fd\u662f\u4e24\u4e2a\u7801\u70b9\uff1a\u4e0d\u5e26\u97f3\u6807\u7684\u5b57\u6bcd \u548c \u5355\u72ec\u7684\u97f3\u6807 \u7ec4\u5408\u8d77\u6765\u7684\u3002 \u201c\u603b\u4e4b\uff0c\u4e00\u4e2a\u770b\u8d77\u6765\u7684\u5b57\u7b26\uff08\u5b57\u7d20\uff09\uff0c\u6709\u53ef\u80fd\u662funicode\u4e2d\u7684\u591a\u4e2a\u4ee3\u7801\u70b9\u7684\u7ec4\u5408\u3002\u201d \u5982\u679c\u4e0d\u76f4\u5230\u8fd9\u4e00\u70b9\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u7684\u8fd0\u884c\u7ed3\u679c\u5c31\u4f1a\u51fa\u4e4e\u610f\u6599\u3002 ```python []</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA/utf8/#test_runepy","title":"test_rune.py","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA/utf8/#python-3120","title":"Python 3.12.0","text":"<p>s1 = \"\u4f60\u662f\u8fd9\u4e2a\ud83d\udc4d\ud83c\udffb\" s2 = \"\u4f60\u662f\u8fd9\u4e2a\ud83d\udc4d\" l1, l2 = len(s1), len(s2) print(\"l1:\", l1) print(\"l2:\", l2)</p> <p>\"\"\" \u276f python test_rune.py l1: 6 l2: 5 \"\"\" Text Only<pre><code>```go []\n// test_rune.go\n// go version go1.22.1 darwin/arm64\n\npackage main\n\nimport (\n    \"fmt\"\n    \"unicode/utf8\"\n)\n\nfunc main() {\n    s1 := \"\u4f60\u662f\u8fd9\u4e2a\ud83d\udc4d\ud83c\udffb\"\n    s2 := \"\u4f60\u662f\u8fd9\u4e2a\ud83d\udc4d\"\n    l1, l2 := len(s1), len(s2)\n    fmt.Printf(\"l1: %v\\n\", l1)\n    fmt.Printf(\"l2: %v\\n\", l2)\n    r1, r2 := utf8.RuneCountInString(s1), utf8.RuneCountInString(s2)\n    fmt.Printf(\"r1: %v\\n\", r1)\n    fmt.Printf(\"r2: %v\\n\", r2)\n}\n\n/*\n\u276f go run test_rune.go\nl1: 20\nl2: 16\nr1: 6\nr2: 5\n*/\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA/utf8/#unicode_2","title":"unicode \u7f16\u7801\u7b56\u7565","text":"<p>unicode\u662f\u4e00\u79cd\u6807\u51c6\uff0c\u90a3\u4e48\u600e\u4e48\u5bf9\u8fd9\u4e2a\u6807\u51c6\u8fdb\u884c\u7f16\u7801\uff1f\u6709\u591a\u4e2a\u6807\u51c6\uff0c\u4f8b\u5982utf8, utf16\u7b49\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA/utf8/#utf32","title":"utf32 \u5b9a\u957f\u7f16\u7801","text":"<p>\u4f7f\u75284\u5b57\u8282\u7684\u5b9a\u957f\u7f16\u7801\uff0c\u628a\u6240\u6709\u7684\u4ee3\u7801\u70b9\u90fd\u7f16\u7801\u4e3a4\u4e2a\u5b57\u8282\uff0c32\u4f4d\u3002 utf32\u7684\u4f18\u70b9\u662f\u6240\u6709\u5b57\u7b26\uff0c\u65e0\u8bba\u5e38\u89c1\u548c\u7f55\u89c1\uff0c\u90fd\u7f16\u7801\u6210\u4e3a\u76f8\u540c\u957f\u5ea6\u7684\u4e8c\u8fdb\u5236\u4e32\uff0c\u8fd9\u5bf9\u4e8e\u7f16\u7801\u548c\u89e3\u7801\u5341\u5206\u65b9\u4fbf\u3002 \u7f3a\u70b9\u662f\u6d6a\u8d39\u5185\u5b58\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA/utf8/#utf8","title":"utf8 \u53d8\u957f\u7f16\u7801","text":"<p>utf8\u662f\u53d8\u957f\u7f16\u7801\uff0c\u4e0d\u540c\u8303\u56f4\u7684\u4ee3\u7801\u70b9\uff0c\u5bf9\u5e94\u7684\u7f16\u7801\u957f\u5ea6\u4e0d\u4e00\u6837\uff0c\u517c\u5bb9ascii\u3002 \u4f8b\u5982\u4e00\u4e2a\u6c49\u5b57\uff0c\u7f16\u7801\u4e4b\u540e\u662f\u4e09\u4e2a\u5b57\u8282\u3002 utf8\u7f16\u7801\u662f\u53d8\u957f\u7f16\u7801\uff0c\u8fd9\u6837\u5341\u5206\u8282\u7701\u5185\u5b58\uff08\u76f8\u8f83\u4e8eutf32\u5b9a\u957f\u7f16\u7801\u6765\u8bb2\uff09\uff0c\u4f46\u662f\u5728\u8f6c\u6362\u7684\u65f6\u5019\u5c31\u9ebb\u70e6\u4e00\u70b9\uff0c\u56e0\u4e3a\u4f60\u5e76\u4e0d\u77e5\u9053\u5f53\u524d\u7684\u8fd9\u4e00\u4e2a\u5b57\u8282\u5c5e\u4e8e\u54ea\u4e2a\u5b57\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA/utf8/#utf8_1","title":"utf8 \u7f16\u7801\u6c49\u5b57","text":"<p>\u4e00\u4e2a\u6c49\u5b57\u5728utf8\u4e2d\uff0c\u7ecf\u8fc7\u7f16\u7801\uff0c\u957f\u5ea6\u662f\u4e09\u4e2a\u5b57\u8282\uff0c\u8fd9\u662f\u4e3a\u4ec0\u4e48\uff1f \u539f\u56e0\u662f\u5728unicode\u7f16\u7801\u6807\u51c6\u4e2d\uff0c\u4e2d\u6587\u6c49\u5b57\u7684\u7f16\u7801\u8303\u56f4\u6b63\u597d\u843d\u5728 \u4e09\u5b57\u8282\u7f16\u7801\u7684\u8303\u56f4\u5185\u3002</p> <p> \u53ef\u4ee5\u4f7f\u7528\u5728\u7ebf\u5de5\u5177\u8fdb\u884c\u7f16\u7801 \u4f8b\u5982\u5bf9 \u201c\u4f60\u201d \u8fdb\u884c\u7f16\u7801\uff0c\u7ed3\u679c\u662f E4BDA0\uff0c\u8fd9\u662f\u5341\u516d\u8fdb\u5236 \u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u662f 11100100 10111101 10100000 \u662f\u4e09\u5b57\u8282\u3002 \u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u524d\u97624\u4f4d\u662f1110\uff0c\u540e\u9762\u4e24\u4e2a\u5b57\u8282\u7684\u524d\u4e24\u4f4d\u90fd\u662f10\uff0c\u8fd9\u662f\u89c4\u5b9a\u597d\u7684\u3002</p> <p><code>1110[0100] 10[111101] 10[100000]</code> \u88ab\u4e2d\u62ec\u53f7\u5305\u56f4\u7684 4 + 6 + 6 = 16\u4f4d\u62fc\u8d77\u6765\uff0c\u5c31\u662f<code>0100111101100000</code> 20320 \u5bf9\u5e94\u7684 \u5c31\u662f\u6c49\u5b57 \u4f60 \u5728python\u4e2d\u53ef\u4ee5\u7528ord\u51fd\u6570\u5f97\u5230\u5b57\u7b26\u5bf9\u5e94\u7684unicode\u7801\u503c\uff08\u5341\u8fdb\u5236\uff09 Python<pre><code>&gt;&gt;&gt; s = \"\u4f60\"\n&gt;&gt;&gt; ord(s)\n20320\n</code></pre></p> <p>\u4e5f\u53ef\u4ee5\u5728go\u8bed\u8a00\u4e2d\u9a8c\u8bc1 Go<pre><code>// utf8_.go\npackage main\n\nimport (\n    \"fmt\"\n    \"unicode/utf8\"\n)\n\nfunc main() {\n    s := \"\u4f606\"\n    l := len(s)\n    fmt.Printf(\"l: %v\\n\", l) // \u5e94\u8be5\u662f4\n    rn := utf8.RuneCountInString(s)\n    fmt.Printf(\"rn: %v\\n\", rn)\n    for i := range l {\n        fmt.Printf(\"%b \\n\", s[i])\n    }\n}\n</code></pre> \u6ce8\u610f\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230\uff0cgo\u8bed\u8a00\u4e2d\u7684rune\u3002 Bash<pre><code>\u276f go run utf8_.go\nl: 4\nrn: 2\n11100100 \n10111101 \n10100000 \n110110 # \u8fd9\u4e2a\u662f\u7b2c\u4e8c\u4e2a rune \u4e5f\u5c31\u662f 6 \u8fd9\u4e2a\u5b57\u7b26\uff0c\u5728 ascii \u8303\u56f4\u5185\n</code></pre></p> <p>\u518d\u6765\u770b\u4e0b\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u5c31\u80fd\u77e5\u9053 rune \u5b9e\u9645\u4e0a\u5c31\u662f utf8 \u7684\u4ee3\u7801\u70b9\u3002 Go<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"unicode/utf8\"\n)\n\nfunc main() {\n    s := \"\u4f606\"\n    l := len(s)\n    fmt.Printf(\"l: %v\\n\", l) // \u5e94\u8be5\u662f4\n    rn := utf8.RuneCountInString(s)\n    fmt.Printf(\"rn: %v\\n\", rn)\n    for i := range l {\n        fmt.Printf(\"%b \\n\", s[i])\n    }\n\n    s1 := \"\ud83d\udc4d\ud83c\udffb\" // \u8fd9\u4e2a\u5c31\u542b\u6709\u4e24\u4e2a unicode \u4ee3\u7801\u70b9\n    fmt.Printf(\"s1: %v\\n\", s1)\n    l1 := len(s1)\n    fmt.Printf(\"l1: %v\\n\", l1) // 8\n    rn1 := utf8.RuneCountInString(s1) // 2\n    fmt.Printf(\"rn1: %v\\n\", rn1)\n}\n</code></pre></p> <p>\u5982\u679c\u8fd8\u9700\u8981\u77e5\u9053\u4e00\u4e9b\u7f16\u7801\u7684\u7ec6\u8282\uff0c\u53ef\u4ee5\u770b\u8fd9\u4e2a\u89c6\u9891</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/prefix_diff/","title":"\u524d\u7f00\u3001\u5dee\u5206","text":"<p>\u524d\u7f00\u548c\u5dee\u5206</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/prefix_diff/#_1","title":"\u524d\u7f00","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/prefix_diff/#_2","title":"\u5dee\u5206","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/topo/","title":"\u62d3\u6251\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/topo/#_2","title":"\u56fe\u7684\u8868\u793a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/topo/#_3","title":"\u62d3\u6251\u6392\u5e8f\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/topo/#python-graphlib","title":"python graphlib\u5e93","text":"Python<pre><code>from graphlib import TopologicalSorter\n\ng = {\n    0: [1],\n    1: [2],\n    2: [3, 4, 5],\n    4: [5]\n}\n\nts = TopologicalSorter(g)\nres = ts.static_order()\n\nprint(list(res))  # [3, 5, 4, 2, 1, 0]\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/topo/#bfs","title":"BFS\u65b9\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/topo/#dfs","title":"DFS\u65b9\u6cd5","text":"<p>\u4f7f\u7528states \u6807\u8bb0\u6240\u6709\u8282\u70b9\u7684\u8bbf\u95ee\u72b6\u6001</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/topo/#leetcode","title":"Leetcode \u4f8b\u9898","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/topo/#2","title":"\u8bfe\u7a0b\u88682","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/topo/#1","title":"\u8bfe\u7a0b\u88681","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/trie/","title":"\u524d\u7f00\u6811\u3001\u5b57\u5178\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/dp/bag/bag01/","title":"0-1\u80cc\u5305","text":"<p>\u6709n\u4e2a\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\u7684\u4ef7\u503c\u662fv[i],\u4f53\u79ef\u662fw[i]\uff0c\u6709\u4e00\u4e2a\u80cc\u5305\u5bb9\u91cfcap\uff0c\u6c42\u6700\u5927\u4ef7\u503c\u3002 \u7269\u54c1\u90fd\u53ea\u6709\u4e00\u4e2a\uff0c\u8981\u4e48\u62ff\u8981\u4e48\u4e0d\u62ff\uff0c\u6240\u4ee5\u53eb\u201c0-1\u80cc\u5305\u201d\u3002</p>"}]}